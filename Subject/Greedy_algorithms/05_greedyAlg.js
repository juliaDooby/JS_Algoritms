---------------------------------------------------------------------------------------------
üìå [–ñ–∞–¥–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã]:
---
5. –ó–∞–¥–∞—á–∞: –ó–∞–¥–∞—á–∞ –æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º –æ—Å—Ç–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ (–ê–ª–≥–æ—Ä–∏—Ç–º –ü—Ä–∏–º–∞)
‚åõ –ó–∞–¥–∞—á–∞: –î–ª—è —Å–≤—è–∑–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏ –Ω–∞–π—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Å—Ç–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function prim(graph) {
    const mst = [];
    const visited = new Set();
    const edges = [[0, 0, 0]]; // [—Å—Ç–æ–∏–º–æ—Å—Ç—å, –≤–µ—Ä—à–∏–Ω–∞, —Å–æ—Å–µ–¥–Ω—è—è –≤–µ—Ä—à–∏–Ω–∞]

    while (edges.length > 0) {
        edges.sort((a, b) => a[0] - b[0]); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–±—Ä–∞
        const [cost, from, to] = edges.shift();

        if (visited.has(to)) continue;
        visited.add(to);
        mst.push([from, to, cost]);

        for (let [neighbor, weight] of graph[to]) {
            if (!visited.has(neighbor)) {
                edges.push([weight, to, neighbor]);
            }
        }
    }

    return mst;
}

const graph = {
    0: [[1, 1], [2, 4]],
    1: [[0, 1], [2, 2], [3, 5]],
    2: [[0, 4], [1, 2], [3, 1]],
    3: [[1, 5], [2, 1]],
};
console.log(prim(graph)); // –í—ã–≤–æ–¥–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Å—Ç–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ê–ª–≥–æ—Ä–∏—Ç–º –ü—Ä–∏–º–∞ —Å—Ç—Ä–æ–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Å—Ç–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, –Ω–∞—á–∏–Ω–∞—è —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã –∏ –¥–æ–±–∞–≤–ª—è—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ–±—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–µ–¥–∏–Ω—è—é—Ç –Ω–æ–≤—É—é –≤–µ—Ä—à–∏–Ω—É —Å –¥–µ—Ä–µ–≤–æ–º.
--------------------------------------------------------------------------------------------- 
