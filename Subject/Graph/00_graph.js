---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ì—Ä–∞—Ñ—ã:
---
–ì—Ä–∞—Ñ—ã –≤ JavaScript:
–ß—Ç–æ —Ç–∞–∫–æ–µ –≥—Ä–∞—Ñ?
–ì—Ä–∞—Ñ ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:
- –í–µ—Ä—à–∏–Ω (nodes, vertices) ‚Äî –æ–±—ä–µ–∫—Ç—ã –∏–ª–∏ —É–∑–ª—ã.
- –†—ë–±–µ—Ä (edges) ‚Äî —Å–≤—è–∑–∏ –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏.
–í–∏–¥—ã –≥—Ä–∞—Ñ–æ–≤
üîπ –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
- –í –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ —Å–≤—è–∑–∏ –∏–º–µ—é—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–¥–Ω–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ—Ä–æ–≥–∏).
- –í –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ —Å–≤—è–∑–∏ –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–∑—å—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö).
üîπ –í–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∏ –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ
- –í–∑–≤–µ—à–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ—ã –∏–º–µ—é—Ç "–≤–µ—Å" —É —Ä—ë–±–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ –∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ).
- –ù–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ—ã –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∏ –±–µ–∑ –≤–µ—Å–æ–≤.
---
–ö–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ –≤ –ø–∞–º—è—Ç–∏?
üî∏ –ú–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–ª–æ—Ç–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤)
–ú–∞—Å—Å–∏–≤ `n √ó n`, –≥–¥–µ `1` –æ–∑–Ω–∞—á–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏, –∞ `0` ‚Äî –µ—ë –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ.
```js
const adjacencyMatrix = [
  [0, 1, 1], // –í–µ—Ä—à–∏–Ω–∞ 0 —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å 1 –∏ 2
  [1, 0, 1], // –í–µ—Ä—à–∏–Ω–∞ 1 —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å 0 –∏ 2
  [1, 1, 0]  // –í–µ—Ä—à–∏–Ω–∞ 2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å 0 –∏ 1
];
```
üî∏ –°–ø–∏—Å–æ–∫ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤)
–û–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á–∏ ‚Äî –≤–µ—Ä—à–∏–Ω—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –º–∞—Å—Å–∏–≤—ã —Å–º–µ–∂–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω.
```js
const adjacencyList = {
  0: [1, 2],
  1: [0, 2],
  2: [0, 1]
};
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ì—Ä–∞—Ñ—ã:
---
1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä–∞—Ñ–∞ —Å –º–µ—Ç–æ–¥–∞–º–∏ **–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—à–∏–Ω –∏ —Ä—ë–±–µ—Ä.
üéØ –†–µ—à–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:
–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç `adjacencyList` –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞.
```js
class Graph {
  constructor() {
    this.adjacencyList = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
  }

  addVertex(vertex) {
    if (!this.adjacencyList[vertex]) {
      this.adjacencyList[vertex] = [];
    }
  }

  addEdge(v1, v2) {
    this.adjacencyList[v1].push(v2);
    this.adjacencyList[v2].push(v1); // –î–ª—è –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
  }

  display() {
    console.log(this.adjacencyList);
  }
}

const graph = new Graph();
graph.addVertex(1);
graph.addVertex(2);
graph.addVertex(3);
graph.addEdge(1, 2);
graph.addEdge(2, 3);
graph.display();
// –í—ã–≤–æ–¥: { '1': [ 2 ], '2': [ 1, 3 ], '3': [ 2 ] }
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ì—Ä–∞—Ñ—ã:
---
2Ô∏è‚É£ –û–±—Ö–æ–¥ –≤ –≥–ª—É–±–∏–Ω—É (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å DFS –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞.
üéØ –†–µ—à–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:
DFS —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ—Å–µ—â–∞–µ—Ç –≤–µ—Ä—à–∏–Ω—ã, —É–≥–ª—É–±–ª—è—è—Å—å –∫–∞–∫ –º–æ–∂–Ω–æ –¥–∞–ª—å—à–µ.
```js
const dfs = (graph, start, visited = new Set()) => {
  if (!visited.has(start)) {
    console.log(start);
    visited.add(start);
    for (let neighbor of graph[start]) {
      dfs(graph, neighbor, visited);
    }
  }
};

const graph2 = { 0: [1, 2], 1: [0, 3], 2: [0], 3: [1] };
dfs(graph2, 0);
// –í—ã–≤–æ–¥: 0 1 3 2
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ì—Ä–∞—Ñ—ã:
---
3Ô∏è‚É£ –û–±—Ö–æ–¥ –≤ —à–∏—Ä–∏–Ω—É (BFS)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å BFS –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞.
üéØ –†–µ—à–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:
BFS –ø—Ä–æ—Ö–æ–¥–∏—Ç –≥—Ä–∞—Ñ –ø–æ —É—Ä–æ–≤–Ω—è–º, –∏—Å–ø–æ–ª—å–∑—É—è –æ—á–µ—Ä–µ–¥—å.
```js
const bfs = (graph, start) => {
  const queue = [start];
  const visited = new Set(queue);

  while (queue.length) {
    const node = queue.shift();
    console.log(node);
    for (let neighbor of graph[node]) {
      if (!visited.has(neighbor)) {
        visited.add(neighbor);
        queue.push(neighbor);
      }
    }
  }
};

bfs(graph2, 0);
// –í—ã–≤–æ–¥: 0 1 2 3
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ì—Ä–∞—Ñ—ã:
---
4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ—Ä—à–∏–Ω–∞–º–∏
‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ø—É—Ç—å –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏.
üéØ –†–µ—à–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:
–ò—Å–ø–æ–ª—å–∑—É–µ–º DFS.
```js
const hasPath = (graph, start, end, visited = new Set()) => {
  if (start === end) return true;
  if (visited.has(start)) return false;

  visited.add(start);
  for (let neighbor of graph[start]) {
    if (hasPath(graph, neighbor, end, visited)) return true;
  }
  return false;
};

console.log(hasPath(graph2, 0, 3)); // true
console.log(hasPath(graph2, 2, 3)); // false
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ì—Ä–∞—Ñ—ã:
---
5Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏
‚åõ –ó–∞–¥–∞—á–∞: –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π –≥—Ä–∞—Ñ–∞.
üéØ –†–µ—à–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:
–ó–∞–ø—É—Å–∫–∞–µ–º DFS –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
```js
const countComponents = (graph) => {
  const visited = new Set();
  let count = 0;

  const dfs = (node) => {
    visited.add(node);
    for (let neighbor of graph[node]) {
      if (!visited.has(neighbor)) dfs(neighbor);
    }
  };

  for (let node in graph) {
    if (!visited.has(Number(node))) {
      count++;
      dfs(Number(node));
    }
  }
  return count;
};

console.log(countComponents({ 0: [1], 1: [0], 2: [] })); // 2
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ì—Ä–∞—Ñ—ã:
---
6Ô∏è‚É£ –ü–æ–∏—Å–∫ —Ü–∏–∫–ª–∞
```js
const hasCycle = (graph, node, visited = new Set(), parent = -1) => {
  visited.add(node);
  for (let neighbor of graph[node]) {
    if (!visited.has(neighbor)) {
      if (hasCycle(graph, neighbor, visited, node)) return true;
    } else if (neighbor !== parent) {
      return true;
    }
  }
  return false;
};
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ì—Ä–∞—Ñ—ã:
---
7Ô∏è‚É£ –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å (BFS)
```js
const shortestPathBFS = (graph, start, end) => {
  const queue = [[start, 0]];
  const visited = new Set();

  while (queue.length) {
    const [node, dist] = queue.shift();
    if (node === end) return dist;

    visited.add(node);
    for (let neighbor of graph[node]) {
      if (!visited.has(neighbor)) {
        queue.push([neighbor, dist + 1]);
      }
    }
  }
  return -1;
};

console.log(shortestPathBFS(graph2, 0, 3)); // 2
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ì—Ä–∞—Ñ—ã:
---
8Ô∏è‚É£ –ê–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã
–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤–æ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ.
```js
// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –∏ –î–µ–π–∫—Å—Ç—Ä—ã
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ì—Ä–∞—Ñ—ã:
---
9Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä–∞—Ñ –¥–µ—Ä–µ–≤–æ–º
```js
const isTree = (graph) => {
  let edges = 0;
  for (let key in graph) edges += graph[key].length;
  edges /= 2;
  return countComponents(graph) === 1 && edges === Object.keys(graph).length - 1;
};
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ì—Ä–∞—Ñ—ã:
---
üîü –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–æ—Å—Ç–æ–≤ (DFS)
```js
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –¢–∞—Ä—å—è–Ω–∞
```
---------------------------------------------------------------------------------------------
