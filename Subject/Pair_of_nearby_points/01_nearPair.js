---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–ü–∞—Ä–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫¬ª:
---
1. ‚åõ –ó–∞–¥–∞—á–∞: –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
–£—Å–ª–æ–≤–∏–µ:
–ù–∞–ø–∏—à–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç –ø–∞—Ä—É –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function closestPair(points) {
  points.sort((a, b) => a.x - b.x);  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Å–∏ X
  let minDist = Infinity;
  let pair = [];

  for (let i = 0; i < points.length - 1; i++) {
    for (let j = i + 1; j < points.length; j++) {
      if (points[j].x - points[i].x > minDist) break;  // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫, –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ X –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
      const dist = Math.sqrt((points[j].x - points[i].x) ** 2 + (points[j].y - points[i].y) ** 2);
      if (dist < minDist) {
        minDist = dist;
        pair = [points[i], points[j]];
      }
    }
  }

  return pair;
}

const points = [{x: 1, y: 1}, {x: 2, y: 2}, {x: 3, y: 3}, {x: 5, y: 5}];
console.log(closestPair(points));  // [{x: 1, y: 1}, {x: 2, y: 2}]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
–í —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –º—ã —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –ø–æ –æ—Å–∏ X. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –ø–∞—Ä, —Ç–∞–∫ –∫–∞–∫ –º—ã —Å—Ä–∞–∑—É –º–æ–∂–µ–º –∏—Å–∫–ª—é—á–∏—Ç—å –ø–∞—Ä—ã, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ –æ—Å–∏ X –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ.
---------------------------------------------------------------------------------------------  
