---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û–±—Ö–æ–¥—ã –≥—Ä–∞—Ñ–∞:
---
1. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –≤ –≥–ª—É–±–∏–Ω—É (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å –≥—Ä–∞—Ñ –≤ –≥–ª—É–±–∏–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function dfs(graph, start) {
    let visited = new Set();
    let result = [];

    function visit(node) {
        if (visited.has(node)) return;
        visited.add(node);
        result.push(node);

        for (let neighbor of graph[node]) {
            visit(neighbor);
        }
    }

    visit(start);
    return result;
}

const graph = {
    A: ["B", "C"],
    B: ["A", "D", "E"],
    C: ["A", "F"],
    D: ["B"],
    E: ["B", "F"],
    F: ["C", "E"]
};

console.log(dfs(graph, "A")); // ["A", "B", "D", "E", "F", "C"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏–º —á–µ—Ä–µ–∑ —Å–æ—Å–µ–¥–µ–π –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã, –¥–æ–±–∞–≤–ª—è—è –∏—Ö –≤ –º–∞—Å—Å–∏–≤ `result`, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –ø–æ—Å–µ—â–µ–Ω—ã.
- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫—É—Ä—Å–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E), –≥–¥–µ V ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω, –∞ E ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û–±—Ö–æ–¥—ã –≥—Ä–∞—Ñ–∞:
---
2. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –≤ —à–∏—Ä–∏–Ω—É (BFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å –≥—Ä–∞—Ñ –≤ —à–∏—Ä–∏–Ω—É, –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function bfs(graph, start) {
    let visited = new Set();
    let queue = [start];
    let result = [];

    while (queue.length) {
        let node = queue.shift();
        if (!visited.has(node)) {
            visited.add(node);
            result.push(node);

            for (let neighbor of graph[node]) {
                if (!visited.has(neighbor)) {
                    queue.push(neighbor);
                }
            }
        }
    }

    return result;
}

console.log(bfs(graph, "A")); // ["A", "B", "C", "D", "E", "F"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ö–æ–¥–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –≥—Ä–∞—Ñ–∞.
- –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—à–∏–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –ø–æ—Å–µ—â–µ–Ω—ã.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E), –≥–¥–µ V ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω, –∞ E ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û–±—Ö–æ–¥—ã –≥—Ä–∞—Ñ–∞:
---
3. –û–±—Ö–æ–¥ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –≤ –≥–ª—É–±–∏–Ω—É (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –≤ –≥–ª—É–±–∏–Ω—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∫—É—Ä—Å–∏—é.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function dfsDirected(graph, start) {
    let visited = new Set();
    let result = [];

    function visit(node) {
        if (visited.has(node)) return;
        visited.add(node);
        result.push(node);

        for (let neighbor of graph[node] || []) {
            visit(neighbor);
        }
    }

    visit(start);
    return result;
}

const directedGraph = {
    A: ["B", "C"],
    B: ["D"],
    C: ["E"],
    D: [],
    E: []
};

console.log(dfsDirected(directedGraph, "A")); // ["A", "B", "D", "C", "E"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –æ–±—Ö–æ–¥ —Å –ø–æ–º–æ—â—å—é —Ä–µ–∫—É—Ä—Å–∏–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ —Ä—ë–±—Ä–∞–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞.
- –ö–∞–∂–¥—É—é –≤–µ—Ä—à–∏–Ω—É –ø–æ—Å–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û–±—Ö–æ–¥—ã –≥—Ä–∞—Ñ–∞:
---
4. –û–±—Ö–æ–¥ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –≤ —à–∏—Ä–∏–Ω—É (BFS)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ–±—Ö–æ–¥ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –≤ —à–∏—Ä–∏–Ω—É.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function bfsDirected(graph, start) {
    let visited = new Set();
    let queue = [start];
    let result = [];

    while (queue.length) {
        let node = queue.shift();
        if (!visited.has(node)) {
            visited.add(node);
            result.push(node);

            for (let neighbor of graph[node] || []) {
                if (!visited.has(neighbor)) {
                    queue.push(neighbor);
                }
            }
        }
    }

    return result;
}

console.log(bfsDirected(directedGraph, "A")); // ["A", "B", "C", "D", "E"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±—ã—á–Ω–æ–º—É BFS, –Ω–æ —Å —É—á—ë—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ —Ä—ë–±–µ—Ä.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û–±—Ö–æ–¥—ã –≥—Ä–∞—Ñ–∞:
---
5. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Ü–∏–∫–ª (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –≤ –≥–ª—É–±–∏–Ω—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≥—Ä–∞—Ñ —Ü–∏–∫–ª.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function hasCycle(graph) {
    let visited = new Set();
    let recStack = new Set();

    function dfs(node) {
        if (recStack.has(node)) return true; // –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–∏–∫–ª
        if (visited.has(node)) return false;

        visited.add(node);
        recStack.add(node);

        for (let neighbor of graph[node] || []) {
            if (dfs(neighbor)) {
                return true;
            }
        }

        recStack.delete(node);
        return false;
    }

    for (let node in graph) {
        if (!visited.has(node)) {
            if (dfs(node)) {
                return true;
            }
        }
    }

    return false;
}

const cyclicGraph = {
    A: ["B"],
    B: ["C"],
    C: ["A"]
};

const acyclicGraph = {
    A: ["B"],
    B: ["C"],
    C: []
};

console.log(hasCycle(cyclicGraph)); // true
console.log(hasCycle(acyclicGraph)); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –î–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å—Ç–µ–∫. –ï—Å–ª–∏ –≤–µ—Ä—à–∏–Ω–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–µ–∫–µ —Ä–µ–∫—É—Ä—Å–∏–∏, –∑–Ω–∞—á–∏—Ç, —Ü–∏–∫–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û–±—Ö–æ–¥—ã –≥—Ä–∞—Ñ–∞:
---
6. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ —Å –ø–æ–º–µ—Ç–∫–æ–π —Ä—ë–±–µ—Ä (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞ –≤ –≥–ª—É–±–∏–Ω—É, –ø–æ–º–µ—á–∞—è —Ä—ë–±—Ä–∞ –∫–∞–∫ ¬´–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ¬ª –∏–ª–∏ ¬´–æ–±—Ä–∞—Ç–Ω—ã–µ¬ª.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function dfsEdgeTypes(graph, start) {
    let visited = new Set();
    let result = [];

    function dfs(node, parent) {
        visited.add(node);

        for (let neighbor of graph[node] || []) {
            if (!visited.has(neighbor)) {
                result.push(`${node} -> ${neighbor} (Tree Edge)`);
                dfs(neighbor, node);
            } else if (parent !== neighbor) {
                result.push(`${node} -> ${neighbor} (Back Edge)`);
            }
        }
    }

    dfs(start);
    return result;
}

const graph2 = {
    A: ["B", "C"],
    B: ["D"],
    C: ["E"],
    D: [],
    E: []
};

console.log(dfsEdgeTypes(graph2, "A"));
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã –æ—Ç–º–µ—á–∞–µ–º —Ä—ë–±—Ä–∞ –∫–∞–∫ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –±—ã–ª–∏ –ª–∏ –≤–µ—Ä—à–∏–Ω—ã —É–∂–µ –ø–æ—Å–µ—â–µ–Ω—ã.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û–±—Ö–æ–¥—ã –≥—Ä–∞—Ñ–∞:
---
7. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã (BFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞ –≤ —à–∏—Ä–∏–Ω—É —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function bfsWithDistances(graph, start) {
    let visited = new Set();
    let queue = [start];
    let distances = { [start]: 0 };

    while (queue.length) {
        let node = queue.shift();

        for (let neighbor of graph[node] || []) {
            if (!visited.has(neighbor)) {
                visited.add(neighbor);
                queue.push(neighbor);
                distances[neighbor] = distances[node] + 1;
            }
        }
    }

    return distances;
}

const graph3 = {
    A: ["B", "C"],
    B: ["A", "D"],
    C: ["A"],
    D: ["B"]
};

console.log(bfsWithDistances(graph3, "A")); // { A: 0, B: 1, C: 1, D: 2 }
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã –≤ –æ–±—ä–µ–∫—Ç–µ `distances` –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –ø–æ –º–µ—Ä–µ –æ–±—Ö–æ–¥–∞.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û–±—Ö–æ–¥—ã –≥—Ä–∞—Ñ–∞:
---
8. –û–±—Ö–æ–¥ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function findConnectedComponents(graph) {
    let visited = new Set();
    let components = [];

    function dfs(node, component) {
        visited.add(node);
        component.push(node);

        for (let neighbor of graph[node] || []) {
            if (!visited.has(neighbor)) {
                dfs(neighbor, component);
            }
        }
    }

    for (let node in graph) {
        if (!visited.has(node)) {
            let component = [];
            dfs(node, component);
            components.push(component);
        }
    }

    return components;
}

const graph4 = {
    A: ["B", "C"],
    B: ["A", "C"],
    C: ["A", "B"],
    D: ["E"],
    E: ["D"],
    F: []
};

console.log(findConnectedComponents(graph4)); // [["A", "B", "C"], ["D", "E"], ["F"]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤–µ—Ä—à–∏–Ω–∞–º –∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–µ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ö–æ–¥ DFS, —Å–æ–∑–¥–∞–≤–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–≤—è–∑–Ω–æ—Å—Ç–∏.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û–±—Ö–æ–¥—ã –≥—Ä–∞—Ñ–∞:
---
9. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞ –≤ –≥–ª—É–±–∏–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function dfsWithTime(graph, start) {
    let visited = new Set();
    let result = [];
    let time = 0;

    function visit(node) {
        visited.add(node);
        time++;
        result.push(`Node ${node} entered at time ${time}`);

        for (let neighbor of graph[node] || []) {
            if (!visited.has(neighbor)) {
                visit(neighbor);
            }
        }

        time++;
        result.push(`Node ${node} exited at time ${time}`);
    }

    visit(start);
    return result;
}

const graph5 = {
    A: ["B", "C"],
    B: ["A"],
    C: ["A"]
};

console.log(dfsWithTime(graph5, "A"));
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã, —á—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ—Å—Ç–æ–≤ –∏ –∞—Ä–æ–∫).
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û–±—Ö–æ–¥—ã –≥—Ä–∞—Ñ–∞:
---
10. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –ø—É—Ç–∏ –¥–æ –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã (BFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞ –≤ —à–∏—Ä–∏–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—É—Ç—å –¥–æ –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function bfsWithPath(graph, start) {
    let visited = new Set();
    let queue = [start];
    let parent = { [start]: null };
    let result = [];

    while (queue.length) {
        let node = queue.shift();

        for (let neighbor of graph[node] || []) {
            if (!visited.has(neighbor)) {
                visited.add(neighbor);
                queue.push(neighbor);
                parent[neighbor] = node;
            }
        }
    }

    for (let node in parent) {
        let path = [];
        let current = node;
        while (current !== null) {
            path.unshift(current);
            current = parent[current];
        }
        result.push(path);
    }

    return result;
}

console.log(bfsWithPath(graph3, "A")); // [["A", "B", "D"], ["A", "C"]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—É—Ç—å –¥–æ –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—ä–µ–∫—Ç `parent`, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---------------------------------------------------------------------------------------------
