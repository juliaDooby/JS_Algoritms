---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û–±—Ö–æ–¥—ã –≥—Ä–∞—Ñ–∞:
---
5. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ —Å –ø–æ–º–µ—Ç–∫–æ–π —Ä—ë–±–µ—Ä (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞ –≤ –≥–ª—É–±–∏–Ω—É, –ø–æ–º–µ—á–∞—è —Ä—ë–±—Ä–∞ –∫–∞–∫ ¬´–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ¬ª –∏–ª–∏ ¬´–æ–±—Ä–∞—Ç–Ω—ã–µ¬ª.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function dfsEdgeTypes(graph, start) {
    let visited = new Set();
    let result = [];

    function dfs(node, parent) {
        visited.add(node);

        for (let neighbor of graph[node] || []) {
            if (!visited.has(neighbor)) {
                result.push(`${node} -> ${neighbor} (Tree Edge)`);
                dfs(neighbor, node);
            } else if (parent !== neighbor) {
                result.push(`${node} -> ${neighbor} (Back Edge)`);
            }
        }
    }

    dfs(start);
    return result;
}

const graph2 = {
    A: ["B", "C"],
    B: ["D"],
    C: ["E"],
    D: [],
    E: []
};

console.log(dfsEdgeTypes(graph2, "A"));
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã –æ—Ç–º–µ—á–∞–µ–º —Ä—ë–±—Ä–∞ –∫–∞–∫ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –±—ã–ª–∏ –ª–∏ –≤–µ—Ä—à–∏–Ω—ã —É–∂–µ –ø–æ—Å–µ—â–µ–Ω—ã.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---------------------------------------------------------------------------------------------
