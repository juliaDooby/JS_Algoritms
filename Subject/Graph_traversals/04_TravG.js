---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û–±—Ö–æ–¥—ã –≥—Ä–∞—Ñ–∞:
---
4. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Ü–∏–∫–ª (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –≤ –≥–ª—É–±–∏–Ω—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≥—Ä–∞—Ñ —Ü–∏–∫–ª.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function hasCycle(graph) {
    let visited = new Set();
    let recStack = new Set();

    function dfs(node) {
        if (recStack.has(node)) return true; // –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–∏–∫–ª
        if (visited.has(node)) return false;

        visited.add(node);
        recStack.add(node);

        for (let neighbor of graph[node] || []) {
            if (dfs(neighbor)) {
                return true;
            }
        }

        recStack.delete(node);
        return false;
    }

    for (let node in graph) {
        if (!visited.has(node)) {
            if (dfs(node)) {
                return true;
            }
        }
    }

    return false;
}

const cyclicGraph = {
    A: ["B"],
    B: ["C"],
    C: ["A"]
};

const acyclicGraph = {
    A: ["B"],
    B: ["C"],
    C: []
};

console.log(hasCycle(cyclicGraph)); // true
console.log(hasCycle(acyclicGraph)); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –î–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å—Ç–µ–∫. –ï—Å–ª–∏ –≤–µ—Ä—à–∏–Ω–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–µ–∫–µ —Ä–µ–∫—É—Ä—Å–∏–∏, –∑–Ω–∞—á–∏—Ç, —Ü–∏–∫–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---------------------------------------------------------------------------------------------
