--------------------------------------------------------------------------------------------- 
⋙ ❍ Задача «Максимальный оклад»:
---
Задача: Максимальный оклад
Задача связана с вычислением максимального оклада среди сотрудников компании, подсчетом средней зарплаты и различными манипуляциями с данными о зарплатах.
1. ⌛ Задача: Поиск максимального оклада среди сотрудников
Условие:
Нужно найти максимальный оклад среди всех сотрудников компании.
🎯 Решение:
```javascript
function findMaxSalary(salaries) {
  return Math.max(...salaries);
}

let salaries = [35000, 45000, 50000, 60000, 70000];
console.log(`Максимальный оклад: ${findMaxSalary(salaries)}`);  // 70000
```
Объяснение:
Используем функцию `Math.max()`, которая принимает несколько значений и возвращает наибольшее из них. Мы применяем оператор расширения (`...`), чтобы передать все элементы массива в функцию.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
⋙ ❍ Задача «Максимальный оклад»:
---
2. ⌛ Задача: Поиск сотрудника с максимальным окладом
Условие:
Необходимо найти имя сотрудника с максимальным окладом.
🎯 Решение:
```javascript
function findEmployeeWithMaxSalary(employees) {
  let maxSalaryEmployee = employees.reduce((max, employee) =>
    employee.salary > max.salary ? employee : max
  );
  return maxSalaryEmployee.name;
}

let employees = [
  { name: "Иван", salary: 35000 },
  { name: "Мария", salary: 45000 },
  { name: "Алексей", salary: 50000 },
  { name: "Елена", salary: 60000 },
];

console.log(`Сотрудник с максимальным окладом: ${findEmployeeWithMaxSalary(employees)}`);  // Елена
```
Объяснение:
Используем метод `reduce()`, чтобы найти сотрудника с максимальной зарплатой. В каждом шаге мы сравниваем текущую зарплату с максимальной.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
⋙ ❍ Задача «Максимальный оклад»:
---
3. ⌛ Задача: Подсчет средней зарплаты
Условие:
Необходимо вычислить среднюю зарплату всех сотрудников.
🎯 Решение:
```javascript
function calculateAverageSalary(salaries) {
  let totalSalary = salaries.reduce((sum, salary) => sum + salary, 0);
  return totalSalary / salaries.length;
}

let salaries = [35000, 45000, 50000, 60000, 70000];
console.log(`Средняя зарплата: ${calculateAverageSalary(salaries)}`);  // 51000
```
Объяснение:
Мы суммируем все зарплаты с помощью `reduce()`, а затем делим на количество сотрудников для получения средней зарплаты.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
⋙ ❍ Задача «Максимальный оклад»:
---
4. ⌛ Задача: Проверка, есть ли сотрудники с зарплатой выше заданного значения
Условие:
Проверить, есть ли сотрудники с окладом выше 60000.
🎯 Решение:
```javascript
function hasHighSalary(salaries, threshold) {
  return salaries.some(salary => salary > threshold);
}

let salaries = [35000, 45000, 50000, 60000, 70000];
console.log(hasHighSalary(salaries, 60000));  // true
```
Объяснение:
Используется метод `some()`, который проверяет, удовлетворяет ли хотя бы один элемент массива условию (зарплата больше заданного порога).
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
⋙ ❍ Задача «Максимальный оклад»:
---
5. ⌛ Задача: Нахождение всех сотрудников с окладом больше среднего
Условие:
Нужно вывести всех сотрудников, чьи оклады превышают среднее значение.
🎯 Решение:
```javascript
function findEmployeesAboveAverage(employees) {
  let averageSalary = calculateAverageSalary(employees.map(employee => employee.salary));
  return employees.filter(employee => employee.salary > averageSalary).map(employee => employee.name);
}

let employees = [
  { name: "Иван", salary: 35000 },
  { name: "Мария", salary: 45000 },
  { name: "Алексей", salary: 50000 },
  { name: "Елена", salary: 60000 },
];

console.log(`Сотрудники с окладом выше среднего: ${findEmployeesAboveAverage(employees)}`);  // [ 'Алексей', 'Елена' ]
```
Объяснение:
Сначала находим среднюю зарплату, затем фильтруем сотрудников с зарплатой выше средней, и в конце выводим их имена.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
⋙ ❍ Задача «Максимальный оклад»:
---
6. ⌛ Задача: Повышение оклада на заданный процент
Условие:
Нужно повысить оклад каждого сотрудника на 10%.
🎯 Решение:
```javascript
function increaseSalaries(salaries, percentage) {
  return salaries.map(salary => salary * (1 + percentage / 100));
}

let salaries = [35000, 45000, 50000, 60000, 70000];
console.log(increaseSalaries(salaries, 10));  // [ 38500, 49500, 55000, 66000, 77000 ]
```
Объяснение:
Используем метод `map()`, чтобы применить повышение оклада на определенный процент для каждого сотрудника.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
⋙ ❍ Задача «Максимальный оклад»:
---
7. ⌛ Задача: Нахождение сотрудников с окладом ниже среднего
Условие:
Нужно найти сотрудников, чьи оклады ниже среднего.
🎯 Решение:
```javascript
function findEmployeesBelowAverage(employees) {
  let averageSalary = calculateAverageSalary(employees.map(employee => employee.salary));
  return employees.filter(employee => employee.salary < averageSalary).map(employee => employee.name);
}

let employees = [
  { name: "Иван", salary: 35000 },
  { name: "Мария", salary: 45000 },
  { name: "Алексей", salary: 50000 },
  { name: "Елена", salary: 60000 },
];

console.log(`Сотрудники с окладом ниже среднего: ${findEmployeesBelowAverage(employees)}`);  // [ 'Иван', 'Мария' ]
```
Объяснение:
Аналогично задаче выше, только находим сотрудников с зарплатой ниже средней.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
⋙ ❍ Задача «Максимальный оклад»:
---
8. ⌛ Задача: Увеличение зарплаты для сотрудников с окладом ниже заданного порога
Условие:
Если оклад сотрудника ниже 45000, повысить его на 20%.
🎯 Решение:
```javascript
function increaseSalaryForLowEarners(salaries, threshold, percentage) {
  return salaries.map(salary => salary < threshold ? salary * (1 + percentage / 100) : salary);
}

let salaries = [35000, 45000, 50000, 60000, 70000];
console.log(increaseSalaryForLowEarners(salaries, 45000, 20));  // [ 42000, 45000, 50000, 60000, 70000 ]
```
Объяснение:
Мы используем `map()`, чтобы применить увеличение зарплаты только для тех сотрудников, чьи оклады меньше заданного порога.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
⋙ ❍ Задача «Максимальный оклад»:
---
9. ⌛ Задача: Нахождение двух сотрудников с наименьшими окладами
Условие:
Необходимо найти двух сотрудников с самыми низкими окладами.
🎯 Решение:
```javascript
function findTwoLowestSalaries(employees) {
  let sortedEmployees = employees.sort((a, b) => a.salary - b.salary);
  return sortedEmployees.slice(0, 2).map(employee => employee.name);
}

let employees = [
  { name: "Иван", salary: 35000 },
  { name: "Мария", salary: 45000 },
  { name: "Алексей", salary: 50000 },
  { name: "Елена", salary: 60000 },
];

console.log(`Два сотрудника с наименьшими окладами: ${findTwoLowestSalaries(employees)}`);  // [ 'Иван', 'Мария' ]
```
Объяснение:
Сначала сортируем массив сотрудников по зарплате, затем используем `slice(0, 2)`, чтобы получить первых двух сотрудников с наименьшими окладами.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
⋙ ❍ Задача «Максимальный оклад»:
---
10. ⌛ Задача: Проверка, превышает ли оклад сотрудника заданный порог
Условие:
Проверить, превышает ли оклад сотрудника 55000.
🎯 Решение:
```javascript
function isSalaryAboveThreshold(salary, threshold) {
  return salary > threshold;
}

let salary = 60000;
console.log(isSalaryAboveThreshold(salary, 55000));  // true
```
Объяснение:
Просто проверяем, больше ли оклад сотрудника заданного порога.
Эти задачи охватывают различные аспекты работы с зарплатами сотрудников, от вычисления максимальных и средних окладов до выполнения различных манипуляций с данными, таких как повышение зарплаты и фильтрация сотрудников.
--------------------------------------------------------------------------------------------- 
