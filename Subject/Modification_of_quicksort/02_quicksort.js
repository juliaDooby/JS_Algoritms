--------------------------------------------------------------------------------------------- 
‚ãô ‚ùç –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:
---
2. ‚åõ –ó–∞–¥–∞—á–∞: –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤
–£—Å–ª–æ–≤–∏–µ:
–î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª–∏–Ω–æ–π –º–µ–Ω—å—à–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤) –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤—Å—Ç–∞–≤–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function insertionSort(arr) {
  for (let i = 1; i < arr.length; i++) {
    let current = arr[i];
    let j = i - 1;
    while (j >= 0 && arr[j] > current) {
      arr[j + 1] = arr[j];
      j--;
    }
    arr[j + 1] = current;
  }
  return arr;
}

function quickSortOptimized(arr) {
  if (arr.length <= 1) return arr;
  if (arr.length <= 10) return insertionSort(arr);

  const pivot = arr[arr.length - 1];
  const left = [];
  const right = [];

  for (let i = 0; i < arr.length - 1; i++) {
    if (arr[i] < pivot) {
      left.push(arr[i]);
    } else {
      right.push(arr[i]);
    }
  }

  return [...quickSortOptimized(left), pivot, ...quickSortOptimized(right)];
}

console.log(quickSortOptimized([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]));  // [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
–ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –º–∞–ª, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤—Å—Ç–∞–≤–∫–∞–º–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –±—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ –∏–∑-–∑–∞ –º–µ–Ω—å—à–∏—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Ä–µ–∫—É—Ä—Å–∏—é.
--------------------------------------------------------------------------------------------- 
