---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:
---
6Ô∏è‚É£ –î–≤—É—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –¥–≤—É—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Node {
  constructor(data) {
    this.data = data;
    this.next = null;
    this.prev = null;
  }
}

class DoublyLinkedList {
  constructor() {
    this.head = null;
  }

  addToFront(value) {
    const newNode = new Node(value);
    if (this.head === null) {
      this.head = newNode;
    } else {
      newNode.next = this.head;
      this.head.prev = newNode;
      this.head = newNode;
    }
  }

  print() {
    let current = this.head;
    let result = '';
    while (current !== null) {
      result += current.data + ' <-> ';
      current = current.next;
    }
    console.log(result.slice(0, -4));
  }
}

const list = new DoublyLinkedList();
list.addToFront(10);
list.addToFront(20);
list.addToFront(30);
list.print(); // 30 <-> 20 <-> 10
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –í –¥–≤—É—Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ö—Ä–∞–Ω–∏—Ç —Å—Å—ã–ª–∫–∏ –∫–∞–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, —Ç–∞–∫ –∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π. –ú–µ—Ç–æ–¥ `addToFront` –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —É–∑–µ–ª –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞.
---------------------------------------------------------------------------------------------
