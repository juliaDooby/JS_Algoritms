---------------------------------------------------------------------------------------------
⋙ ❍ Задача «Расстояние редактирования»:
---
Задача о расстоянии редактирования (или расстоянии Левенштейна) — это классическая задача, которая вычисляет минимальное количество операций, необходимых для преобразования одной строки в другую. Операции могут быть следующими:
1. Вставка символа.
2. Удаление символа.
3. Замена символа на другой.
Давайте рассмотрим несколько задач с решениями и объяснениями на языке JavaScript для задачи о расстоянии редактирования.
0. Базовая задача: Вычисление расстояния редактирования между двумя строками
⌛ Задача: Найдите расстояние редактирования между двумя строками.
🎯 Решение:
```js
function editDistance(str1, str2) {
  const m = str1.length;
  const n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 0; i <= m; i++) {
    for (let j = 0; j <= n; j++) {
      if (i === 0) dp[i][j] = j; // Если первая строка пустая, нужно вставить все символы из второй строки
      else if (j === 0) dp[i][j] = i; // Если вторая строка пустая, нужно удалить все символы из первой строки
      else if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1]; // Если символы одинаковы, ничего не меняем
      } else {
        dp[i][j] = Math.min(
          dp[i - 1][j - 1], // Замена
          dp[i - 1][j], // Удаление
          dp[i][j - 1]  // Вставка
        ) + 1;
      }
    }
  }

  return dp[m][n];
}

console.log(editDistance("kitten", "sitting")); // 3
```
Объяснение: Мы используем динамическое программирование для вычисления расстояния редактирования. Таблица `dp` хранит минимальное количество операций для каждой подстроки.
---------------------------------------------------------------------------------------------
