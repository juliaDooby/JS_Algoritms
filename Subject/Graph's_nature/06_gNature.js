---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ü—Ä–∏—Ä–æ–¥–∞ –≥—Ä–∞—Ñ–∞:
---
6. ‚åõ –ó–∞–¥–∞—á–∞: –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ (BFS)
–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É (BFS), —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ –æ–Ω –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å (`queue`), —á—Ç–æ–±—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –≥—Ä–∞—Ñ—É —É—Ä–æ–≤–Ω—è–º–∏.
```javascript
const shortestPathBFS = (graph, start, target) => {
  const queue = [[start, 0]]; // (–≤–µ—Ä—à–∏–Ω–∞, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ)
  const visited = new Set();

  while (queue.length) {
    const [node, dist] = queue.shift();

    if (node === target) return dist;

    if (!visited.has(node)) {
      visited.add(node);
      for (let neighbor of graph[node]) {
        queue.push([neighbor, dist + 1]);
      }
    }
  }
  return -1; // –ï—Å–ª–∏ –ø—É—Ç–∏ –Ω–µ—Ç
};

const graph = { 0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2] };

console.log(shortestPathBFS(graph, 0, 3)); // 2
console.log(shortestPathBFS(graph, 0, 4)); // -1 (–Ω–µ—Ç –ø—É—Ç–∏)
```
---------------------------------------------------------------------------------------------
