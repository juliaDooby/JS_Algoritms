---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ü—Ä–∏—Ä–æ–¥–∞ –≥—Ä–∞—Ñ–∞:
---
3. ‚åõ –ó–∞–¥–∞—á–∞: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–≤—è–∑–Ω–æ—Å—Ç–∏
–ï—Å–ª–∏ –≥—Ä–∞—Ñ –Ω–µ—Å–≤—è–∑–Ω—ã–π, –µ–≥–æ –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ó–∞–ø—É—Å–∫–∞–µ–º *DFS –∏–∑ –∫–∞–∂–¥–æ–π –Ω–µ–ø–æ—Å–µ—â—ë–Ω–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
```javascript
const countComponents = (graph) => {
  const visited = new Set();
  let count = 0;

  const dfs = (node) => {
    if (!visited.has(node)) {
      visited.add(node);
      for (let neighbor of graph[node]) {
        dfs(neighbor);
      }
    }
  };

  for (let node in graph) {
    if (!visited.has(node)) {
      count++;
      dfs(node);
    }
  }

  return count;
};

const graph1 = { 0: [1], 1: [0], 2: [3], 3: [2] }; // –î–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
const graph2 = { 0: [1, 2], 1: [0, 2], 2: [0, 1] }; // –û–¥–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

console.log(countComponents(graph1)); // 2
console.log(countComponents(graph2)); // 1
```
---------------------------------------------------------------------------------------------
