---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–°—É–≤–µ–Ω–∏—Ä—ã¬ª:
---
–ó–∞–¥–∞—á–∞ ¬´–°—É–≤–µ–Ω–∏—Ä—ã¬ª –æ–±—ã—á–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞, —Ç–∞–∫–∏—Ö –∫–∞–∫ –≤—ã–±–æ—Ä —Å—É–≤–µ–Ω–∏—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –≤–µ—Å–∞, –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –≤–∫–ª—é—á–∞—Ç—å –≤—ã–±–æ—Ä —Å—É–≤–µ–Ω–∏—Ä–æ–≤, –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–µ–π –∏–ª–∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–µ–π –∑–Ω–∞—á–µ–Ω–∏–π.
1Ô∏è‚É£ –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –¥–æ—Ä–æ–≥–æ–≥–æ —Å—É–≤–µ–Ω–∏—Ä–∞
‚åõ –ó–∞–¥–∞—á–∞: –£ –Ω–∞—Å –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É–≤–µ–Ω–∏—Ä–æ–≤, –∫–∞–∂–¥—ã–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π —Å—É–≤–µ–Ω–∏—Ä.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function findMostExpensive(souvenirs) {
  return souvenirs.reduce((max, current) => current.price > max.price ? current : max, souvenirs[0]);
}

const souvenirs = [
  { name: "–¢–∞—Ä–µ–ª–∫–∞", price: 20 },
  { name: "–ú–∞–≥–Ω–∏—Ç", price: 5 },
  { name: "–§–∏–≥—É—Ä–∫–∞", price: 50 },
  { name: "–ú–∞—Å–∫–∞", price: 30 }
];

console.log(findMostExpensive(souvenirs)); // { name: '–§–∏–≥—É—Ä–∫–∞', price: 50 }
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ `reduce` –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –¥–æ—Ä–æ–≥–æ–≥–æ —Å—É–≤–µ–Ω–∏—Ä–∞. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—É —Ç–µ–∫—É—â–µ–≥–æ —Å—É–≤–µ–Ω–∏—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ü–µ–Ω–∞ –±–æ–ª—å—à–µ.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–°—É–≤–µ–Ω–∏—Ä—ã¬ª:
---
2Ô∏è‚É£ –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å—É–≤–µ–Ω–∏—Ä–æ–≤
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Å—É–≤–µ–Ω–∏—Ä–æ–≤ –≤ —Å–ø–∏—Å–∫–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function totalCost(souvenirs) {
  return souvenirs.reduce((total, current) => total + current.price, 0);
}

const souvenirs = [
  { name: "–¢–∞—Ä–µ–ª–∫–∞", price: 20 },
  { name: "–ú–∞–≥–Ω–∏—Ç", price: 5 },
  { name: "–§–∏–≥—É—Ä–∫–∞", price: 50 },
  { name: "–ú–∞—Å–∫–∞", price: 30 }
];

console.log(totalCost(souvenirs)); // 105
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º `reduce`, —á—Ç–æ–±—ã –ø—Ä–æ—Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã –≤—Å–µ—Ö —Å—É–≤–µ–Ω–∏—Ä–æ–≤, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—É–º–º—ã `0`.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–°—É–≤–µ–Ω–∏—Ä—ã¬ª:
---
3Ô∏è‚É£ –ù–∞–π—Ç–∏ —Å—É–≤–µ–Ω–∏—Ä—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω—É—é —Å—É–º–º—É
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å—É–≤–µ–Ω–∏—Ä—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function findExpensiveSouvenirs(souvenirs, priceLimit) {
  return souvenirs.filter(souvenir => souvenir.price > priceLimit);
}

const souvenirs = [
  { name: "–¢–∞—Ä–µ–ª–∫–∞", price: 20 },
  { name: "–ú–∞–≥–Ω–∏—Ç", price: 5 },
  { name: "–§–∏–≥—É—Ä–∫–∞", price: 50 },
  { name: "–ú–∞—Å–∫–∞", price: 30 }
];

console.log(findExpensiveSouvenirs(souvenirs, 25));
// [{ name: '–§–∏–≥—É—Ä–∫–∞', price: 50 }, { name: '–ú–∞—Å–∫–∞', price: 30 }]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º `filter`, —á—Ç–æ–±—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å—É–≤–µ–Ω–∏—Ä—ã, —á—å—è —Ü–µ–Ω–∞ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ `priceLimit`.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–°—É–≤–µ–Ω–∏—Ä—ã¬ª:
---
4Ô∏è‚É£ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—É–≤–µ–Ω–∏—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–≤–µ–Ω–∏—Ä—ã –ø–æ —Ü–µ–Ω–µ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function sortSouvenirsByPrice(souvenirs) {
  return souvenirs.sort((a, b) => b.price - a.price);
}

const souvenirs = [
  { name: "–¢–∞—Ä–µ–ª–∫–∞", price: 20 },
  { name: "–ú–∞–≥–Ω–∏—Ç", price: 5 },
  { name: "–§–∏–≥—É—Ä–∫–∞", price: 50 },
  { name: "–ú–∞—Å–∫–∞", price: 30 }
];

console.log(sortSouvenirsByPrice(souvenirs));
// [{ name: '–§–∏–≥—É—Ä–∫–∞', price: 50 }, { name: '–ú–∞—Å–∫–∞', price: 30 }, { name: '–¢–∞—Ä–µ–ª–∫–∞', price: 20 }, { name: '–ú–∞–≥–Ω–∏—Ç', price: 5 }]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ `sort` –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ —Å—É–≤–µ–Ω–∏—Ä–æ–≤. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ, –≥–¥–µ `b.price - a.price` –æ–∑–Ω–∞—á–∞–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —É–±—ã–≤–∞–Ω–∏—é.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–°—É–≤–µ–Ω–∏—Ä—ã¬ª:
---
5Ô∏è‚É£ –í—ã–±–æ—Ä —Å—É–≤–µ–Ω–∏—Ä–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –±—é–¥–∂–µ—Ç—É
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–±–∏—Ä–∞–µ—Ç —Å—É–≤–µ–Ω–∏—Ä—ã, —Å—É–º–º–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function selectSouvenirsByBudget(souvenirs, budget) {
  let selected = [];
  let total = 0;

  for (let souvenir of souvenirs) {
    if (total + souvenir.price <= budget) {
      selected.push(souvenir);
      total += souvenir.price;
    }
  }

  return selected;
}

const souvenirs = [
  { name: "–¢–∞—Ä–µ–ª–∫–∞", price: 20 },
  { name: "–ú–∞–≥–Ω–∏—Ç", price: 5 },
  { name: "–§–∏–≥—É—Ä–∫–∞", price: 50 },
  { name: "–ú–∞—Å–∫–∞", price: 30 }
];

console.log(selectSouvenirsByBudget(souvenirs, 55));
// [{ name: '–¢–∞—Ä–µ–ª–∫–∞', price: 20 }, { name: '–ú–∞–≥–Ω–∏—Ç', price: 5 }]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—É–≤–µ–Ω–∏—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Å—É–º–º–∞ –∏—Ö —Ü–µ–Ω –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±—é–¥–∂–µ—Ç.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–°—É–≤–µ–Ω–∏—Ä—ã¬ª:
---
6Ô∏è‚É£ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–≤–µ–Ω–∏—Ä–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–±–∏—Ä–∞–µ—Ç —Å—É–≤–µ–Ω–∏—Ä—ã —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –∏—Ö –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—ã–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π, –Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–∞ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function getMaxValueCombination(souvenirs, budget) {
  let bestCombination = [];
  let maxValue = 0;

  for (let i = 0; i < (1 << souvenirs.length); i++) {
    let combination = [];
    let total = 0;

    for (let j = 0; j < souvenirs.length; j++) {
      if (i & (1 << j)) {
        combination.push(souvenirs[j]);
        total += souvenirs[j].price;
      }
    }

    if (total <= budget && total > maxValue) {
      maxValue = total;
      bestCombination = combination;
    }
  }

  return bestCombination;
}

const souvenirs = [
  { name: "–¢–∞—Ä–µ–ª–∫–∞", price: 20 },
  { name: "–ú–∞–≥–Ω–∏—Ç", price: 5 },
  { name: "–§–∏–≥—É—Ä–∫–∞", price: 50 },
  { name: "–ú–∞—Å–∫–∞", price: 30 }
];

console.log(getMaxValueCombination(souvenirs, 55));
// [{ name: '–¢–∞—Ä–µ–ª–∫–∞', price: 20 }, { name: '–ú–∞–≥–Ω–∏—Ç', price: 5 }]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏—Ç–æ–≤—É—é –º–∞—Å–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å—É–≤–µ–Ω–∏—Ä–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç—É, —á—å—è –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±—é–¥–∂–µ—Ç –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–°—É–≤–µ–Ω–∏—Ä—ã¬ª:
---
7Ô∏è‚É£ –†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å—É–≤–µ–Ω–∏—Ä—ã –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–≤–µ–Ω–∏—Ä—ã –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–∂). –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function sortSouvenirsByPopularity(souvenirs) {
  return souvenirs.sort((a, b) => b.sales - a.sales);
}

const souvenirs = [
  { name: "–¢–∞—Ä–µ–ª–∫–∞", price: 20, sales: 150 },
  { name: "–ú–∞–≥–Ω–∏—Ç", price: 5, sales: 300 },
  { name: "–§–∏–≥—É—Ä–∫–∞", price: 50, sales: 100 },
  { name: "–ú–∞—Å–∫–∞", price: 30, sales: 200 }
];

console.log(sortSouvenirsByPopularity(souvenirs));
// [{ name: '–ú–∞–≥–Ω–∏—Ç', price: 5, sales: 300 }, { name: '–ú–∞—Å–∫–∞', price: 30, sales: 200 }, { name: '–¢–∞—Ä–µ–ª–∫–∞', price: 20, sales: 150 }, { name: '–§–∏–≥—É—Ä–∫–∞', price: 50, sales: 100 }]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã —Å–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å—É–≤–µ–Ω–∏—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–∂, –æ—Ç —Å–∞–º–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∫ –Ω–∞–∏–º–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–º—É.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–°—É–≤–µ–Ω–∏—Ä—ã¬ª:
---
8Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –Ω–∞ —Å—É–≤–µ–Ω–∏—Ä—ã
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∫–∏–¥–∫—É –∫ —Ü–µ–Ω–µ –≤—Å–µ—Ö —Å—É–≤–µ–Ω–∏—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—É–º–º—É.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function applyDiscount(souvenirs, discountThreshold, discountPercentage) {
  return souvenirs.map(souvenir => {
    if (souvenir.price > discountThreshold) {
      souvenir.price *= (1 - discountPercentage / 100);
    }
    return souvenir;
  });
}

const souvenirs = [
  { name: "–¢–∞—Ä–µ–ª–∫–∞", price: 20 },
  { name: "–ú–∞–≥–Ω–∏—Ç", price: 5 },
  { name: "–§–∏–≥—É—Ä–∫–∞", price: 50 },
  { name: "–ú–∞—Å–∫–∞", price: 30 }
];

console.log(applyDiscount(souvenirs, 20, 10));
// –ü—Ä–∏–º–µ–Ω–∏—Ç —Å–∫–∏–¥–∫—É 10% –∫ "–§–∏–≥—É—Ä–∫–∞" –∏ "–ú–∞—Å–∫–∞"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É —Å—É–≤–µ–Ω–∏—Ä–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –∫ —Ç–µ–º, —Ü–µ–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ `discountThreshold`.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–°—É–≤–µ–Ω–∏—Ä—ã¬ª:
---
9Ô∏è‚É£ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Å—É–≤–µ–Ω–∏—Ä–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞–±–æ—Ä —Å—É–≤–µ–Ω–∏—Ä–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –∫–∞–∂–¥—ã–π –Ω–∞–±–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—É–≤–µ–Ω–∏—Ä.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function findCheapestSet(souvenirs) {
  return souvenirs.reduce((minSet, current) => {
    const newSet = [...minSet, current];
    const total = newSet.reduce((sum, item) => sum + item.price, 0);
    if (!minSet.length || total < minSet.reduce((sum, item) => sum + item.price, 0)) {
      return newSet;
    }
    return minSet;
  }, []);
}

const souvenirs = [
  { name: "–¢–∞—Ä–µ–ª–∫–∞", price: 20 },
  { name: "–ú–∞–≥–Ω–∏—Ç", price: 5 },
  { name: "–§–∏–≥—É—Ä–∫–∞", price: 50 },
  { name: "–ú–∞—Å–∫–∞", price: 30 }
];

console.log(findCheapestSet(souvenirs));
// [{ name: '–ú–∞–≥–Ω–∏—Ç', price: 5 }]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–±–æ—Ä—ã —Å—É–≤–µ–Ω–∏—Ä–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–°—É–≤–µ–Ω–∏—Ä—ã¬ª:
---
üîü –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å—É–≤–µ–Ω–∏—Ä–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å—É–≤–µ–Ω–∏—Ä—ã, –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function findSouvenirsByKeyword(souvenirs, keyword) {
  return souvenirs.filter(souvenir => souvenir.name.toLowerCase().includes(keyword.toLowerCase()));
}

const souvenirs = [
  { name: "–¢–∞—Ä–µ–ª–∫–∞", price: 20 },
  { name: "–ú–∞–≥–Ω–∏—Ç", price: 5 },
  { name: "–§–∏–≥—É—Ä–∫–∞", price: 50 },
  { name: "–ú–∞—Å–∫–∞", price: 30 }
];

console.log(findSouvenirsByKeyword(souvenirs, "–º–∞—Å"));
// [{ name: '–ú–∞—Å–∫–∞', price: 30 }]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—É–≤–µ–Ω–∏—Ä—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ `includes`, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–µ, —á—å–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç —ç—Ç–æ —Å–ª–æ–≤–æ.
–≠—Ç–∏ –∑–∞–¥–∞—á–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –Ω–∞–¥ –º–∞—Å—Å–∏–≤–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ JavaScript –∏ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π, –≤—ã–±–æ—Ä–æ–º –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö.
---------------------------------------------------------------------------------------------
***
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏¬ª:
---
‚åõ –ó–∞–¥–∞—á–∞ ¬´–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏¬ª –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –∑–∞–¥–∞—á, –≥–¥–µ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —è–∑—ã–∫–∞ JavaScript.
1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∫–æ–±–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–∫–æ–±–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ. –°–∫–æ–±–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω–æ–≥–æ —Ç–∏–ø–∞: –∫—Ä—É–≥–ª—ã–µ `()`, –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ `[]`, —Ñ–∏–≥—É—Ä–Ω—ã–µ `{}`.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function checkBrackets(str) {
  const stack = [];
  const pairs = { '(': ')', '[': ']', '{': '}' };

  for (let char of str) {
    if (pairs[char]) {
      stack.push(char); // –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    } else if (Object.values(pairs).includes(char)) {
      if (pairs[stack.pop()] !== char) {
        return false; // –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
      }
    }
  }

  return stack.length === 0; // –µ—Å–ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç, —Å–∫–æ–±–∫–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
}

console.log(checkBrackets("([{}])")); // true
console.log(checkBrackets("([)]")); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫. –ö–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –æ–Ω–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π –∏–∑ —Å—Ç–µ–∫–∞. –ï—Å–ª–∏ –≤—Å—ë —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `false`.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏¬ª:
---
2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–∫–æ–±–æ–∫ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∫–æ–±–æ—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –ø–∞—Ä —Å–∫–æ–±–æ–∫.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function generateParentheses(n) {
  const result = [];

  function generate(current, open, close) {
    if (current.length === 2 * n) {
      result.push(current);
      return;
    }

    if (open < n) generate(current + '(', open + 1, close);
    if (close < open) generate(current + ')', open, close + 1);
  }

  generate('', 0, 0);
  return result;
}

console.log(generateParentheses(3)); // ['((()))', '(()())', '(())()', '()(())', '()()()']
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫—É—Ä—Å–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫ —Å –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–º–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏. –£—Å–ª–æ–≤–∏–µ `open < n` –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫, –∞ `close < open` –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–∫–æ–±–æ–∫.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏¬ª:
---
3Ô∏è‚É£ –†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º –±–µ–∑ —Å–∫–æ–±–æ–∫ –∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∫–æ–±–∫–∏, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ `+`, `-`, `*`, `/`.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function addParentheses(expression) {
  return `(${expression})`;
}

console.log(addParentheses("3+2*2")); // (3+2*2)
console.log(addParentheses("3*2+1")); // (3*2+1)
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ–±–æ–∫ –≤–æ–∫—Ä—É–≥ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π. –≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞, –Ω–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å —Å–∫–æ–±–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∏–º.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏¬ª:
---
4Ô∏è‚É£ –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ–±–æ–∫, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function minimizeParentheses(expression) {
  let result = expression.replace(/\(([^\(\)]+)\)/g, '$1');
  return result;
}

console.log(minimizeParentheses("(3+2)*2")); // 3+2*2
console.log(minimizeParentheses("((3+2)*2)")); // 3+2*2
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Å–∫–æ–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π. –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å–∫–æ–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏¬ª:
---
5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π, —Ç–æ –µ—Å—Ç—å –≤—Å–µ –ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function isBalanced(str) {
  const stack = [];
  for (let char of str) {
    if (char === '(' || char === '{' || char === '[') {
      stack.push(char);
    } else if (char === ')' || char === '}' || char === ']') {
      if (stack.length === 0) return false;
      const last = stack.pop();
      if (last === '(' && char !== ')' || last === '{' && char !== '}' || last === '[' && char !== ']') {
        return false;
      }
    }
  }
  return stack.length === 0;
}

console.log(isBalanced("({[()]})")); // true
console.log(isBalanced("({[)}]")); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å–∫–æ–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–µ–∫. –ü—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å—Ç–µ–∫, –∞ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–µ.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏¬ª:
---
6Ô∏è‚É£ –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ–±–æ–∫ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ –≤—Å–µ –ø–∞—Ä—ã —Å–∫–æ–±–æ–∫ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ `"(a+b)"` —Å–¥–µ–ª–∞—Ç—å `"[a+b]"`.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function swapBrackets(str) {
  return str.replace(/[\(\)]/g, (match) => match === '(' ? '[' : ']');
}

console.log(swapBrackets("(a+b)")); // [a+b]
console.log(swapBrackets("((a+b))")); // [[a+b]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –∏ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–∫–æ–±–æ–∫.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏¬ª:
---
7Ô∏è‚É£ –û—Ü–µ–Ω–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∫–æ–±–æ–∫
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function evaluateExpression(expr) {
  return new Function('return ' + expr)();
}

console.log(evaluateExpression("(3 + 2) * 2")); // 10
console.log(evaluateExpression("3 + (2 * 2)")); // 7
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∫–æ–±–æ–∫ –∏ –æ–ø–µ—Ä–∞—Ü–∏–µ–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º `Function` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏¬ª:
---
8Ô∏è‚É£ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–∫–æ–±–æ–∫ –≤ —Å–ª–æ–∂–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∫–æ–±–∫–∏ –≤ —Å–ª–æ–∂–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏. –ü—Ä–∏–º–µ—Ä: –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ "3 + 4 * 2" –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏, —á—Ç–æ–±—ã —Å–æ–±–ª—é—Å—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function addCorrectParentheses(expression) {
  return expression.replace(/(\d+)\s*\*\s*(\d+)/, '($1*$2)');
}

console.log(addCorrectParentheses("3 + 4 * 2")); // 3 + (4*2)
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã –∑–∞–º–µ–Ω—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å —É–º–Ω–æ–∂–µ–Ω–∏–µ–º –Ω–∞ –µ–≥–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç, –≥–¥–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ –∑–∞–∫–ª—é—á–µ–Ω–æ –≤ —Å–∫–æ–±–∫–∏, —á—Ç–æ–±—ã —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏¬ª:
---
9Ô∏è‚É£ –†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∫–æ–±–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–π.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function correctParenthesesOrder(expression) {
  return expression.replace(/(\d+)\s*\+\s*(\d+)/, '($1+$2)');
}

console.log(correctParenthesesOrder("2 + 3 * 4")); // 2 + (3*4)
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ó–∞–º–µ–Ω—è–µ–º —Å–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π, —Ä–∞—Å—Å—Ç–∞–≤–ª—è—è —Å–∫–æ–±–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ ¬´–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–±–∫–∏¬ª:
---
üîü –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–∫–æ–±–∫–∞–º–∏: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–∫–æ–±–æ–∫ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –ø–∞—Ä.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function generateAllParentheses(n) {
  const result = [];

  function generate(str, open, close) {
    if (str.length === 2 * n) {
      result.push(str);
      return;
    }

    if (open < n) generate(str + '(', open + 1, close);
    if (close < open) generate(str + ')', open, close + 1);
  }

  generate('', 0, 0);
  return result;
}

console.log(generateAllParentheses(3)); // ['((()))', '(()())', '(())()', '()(())', '()()()']
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫—É—Ä—Å–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Å —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏. –ú—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–∫–æ–±–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ.
---------------------------------------------------------------------------------------------
***


---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:
---
–≠—Ç–∏ –∑–∞–¥–∞—á–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–∞–∫–∏–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ –º–∞—Å—Å–∏–≤—ã, —Å—Ç–µ–∫–∏, –æ—á–µ—Ä–µ–¥–∏, –º–Ω–æ–∂–µ—Å—Ç–≤–∞, —Å–ª–æ–≤–∞—Ä–∏ (–æ–±—ä–µ–∫—Ç—ã), –¥–≤—É—Å–≤—è–∑–Ω—ã–µ –∏ –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ø–∏—Å–∫–∏.
1Ô∏è‚É£ –†–∞–±–æ—Ç–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏: –°—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—É–º–º—É.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function sumArray(arr) {
  return arr.reduce((acc, val) => acc + val, 0);
}

console.log(sumArray([1, 2, 3, 4, 5])); // 15
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ `reduce()` –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞. –û–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä —Ä–∞–≤–µ–Ω 0.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:
---
2Ô∏è‚É£ –°—Ç–µ–∫: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–∫–∞
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å—Ç–µ–∫ —Å –º–µ—Ç–æ–¥–∞–º–∏ `push`, `pop` –∏ `peek` (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç).
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Stack {
  constructor() {
    this.items = [];
  }

  push(element) {
    this.items.push(element);
  }

  pop() {
    return this.items.pop();
  }

  peek() {
    return this.items[this.items.length - 1];
  }

  isEmpty() {
    return this.items.length === 0;
  }
}

const stack = new Stack();
stack.push(10);
stack.push(20);
console.log(stack.peek()); // 20
stack.pop();
console.log(stack.peek()); // 10
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –°—Ç–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É LIFO (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ—à—ë–ª ‚Äî –ø–µ—Ä–≤—ã–π –≤—ã—à–µ–ª). –ú—ã —Ä–µ–∞–ª–∏–∑—É–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:
---
3Ô∏è‚É£ –û—á–µ—Ä–µ–¥—å: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ—á–µ—Ä–µ–¥—å —Å –º–µ—Ç–æ–¥–∞–º–∏ `enqueue`, `dequeue`, `peek`.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Queue {
  constructor() {
    this.items = [];
  }

  enqueue(element) {
    this.items.push(element);
  }

  dequeue() {
    return this.items.shift();
  }

  peek() {
    return this.items[0];
  }

  isEmpty() {
    return this.items.length === 0;
  }
}

const queue = new Queue();
queue.enqueue(10);
queue.enqueue(20);
console.log(queue.peek()); // 10
queue.dequeue();
console.log(queue.peek()); // 20
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –û—á–µ—Ä–µ–¥—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É FIFO (–ø–µ—Ä–≤—ã–π –≤–æ—à—ë–ª ‚Äî –ø–µ—Ä–≤—ã–π –≤—ã—à–µ–ª). –ú—ã –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏ –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –Ω–∞—á–∞–ª–∞.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:
---
4Ô∏è‚É£ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ: –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function getUnique(arr) {
  return [...new Set(arr)];
}

console.log(getUnique([1, 2, 2, 3, 4, 4, 5])); // [1, 2, 3, 4, 5]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–Ω–æ–∂–µ—Å—Ç–≤–æ (`Set`) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:
---
5Ô∏è‚É£ –°–ª–æ–≤–∞—Ä—å (–û–±—ä–µ–∫—Ç): –ü–æ–¥—Å—á—ë—Ç —á–∞—Å—Ç–æ—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function countFrequency(arr) {
  let frequency = {};
  arr.forEach(item => {
    frequency[item] = (frequency[item] || 0) + 1;
  });
  return frequency;
}

console.log(countFrequency([1, 2, 2, 3, 3, 3])); // {1: 1, 2: 2, 3: 3}
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ ‚Äî —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —ç—Ç–æ –∏—Ö —á–∞—Å—Ç–æ—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è. –í —Ü–∏–∫–ª–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:
---
6Ô∏è‚É£ –û–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Node {
  constructor(data) {
    this.data = data;
    this.next = null;
  }
}

class SinglyLinkedList {
  constructor() {
    this.head = null;
  }

  add(value) {
    const newNode = new Node(value);
    if (this.head === null) {
      this.head = newNode;
    } else {
      let current = this.head;
      while (current.next !== null) {
        current = current.next;
      }
      current.next = newNode;
    }
  }

  print() {
    let current = this.head;
    let result = '';
    while (current !== null) {
      result += current.data + ' -> ';
      current = current.next;
    }
    console.log(result.slice(0, -4));
  }
}

const list = new SinglyLinkedList();
list.add(10);
list.add(20);
list.add(30);
list.print(); // 10 -> 20 -> 30
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã —Ä–µ–∞–ª–∏–∑—É–µ–º –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫. –ú–µ—Ç–æ–¥ `add` –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —É–∑–µ–ª –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞, –æ–±–Ω–æ–≤–ª—è—è —É–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–∑–ª–∞.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:
---
7Ô∏è‚É£ –î–≤—É—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –¥–≤—É—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Node {
  constructor(data) {
    this.data = data;
    this.next = null;
    this.prev = null;
  }
}

class DoublyLinkedList {
  constructor() {
    this.head = null;
  }

  addToFront(value) {
    const newNode = new Node(value);
    if (this.head === null) {
      this.head = newNode;
    } else {
      newNode.next = this.head;
      this.head.prev = newNode;
      this.head = newNode;
    }
  }

  print() {
    let current = this.head;
    let result = '';
    while (current !== null) {
      result += current.data + ' <-> ';
      current = current.next;
    }
    console.log(result.slice(0, -4));
  }
}

const list = new DoublyLinkedList();
list.addToFront(10);
list.addToFront(20);
list.addToFront(30);
list.print(); // 30 <-> 20 <-> 10
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –í –¥–≤—É—Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ö—Ä–∞–Ω–∏—Ç —Å—Å—ã–ª–∫–∏ –∫–∞–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, —Ç–∞–∫ –∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π. –ú–µ—Ç–æ–¥ `addToFront` –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —É–∑–µ–ª –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:
---
8Ô∏è‚É£ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å —Å –º–µ—Ç–æ–¥–∞–º–∏ `enqueue` –∏ `dequeue`, –≥–¥–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –±–æ–ª—å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ä–∞–Ω—å—à–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class PriorityQueue {
  constructor() {
    this.items = [];
  }

  enqueue(element, priority) {
    const newNode = { element, priority };
    if (this.items.length === 0) {
      this.items.push(newNode);
    } else {
      let added = false;
      for (let i = 0; i < this.items.length; i++) {
        if (newNode.priority > this.items[i].priority) {
          this.items.splice(i, 0, newNode);
          added = true;
          break;
        }
      }
      if (!added) {
        this.items.push(newNode);
      }
    }
  }

  dequeue() {
    return this.items.shift();
  }

  peek() {
    return this.items[0];
  }
}

const pq = new PriorityQueue();
pq.enqueue('task1', 1);
pq.enqueue('task2', 3);
pq.enqueue('task3', 2);
console.log(pq.peek()); // { element: 'task2', priority: 3 }
pq.dequeue();
console.log(pq.peek()); // { element: 'task3', priority: 2 }
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É. –ú–µ—Ç–æ–¥ `enqueue` –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥—å —Å —É—á—ë—Ç–æ–º –µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:
---
9Ô∏è‚É£ –•–µ—à-—Ç–∞–±–ª–∏—Ü–∞: –û–ø–µ—Ä–∞—Ü–∏–∏ –≤—Å—Ç–∞–≤–∫–∏ –∏ –ø–æ–∏—Å–∫–∞
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—É—é —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—É —Å –º–µ—Ç–æ–¥–∞–º–∏ –≤—Å—Ç–∞–≤–∫–∏ –∏ –ø–æ–∏—Å–∫–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class HashTable {
  constructor(size = 4) {
    this.table = new Array(size);
  }

  hash(key) {
    let hash = 0;
    for (let i = 0; i < key.length; i++) {
      hash += key.charCodeAt(i);
    }
    return hash % this.table.length;
  }

  insert(key, value) {
    const index = this.hash(key);
    this.table[index] = value;
  }

  search(key) {
    const index = this.hash(key);
    return this.table[index];
  }
}

const hashTable = new HashTable();
hashTable.insert('name', 'John');
hashTable.insert('age', 30);
console.log(hashTable.search('name')); // John
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –•–µ—à-—Ç–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —ç–ª–µ–º–µ–Ω—Ç–∞. –í —ç—Ç–æ–π –ø—Ä–æ—Å—Ç–µ–π—à–µ–π –≤–µ—Ä—Å–∏–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:
---
üîü –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ª–∏—è–Ω–∏–µ–º
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ª–∏—è–Ω–∏–µ–º.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function mergeSort(arr) {
  if (arr.length <= 1) return arr;

  const mid = Math.floor(arr.length / 2);
  const left = mergeSort(arr.slice(0, mid));
  const right = mergeSort(arr.slice(mid));

  return merge(left, right);
}

function merge(left, right) {
  let result = [];
  let i = 0, j = 0;

  while (i < left.length && j < right.length) {
    if (left[i] < right[j]) {
      result.push(left[i]);
      i++;
    } else {
      result.push(right[j]);
      j++;
    }
  }

  return result.concat(left.slice(i)).concat(right.slice(j));
}

console.log(mergeSort([10, 2, 3, 4, 1])); // [1, 2, 3, 4, 10]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ª–∏—è–Ω–∏–µ–º –¥–µ–ª–∏—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏ –∑–∞—Ç–µ–º —Å–ª–∏–≤–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤.
---------------------------------------------------------------------------------------------
***
*** ***
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –û–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫:
---
–û–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç (—É–∑–µ–ª) —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª. –°–ø–∏—Å–∫–∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è—é—â–∏–º–∏—Å—è –¥–∞–Ω–Ω—ã–º–∏.
1Ô∏è‚É£ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
‚åõ –ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Node {
  constructor(data) {
    this.data = data;
    this.next = null;
  }
}

class SinglyLinkedList {
  constructor() {
    this.head = null;
  }

  add(value) {
    const newNode = new Node(value);
    if (this.head === null) {
      this.head = newNode;
    } else {
      let current = this.head;
      while (current.next !== null) {
        current = current.next;
      }
      current.next = newNode;
    }
  }

  print() {
    let current = this.head;
    let result = '';
    while (current !== null) {
      result += current.data + ' -> ';
      current = current.next;
    }
    console.log(result.slice(0, -4));
  }
}

const list = new SinglyLinkedList();
list.add(10);
list.add(20);
list.add(30);
list.print(); // 10 -> 20 -> 30
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –°–æ–∑–¥–∞–ª–∏ –¥–≤–∞ –∫–ª–∞—Å—Å–∞: `Node` (—É–∑–µ–ª) –∏ `SinglyLinkedList` (—Å–ø–∏—Å–æ–∫).
- –ú–µ—Ç–æ–¥ `add()` –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.
---
2Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class SinglyLinkedList {
  constructor() {
    this.head = null;
  }

  addToFront(value) {
    const newNode = new Node(value);
    newNode.next = this.head;
    this.head = newNode;
  }

  print() {
    let current = this.head;
    let result = '';
    while (current !== null) {
      result += current.data + ' -> ';
      current = current.next;
    }
    console.log(result.slice(0, -4));
  }
}

const list = new SinglyLinkedList();
list.addToFront(10);
list.addToFront(20);
list.addToFront(30);
list.print(); // 30 -> 20 -> 10
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `addToFront()` –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞, –º–µ–Ω—è—è —Å—Å—ã–ª–∫—É –Ω–∞ –≥–æ–ª–æ–≤—É —Å–ø–∏—Å–∫–∞.
---
3Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–∫–∞
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–∫–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class SinglyLinkedList {
  constructor() {
    this.head = null;
  }

  removeFromFront() {
    if (this.head !== null) {
      this.head = this.head.next;
    }
  }

  print() {
    let current = this.head;
    let result = '';
    while (current !== null) {
      result += current.data + ' -> ';
      current = current.next;
    }
    console.log(result.slice(0, -4));
  }
}

const list = new SinglyLinkedList();
list.addToFront(10);
list.addToFront(20);
list.addToFront(30);
list.print(); // 30 -> 20 -> 10
list.removeFromFront();
list.print(); // 20 -> 10
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `removeFromFront()` —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∏–∑–º–µ–Ω—è—è —Å—Å—ã–ª–∫—É –Ω–∞ –≥–æ–ª–æ–≤—É —Å–ø–∏—Å–∫–∞.
---
4Ô∏è‚É£ –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class SinglyLinkedList {
  constructor() {
    this.head = null;
  }

  add(value) {
    const newNode = new Node(value);
    if (this.head === null) {
      this.head = newNode;
    } else {
      let current = this.head;
      while (current.next !== null) {
        current = current.next;
      }
      current.next = newNode;
    }
  }

  find(value) {
    let current = this.head;
    while (current !== null) {
      if (current.data === value) {
        return true;
      }
      current = current.next;
    }
    return false;
  }

  print() {
    let current = this.head;
    let result = '';
    while (current !== null) {
      result += current.data + ' -> ';
      current = current.next;
    }
    console.log(result.slice(0, -4));
  }
}

const list = new SinglyLinkedList();
list.add(10);
list.add(20);
list.add(30);
list.print(); // 10 -> 20 -> 30
console.log(list.find(20)); // true
console.log(list.find(40)); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `find()` –∏—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–µ—Ä–µ–±–∏—Ä–∞—è –µ–≥–æ —É–∑–ª—ã.
---
5Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class SinglyLinkedList {
  constructor() {
    this.head = null;
  }

  add(value) {
    const newNode = new Node(value);
    if (this.head === null) {
      this.head = newNode;
    } else {
      let current = this.head;
      while (current.next !== null) {
        current = current.next;
      }
      current.next = newNode;
    }
  }

  remove(value) {
    if (this.head === null) return;
    if (this.head.data === value) {
      this.head = this.head.next;
      return;
    }
    let current = this.head;
    while (current.next !== null && current.next.data !== value) {
      current = current.next;
    }
    if (current.next !== null) {
      current.next = current.next.next;
    }
  }

  print() {
    let current = this.head;
    let result = '';
    while (current !== null) {
      result += current.data + ' -> ';
      current = current.next;
    }
    console.log(result.slice(0, -4));
  }
}

const list = new SinglyLinkedList();
list.add(10);
list.add(20);
list.add(30);
list.print(); // 10 -> 20 -> 30
list.remove(20);
list.print(); // 10 -> 30
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `remove()` —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ, –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç.
---
6Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤ —Å–ø–∏—Å–∫–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class SinglyLinkedList {
  constructor() {
    this.head = null;
  }

  add(value) {
    const newNode = new Node(value);
    if (this.head === null) {
      this.head = newNode;
    } else {
      let current = this.head;
      while (current.next !== null) {
        current = current.next;
      }
      current.next = newNode;
    }
  }

  get(index) {
    let current = this.head;
    let counter = 0;
    while (current !== null) {
      if (counter === index) {
        return current.data;
      }
      current = current.next;
      counter++;
    }
    return null; // –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞
  }

  print() {
    let current = this.head;
    let result = '';
    while (current !== null) {
      result += current.data + ' -> ';
      current = current.next;
    }
    console.log(result.slice(0, -4));
  }
}

const list = new SinglyLinkedList();
list.add(10);
list.add(20);
list.add(30);
console.log(list.get(1)); // 20
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `get()` –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∏–Ω–¥–µ–∫—Å–µ.
---
7Ô∏è‚É£ –†–µ–≤–µ—Ä—Å –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–≤–µ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è) –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class SinglyLinkedList {
  constructor() {
    this.head = null;
  }

  add(value) {
    const newNode = new Node(value);
    if (this.head === null) {
      this.head = newNode;
    } else {
      let current = this.head;
      while (current.next !== null) {
        current = current.next;
      }
      current.next = newNode;
    }
  }

  reverse() {
    let prev = null;
    let current = this.head;
    while (current !== null) {
      let nextNode = current.next;
      current.next = prev;
      prev = current;
      current = nextNode;
    }
    this.head = prev;
  }

  print() {
    let current = this.head;
    let result = '';
    while (current !== null) {
      result += current.data + ' -> ';
      current = current.next;
    }
    console.log(result.slice(0, -4));
  }
}

const list = new SinglyLinkedList();
list.add(10);
list.add(20);
list.add(30);
list.print(); // 10 -> 20 -> 30
list.reverse();
list.print(); // 30 -> 20 -> 10
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `reverse()` –º–µ–Ω—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –≤ —Å–ø–∏—Å–∫–µ, –ø—Ä–µ–≤—Ä–∞—â–∞—è –µ–≥–æ –≤ –æ–±—Ä–∞—Ç–Ω—ã–π.
---
8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ—Ç—ã —Å–ø–∏—Å–∫–∞
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—É—Å—Ç –ª–∏ —Å–ø–∏—Å–æ–∫.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class SinglyLinkedList {
  constructor() {
    this.head = null;
  }

  isEmpty() {
    return this.head === null;
  }

  print() {
    let current = this.head;
    let result = '';
    while (current !== null) {
      result += current.data + ' -> ';
      current = current.next;
    }
    console.log(result.slice(0, -4));
  }
}

const list = new SinglyLinkedList();
console.log(list.isEmpty()); // true
list.add(10);
console.log(list.isEmpty()); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `isEmpty()` –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥–æ–ª–æ–≤–∞ —Å–ø–∏—Å–∫–∞ `null`, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.
---
9Ô∏è‚É£ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–≤—É—Ö –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class SinglyLinkedList {
  constructor() {
    this.head = null;
  }

  add(value) {
    const newNode = new Node(value);
    if (this.head === null) {
      this.head = newNode;
    } else {
      let current = this.head;
      while (current.next !== null) {
        current = current.next;
      }
      current.next = newNode;
    }
  }

  merge(otherList) {
    let current = this.head;
    while (current && current.next !== null) {
      current = current.next;
    }
    if (current !== null) {
      current.next = otherList.head;
    } else {
      this.head = otherList.head;
    }
  }

  print() {
    let current = this.head;
    let result = '';
    while (current !== null) {
      result += current.data + ' -> ';
      current = current.next;
    }
    console.log(result.slice(0, -4));
  }
}

const list1 = new SinglyLinkedList();
const list2 = new SinglyLinkedList();
list1.add(10);
list1.add(20);
list2.add(30);
list2.add(40);
list1.merge(list2);
list1.print(); // 10 -> 20 -> 30 -> 40
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `merge()` –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ —Å–ø–∏—Å–∫–∞, —Å–æ–µ–¥–∏–Ω—è—è –∫–æ–Ω–µ—Ü –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –Ω–∞—á–∞–ª–æ–º –≤—Ç–æ—Ä–æ–≥–æ.
---
üîü –ü–æ–¥—Å—á—ë—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class SinglyLinkedList {
  constructor() {
    this.head = null;
  }

  count() {
    let current = this.head;
    let count = 0;
    while (current !== null) {
      count++;
      current = current.next;
    }
    return count;
  }

  print() {
    let current = this.head;
    let result = '';
    while (current !== null) {
      result += current.data + ' -> ';
      current = current.next;
    }
    console.log(result.slice(0, -4));
  }
}

const list = new SinglyLinkedList();
list.add(10);
list.add(20);
list.add(30);
console.log(list.count()); // 3
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `count()` –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ.
–û–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Äî —ç—Ç–æ –º–æ—â–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –Ω–æ —Å –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø.
---------------------
‚ãô ‚ùç –ú–Ω–æ–∂–µ—Å—Ç–≤–æ:
---
–ú–Ω–æ–∂–µ—Å—Ç–≤–æ ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –í JavaScript –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç `Set`. –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏ –∏—Ö —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã.
1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const set = new Set();
set.add(1);
set.add(2);
set.add(3);
console.log(set); // Set { 1, 2, 3 }
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ `Set()`.
- –ú–µ—Ç–æ–¥ `add()` –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ.
- –í –º–Ω–æ–∂–µ—Å—Ç–≤–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–Ω–∞—á–µ–Ω–∏–π.
---
2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const set = new Set([1, 2, 3]);
console.log(set.has(2)); // true
console.log(set.has(5)); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `has()` –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ.
- –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è `true`, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî `false`.
---
3Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const set = new Set([1, 2, 3]);
set.delete(2);
console.log(set); // Set { 1, 3 }
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `delete()` —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.
- –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω, –∏–Ω–∞—á–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
---
4Ô∏è‚É£ –û—á–∏—â–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ (—É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤).
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const set = new Set([1, 2, 3]);
set.clear();
console.log(set); // Set {}
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `clear()` —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞, –¥–µ–ª–∞—è –µ–≥–æ –ø—É—Å—Ç—ã–º.
---
5Ô∏è‚É£ –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ –≤—ã–≤–æ–¥–∞ –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const set = new Set([1, 2, 3]);
set.forEach(value => console.log(value));
// 1
// 2
// 3
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `forEach()` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
---
6Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const set = new Set([1, 2, 3, 4]);
console.log(set.size); // 4
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –°–≤–æ–π—Å—Ç–≤–æ `size` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ.
---
7Ô∏è‚É£ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –º–Ω–æ–∂–µ—Å—Ç–≤
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–≤—É—Ö –º–Ω–æ–∂–µ—Å—Ç–≤.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const set1 = new Set([1, 2, 3]);
const set2 = new Set([3, 4, 5]);
const union = new Set([...set1, ...set2]);
console.log(union); // Set { 1, 2, 3, 4, 5 }
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –î–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–≤—É—Ö –º–Ω–æ–∂–µ—Å—Ç–≤ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è (`...`), –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫–∞–∂–¥–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ö –≤ –Ω–æ–≤–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ.
---
8Ô∏è‚É£ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö –º–Ω–æ–∂–µ—Å—Ç–≤
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–≤—É—Ö –º–Ω–æ–∂–µ—Å—Ç–≤.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const set1 = new Set([1, 2, 3]);
const set2 = new Set([3, 4, 5]);
const intersection = new Set([...set1].filter(x => set2.has(x)));
console.log(intersection); // Set { 3 }
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –î–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ `filter()`, —á—Ç–æ–±—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –æ–±–æ–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ö.
---
9Ô∏è‚É£ –†–∞–∑–Ω–æ—Å—Ç—å –¥–≤—É—Ö –º–Ω–æ–∂–µ—Å—Ç–≤
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–∞–∑–Ω–æ—Å—Ç–∏ –¥–≤—É—Ö –º–Ω–æ–∂–µ—Å—Ç–≤ (—ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ø–µ—Ä–≤–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Ç–æ—Ä–æ–º).
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const set1 = new Set([1, 2, 3, 4]);
const set2 = new Set([3, 4, 5]);
const difference = new Set([...set1].filter(x => !set2.has(x)));
console.log(difference); // Set { 1, 2 }
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –î–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–∞–∑–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ `filter()`, —á—Ç–æ–±—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ø–µ—Ä–≤–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ, –Ω–æ –Ω–µ—Ç –≤–æ –≤—Ç–æ—Ä–æ–º.
---
üîü –°–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å –¥–≤—É—Ö –º–Ω–æ–∂–µ—Å—Ç–≤
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–Ω–æ—Å—Ç–∏ –¥–≤—É—Ö –º–Ω–æ–∂–µ—Å—Ç–≤ (—ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –æ–¥–Ω–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥—Ä—É–≥–æ–º).
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const set1 = new Set([1, 2, 3, 4]);
const set2 = new Set([3, 4, 5, 6]);
const symmetricDifference = new Set([
  ...[...set1].filter(x => !set2.has(x)),
  ...[...set2].filter(x => !set1.has(x))
]);
console.log(symmetricDifference); // Set { 1, 2, 5, 6 }
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –°–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –æ–¥–Ω–æ–º –∏–∑ –¥–≤—É—Ö –º–Ω–æ–∂–µ—Å—Ç–≤, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥—Ä—É–≥–æ–º.
- –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —Ñ–∏–ª—å—Ç—Ä–∞: –æ–¥–∏–Ω –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞, –¥—Ä—É–≥–æ–π ‚Äî –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ.
–ú–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ JavaScript —è–≤–ª—è—é—Ç—Å—è –ø–æ–ª–µ–∑–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏. –° –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–æ–≤ `add()`, `delete()`, `has()`, –∞ —Ç–∞–∫–∂–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –º–Ω–æ–∂–µ—Å—Ç–≤, –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º–∏.
---------------------
‚ãô ‚ùç –°–ª–æ–≤–∞—Ä—å:
---
–°–ª–æ–≤–∞—Ä—å –∏–ª–∏ –æ–±—ä–µ–∫—Ç –≤ JavaScript ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –ø–∞—Ä "–∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ". –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± —Ä–∞–±–æ—Ç—ã —Å –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ –≤ JavaScript.
1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –∫–ª—é—á—É.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Dictionary {
  constructor() {
    this.items = {};
  }

  add(key, value) {
    this.items[key] = value;
  }

  get(key) {
    return this.items[key] || undefined;
  }
}

const dict = new Dictionary();
dict.add('apple', 'fruit');
dict.add('carrot', 'vegetable');
console.log(dict.get('apple')); // fruit
console.log(dict.get('carrot')); // vegetable
console.log(dict.get('banana')); // undefined
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –°–æ–∑–¥–∞–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –∫–ª—é—á—É.
- –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `undefined`.
---
2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á –≤ —Å–ª–æ–≤–∞—Ä–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Dictionary {
  constructor() {
    this.items = {};
  }

  add(key, value) {
    this.items[key] = value;
  }

  has(key) {
    return key in this.items;
  }
}

const dict = new Dictionary();
dict.add('apple', 'fruit');
console.log(dict.has('apple')); // true
console.log(dict.has('banana')); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `has()` –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ `in`.
---
3Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á—É
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á—É.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Dictionary {
  constructor() {
    this.items = {};
  }

  add(key, value) {
    this.items[key] = value;
  }

  remove(key) {
    if (this.has(key)) {
      delete this.items[key];
    }
  }

  has(key) {
    return key in this.items;
  }
}

const dict = new Dictionary();
dict.add('apple', 'fruit');
dict.add('banana', 'fruit');
dict.remove('banana');
console.log(dict.has('banana')); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `remove()` —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ.
---
4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –∏–∑ —Å–ª–æ–≤–∞—Ä—è
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –≤ —Å–ª–æ–≤–∞—Ä–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Dictionary {
  constructor() {
    this.items = {};
  }

  add(key, value) {
    this.items[key] = value;
  }

  keys() {
    return Object.keys(this.items);
  }
}

const dict = new Dictionary();
dict.add('apple', 'fruit');
dict.add('banana', 'fruit');
console.log(dict.keys()); // ['apple', 'banana']
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `keys()` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∫–ª—é—á–µ–π —Å –ø–æ–º–æ—â—å—é `Object.keys()`.
---
5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å–ª–æ–≤–∞—Ä—è
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–ª–æ–≤–∞—Ä–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Dictionary {
  constructor() {
    this.items = {};
  }

  add(key, value) {
    this.items[key] = value;
  }

  values() {
    return Object.values(this.items);
  }
}

const dict = new Dictionary();
dict.add('apple', 'fruit');
dict.add('carrot', 'vegetable');
console.log(dict.values()); // ['fruit', 'vegetable']
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `values()` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é `Object.values()`.
---
6Ô∏è‚É£ –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è –∏ –≤—ã–≤–æ–¥–∞ –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Dictionary {
  constructor() {
    this.items = {};
  }

  add(key, value) {
    this.items[key] = value;
  }

  forEach(callback) {
    for (let key in this.items) {
      callback(key, this.items[key]);
    }
  }
}

const dict = new Dictionary();
dict.add('apple', 'fruit');
dict.add('carrot', 'vegetable');
dict.forEach((key, value) => console.log(`${key}: ${value}`));
// apple: fruit
// carrot: vegetable
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `forEach()` –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è, –≤—ã–∑—ã–≤–∞—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
---
7Ô∏è‚É£ –°–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ä–µ–π
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è —Å–ª–∏—è–Ω–∏—è –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ä–µ–π –≤ –æ–¥–∏–Ω.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Dictionary {
  constructor() {
    this.items = {};
  }

  add(key, value) {
    this.items[key] = value;
  }

  merge(otherDict) {
    for (let key in otherDict.items) {
      this.items[key] = otherDict.items[key];
    }
  }
}

const dict1 = new Dictionary();
dict1.add('apple', 'fruit');
const dict2 = new Dictionary();
dict2.add('carrot', 'vegetable');
dict1.merge(dict2);
console.log(dict1.keys()); // ['apple', 'carrot']
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `merge()` –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ —Å–ª–æ–≤–∞—Ä—è. –í—Å–µ –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –ø–µ—Ä–≤—ã–π.
---
8Ô∏è‚É£ –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Dictionary {
  constructor() {
    this.items = {};
  }

  add(key, value) {
    this.items[key] = value;
  }

  size() {
    return Object.keys(this.items).length;
  }
}

const dict = new Dictionary();
dict.add('apple', 'fruit');
dict.add('banana', 'fruit');
console.log(dict.size()); // 2
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `size()` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É—è `Object.keys()`.
---
9Ô∏è‚É£ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤–∞—Ä—è –ø–æ —É—Å–ª–æ–≤–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ –∫–ª—é—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏).
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Dictionary {
  constructor() {
    this.items = {};
  }

  add(key, value) {
    this.items[key] = value;
  }

  filter(callback) {
    const filtered = new Dictionary();
    for (let key in this.items) {
      if (callback(key, this.items[key])) {
        filtered.add(key, this.items[key]);
      }
    }
    return filtered;
  }
}

const dict = new Dictionary();
dict.add('apple', 'fruit');
dict.add('carrot', 'vegetable');
dict.add('banana', 'fruit');
const fruits = dict.filter((key, value) => value === 'fruit');
console.log(fruits.keys()); // ['apple', 'banana']
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `filter()` —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é –≤ `callback`.
---
üîü –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –∫–ª—é—á—É
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ –∫–ª—é—á—É.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Dictionary {
  constructor() {
    this.items = {};
  }

  add(key, value) {
    this.items[key] = value;
  }

  update(key, newValue) {
    if (this.has(key)) {
      this.items[key] = newValue;
    }
  }

  has(key) {
    return key in this.items;
  }
}

const dict = new Dictionary();
dict.add('apple', 'fruit');
dict.update('apple', 'red fruit');
console.log(dict.get('apple')); // 'red fruit'
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú–µ—Ç–æ–¥ `update()` –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞. –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.
–ò—Ç–æ–≥
–°–ª–æ–≤–∞—Ä—å ‚Äî —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä "–∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ". –û–Ω —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º, –∞ –≤ JavaScript –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–±—ä–µ–∫—Ç—ã.
–°–ª–æ–≤–∞—Ä—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Ö –Ω–∞–ª–∏—á–∏–µ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏.
---------------------
‚ãô ‚ùç –°—Ç–µ–∫:
---
–°—Ç–µ–∫ (Stack) –≤ JavaScript
–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–µ–∫?
–°—Ç–µ–∫ (Stack) ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, —Ä–∞–±–æ—Ç–∞—é—â–∞—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É LIFO (Last In, First Out ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ—à—ë–ª, –ø–µ—Ä–≤—ã–π –≤—ã—à–µ–ª).
–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ç–µ–∫–∞
1. push(x) ‚Äì –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç–µ–∫.
2. pop() ‚Äì —É–¥–∞–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç.
3. peek() ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è.
4. isEmpty() ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç –ª–∏ —Å—Ç–µ–∫.
5. size() ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
---
üéØ –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–∫–∞ –Ω–∞ –º–∞—Å—Å–∏–≤–µ
```js
class Stack {
  constructor() {
    this.stack = [];
  }

  push(item) {
    this.stack.push(item);
  }

  pop() {
    return this.stack.pop();
  }

  peek() {
    return this.stack[this.stack.length - 1];
  }

  isEmpty() {
    return this.stack.length === 0;
  }

  size() {
    return this.stack.length;
  }
}

const s = new Stack();
s.push(10);
s.push(20);
console.log(s.pop()); // 20
console.log(s.peek()); // 10
console.log(s.isEmpty()); // false
```
---
1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∫–æ–±–æ–∫ (Valid Parentheses)
‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å `()`, `{}`, `[]` –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π (–ø–∞—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏).
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function isValidParentheses(s) {
  const stack = [];
  const pairs = { ")": "(", "}": "{", "]": "[" };

  for (let char of s) {
    if (["(", "{", "["].includes(char)) {
      stack.push(char);
    } else {
      if (stack.pop() !== pairs[char]) return false;
    }
  }

  return stack.length === 0;
}

console.log(isValidParentheses("(){}[]")); // true
console.log(isValidParentheses("(]")); // false
console.log(isValidParentheses("{[()]}")); // true
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ï—Å–ª–∏ –≤–∏–¥–∏–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É ‚Äì –∫–ª–∞–¥—ë–º –≤ —Å—Ç–µ–∫.
- –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é ‚Äì —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –≤–µ—Ä—à–∏–Ω–æ–π —Å—Ç–µ–∫–∞.
---
2Ô∏è‚É£ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–≤–æ–∏—á–Ω–æ–µ
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ –≤ –¥–≤–æ–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function decimalToBinary(n) {
  const stack = [];

  while (n > 0) {
    stack.push(n % 2);
    n = Math.floor(n / 2);
  }

  return stack.reverse().join('');
}

console.log(decimalToBinary(10)); // "1010"
console.log(decimalToBinary(25)); // "11001"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ `2` —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–µ–∫.
- –ß–∏—Ç–∞–µ–º —Å—Ç–µ–∫ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
---
3Ô∏è‚É£ –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ —Å—Ç–µ–∫–æ–º (Min Stack)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç–µ–∫ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π getMin(), –∫–æ—Ç–æ—Ä–∞—è –∑–∞ O(1) –Ω–∞—Ö–æ–¥–∏—Ç –º–∏–Ω–∏–º—É–º.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class MinStack {
  constructor() {
    this.stack = [];
    this.minStack = [];
  }

  push(x) {
    this.stack.push(x);
    if (this.minStack.length === 0 || x <= this.minStack[this.minStack.length - 1]) {
      this.minStack.push(x);
    }
  }

  pop() {
    if (this.stack.pop() === this.minStack[this.minStack.length - 1]) {
      this.minStack.pop();
    }
  }

  getMin() {
    return this.minStack[this.minStack.length - 1];
  }
}

const ms = new MinStack();
ms.push(3);
ms.push(5);
ms.push(2);
ms.push(1);
console.log(ms.getMin()); // 1
ms.pop();
console.log(ms.getMin()); // 2
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- minStack —Ö—Ä–∞–Ω–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç.
---
4Ô∏è‚É£ –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–æ–∫–∏ (Reverse String)
‚åõ –ó–∞–¥–∞—á–∞: –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é —Å—Ç–µ–∫–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function reverseString(s) {
  const stack = s.split('');
  let reversed = '';

  while (stack.length) {
    reversed += stack.pop();
  }

  return reversed;
}

console.log(reverseString("hello")); // "olleh"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ö–ª–∞–¥—ë–º —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç–µ–∫, –∑–∞—Ç–µ–º –¥–æ—Å—Ç–∞—ë–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
---
5Ô∏è‚É£ –ü–æ—Å—Ç—Ñ–∏–∫—Å–Ω–∞—è –Ω–æ—Ç–∞—Ü–∏—è (Reverse Polish Notation, RPN)
‚åõ –ó–∞–¥–∞—á–∞: –í—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–π –ø–æ–ª—å—Å–∫–æ–π –Ω–æ—Ç–∞—Ü–∏–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function evalRPN(tokens) {
  const stack = [];

  for (let token of tokens) {
    if (!isNaN(token)) {
      stack.push(Number(token));
    } else {
      let b = stack.pop();
      let a = stack.pop();
      stack.push(eval(`${a} ${token} ${b}`));
    }
  }

  return stack[0];
}

console.log(evalRPN(["2", "1", "+", "3", "*"])); // 9
console.log(evalRPN(["4", "13", "5", "/", "+"])); // 6
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ï—Å–ª–∏ –≤–∏–¥–∏–º —á–∏—Å–ª–æ ‚Äì –∫–ª–∞–¥—ë–º –≤ —Å—Ç–µ–∫.
- –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä ‚Äì –±–µ—Ä—ë–º –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é.
---
6Ô∏è‚É£ –û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (Undo)
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class UndoStack {
  constructor() {
    this.stack = [];
  }

  execute(action) {
    this.stack.push(action);
    console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${action}`);
  }

  undo() {
    console.log(`–û—Ç–º–µ–Ω–µ–Ω–æ: ${this.stack.pop()}`);
  }
}

const editor = new UndoStack();
editor.execute("–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥");
editor.execute("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π");
editor.undo(); // "–û—Ç–º–µ–Ω–µ–Ω–æ: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
```
---
7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function isPalindrome(s) {
  const stack = s.split('');
  return s === stack.reverse().join('');
}

console.log(isPalindrome("racecar")); // true
console.log(isPalindrome("hello")); // false
```
---
8Ô∏è‚É£ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç–µ–∫–∞
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function sortStack(stack) {
  return stack.sort((a, b) => a - b);
}

console.log(sortStack([3, 1, 4, 2])); // [1, 2, 3, 4]
```
---
9Ô∏è‚É£ –ë–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫ –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
console.log(isValidParentheses("[(2+3) * (5/2)]")); // true
```
---
üîü –ò—Å—Ç–æ—Ä–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ (Back button)
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class BrowserHistory {
  constructor() {
    this.history = [];
  }

  visit(page) {
    this.history.push(page);
  }

  back() {
    return this.history.pop();
  }
}

const browser = new BrowserHistory();
browser.visit("google.com");
browser.visit("stackoverflow.com");
console.log(browser.back()); // "stackoverflow.com"
```
–°—Ç–µ–∫ ‚Äì –ø–æ–ª–µ–∑–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏–π, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–∑–æ–≤–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–π.
---------------------
‚ãô ‚ùç –û—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º:
---
–ß—Ç–æ —Ç–∞–∫–æ–µ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º?
–û—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ—Ö–æ–∂–∞—è –Ω–∞ –æ–±—ã—á–Ω—É—é –æ—á–µ—Ä–µ–¥—å, –Ω–æ —Å –æ–¥–Ω–æ–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å—é: —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –Ω–µ –≤ –ø–æ—Ä—è–¥–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –∞ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
üõ† –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
1. enqueue (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
2. dequeue (–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
3. peek (–ø—Ä–æ—Å–º–æ—Ç—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º, –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)
4. isEmpty (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É)
5. size (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
---
üéØ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
–û–±—ã—á–Ω–æ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —Å –º–∞—Å—Å–∏–≤–æ–º (–º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ) –∏–ª–∏ –±–∏–Ω–∞—Ä–Ω–æ–π –∫—É—á–µ–π (–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ).
–ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –º–∞—Å—Å–∏–≤–µ (O(n) –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, O(1) –Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ)
```js
class PriorityQueue {
  constructor() {
    this.queue = [];
  }

  enqueue(element, priority) {
    this.queue.push({ element, priority });
    this.queue.sort((a, b) => a.priority - b.priority); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (O(n log n))
  }

  dequeue() {
    return this.queue.shift(); // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (O(1))
  }

  peek() {
    return this.queue[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
  }

  isEmpty() {
    return this.queue.length === 0;
  }

  size() {
    return this.queue.length;
  }
}

const pq = new PriorityQueue();
pq.enqueue("–õ–µ–≥–∫–∞—è –∑–∞–¥–∞—á–∞", 3);
pq.enqueue("–°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞", 1);
pq.enqueue("–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞", 2);
console.log(pq.dequeue()); // { element: '–°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞', priority: 1 }
```
---
1Ô∏è‚É£ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∫—É—á–µ (heap)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–Ω–∞—Ä–Ω–æ–π –∫—É—á–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã.
üéØ –†–µ—à–µ–Ω–∏–µ (O(log n) –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ):
```js
class MinHeap {
  constructor() {
    this.heap = [];
  }

  insert(element, priority) {
    this.heap.push({ element, priority });
    this.bubbleUp();
  }

  extractMin() {
    if (this.heap.length === 1) return this.heap.pop();
    const min = this.heap[0];
    this.heap[0] = this.heap.pop();
    this.sinkDown(0);
    return min;
  }

  bubbleUp() {
    let index = this.heap.length - 1;
    while (index > 0) {
      let parentIndex = Math.floor((index - 1) / 2);
      if (this.heap[parentIndex].priority <= this.heap[index].priority) break;
      [this.heap[parentIndex], this.heap[index]] = [this.heap[index], this.heap[parentIndex]];
      index = parentIndex;
    }
  }

  sinkDown(index) {
    let leftChild, rightChild, minIndex;
    while (true) {
      leftChild = 2 * index + 1;
      rightChild = 2 * index + 2;
      minIndex = index;

      if (leftChild < this.heap.length && this.heap[leftChild].priority < this.heap[minIndex].priority) {
        minIndex = leftChild;
      }
      if (rightChild < this.heap.length && this.heap[rightChild].priority < this.heap[minIndex].priority) {
        minIndex = rightChild;
      }
      if (minIndex === index) break;
      [this.heap[minIndex], this.heap[index]] = [this.heap[index], this.heap[minIndex]];
      index = minIndex;
    }
  }
}

const pq = new MinHeap();
pq.insert("Task A", 2);
pq.insert("Task B", 1);
pq.insert("Task C", 3);
console.log(pq.extractMin()); // { element: 'Task B', priority: 1 }
```
---
2Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á, –≥–¥–µ –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class TaskScheduler {
  constructor() {
    this.pq = new MinHeap();
  }

  addTask(task, priority) {
    this.pq.insert(task, priority);
  }

  executeNextTask() {
    return this.pq.extractMin();
  }
}

const scheduler = new TaskScheduler();
scheduler.addTask("Fix bug", 1);
scheduler.addTask("Develop feature", 2);
console.log(scheduler.executeNextTask()); // Fix bug
```
---
3Ô∏è‚É£ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –î–µ–π–∫—Å—Ç—Ä—ã
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –≤ –≥—Ä–∞—Ñ–µ —Å –ø–æ–º–æ—â—å—é –æ—á–µ—Ä–µ–¥–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function dijkstra(graph, start) {
  const pq = new MinHeap();
  const distances = {};
  for (let node in graph) distances[node] = Infinity;
  distances[start] = 0;

  pq.insert(start, 0);

  while (pq.heap.length) {
    let { element: current } = pq.extractMin();

    for (let neighbor in graph[current]) {
      let newDist = distances[current] + graph[current][neighbor];
      if (newDist < distances[neighbor]) {
        distances[neighbor] = newDist;
        pq.insert(neighbor, newDist);
      }
    }
  }
  return distances;
}

const graph = {
  A: { B: 1, C: 4 },
  B: { A: 1, C: 2, D: 5 },
  C: { A: 4, B: 2, D: 1 },
  D: { B: 5, C: 1 }
};

console.log(dijkstra(graph, "A"));
```
---
4Ô∏è‚É£ –ú–µ–¥–∏–∞–Ω–∞ –ø–æ—Ç–æ–∫–∞ —á–∏—Å–µ–ª (Median Stream)
‚åõ –ó–∞–¥–∞—á–∞: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Ç–æ–∫ —á–∏—Å–µ–ª –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –º–µ–¥–∏–∞–Ω—É.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–µ –æ—á–µ—Ä–µ–¥–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (–º–∞–∫—Å-–∫—É—á—É –∏ –º–∏–Ω-–∫—É—á—É):
```js
class MedianFinder {
  constructor() {
    this.low = new MaxHeap();
    this.high = new MinHeap();
  }

  addNum(num) {
    this.low.insert(num, -num);
    this.high.insert(this.low.extractMax().element, this.low.extractMax().priority);
    if (this.low.size() < this.high.size()) {
      this.low.insert(this.high.extractMin().element, -this.high.extractMin().priority);
    }
  }

  findMedian() {
    return this.low.size() > this.high.size() ? this.low.peek().element : (this.low.peek().element + this.high.peek().element) / 2;
  }
}
```
–û—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á, –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á, –≥–¥–µ –≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤!
---
5Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –û–° (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏) –≤ JavaScript
‚åõ –ó–∞–¥–∞—á–∞:
–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º:
- –ö–∞–∂–¥—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—á–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç).
- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.
- –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º, –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
- –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (`Priority Queue`), –æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫—É—á–µ (Min Heap).
```js
class MinHeap {
  constructor() {
    this.heap = [];
  }

  insert(process, priority) {
    this.heap.push({ process, priority });
    this._bubbleUp();
  }

  extractMin() {
    if (this.heap.length === 0) return null;
    if (this.heap.length === 1) return this.heap.pop();

    const min = this.heap[0];
    this.heap[0] = this.heap.pop();
    this._sinkDown(0);

    return min;
  }

  _bubbleUp() {
    let index = this.heap.length - 1;
    while (index > 0) {
      let parentIndex = Math.floor((index - 1) / 2);
      if (this.heap[parentIndex].priority <= this.heap[index].priority) break;
      [this.heap[parentIndex], this.heap[index]] = [this.heap[index], this.heap[parentIndex]];
      index = parentIndex;
    }
  }

  _sinkDown(index) {
    let leftChild, rightChild;
    let smallest = index;

    while (true) {
      leftChild = 2 * index + 1;
      rightChild = 2 * index + 2;

      if (leftChild < this.heap.length && this.heap[leftChild].priority < this.heap[smallest].priority) {
        smallest = leftChild;
      }

      if (rightChild < this.heap.length && this.heap[rightChild].priority < this.heap[smallest].priority) {
        smallest = rightChild;
      }

      if (smallest === index) break;
      [this.heap[index], this.heap[smallest]] = [this.heap[smallest], this.heap[index]];
      index = smallest;
    }
  }

  isEmpty() {
    return this.heap.length === 0;
  }
}

class ProcessScheduler {
  constructor() {
    this.queue = new MinHeap();
  }

  addProcess(name, priority) {
    console.log(`–ü—Ä–æ—Ü–µ—Å—Å "${name}" –¥–æ–±–∞–≤–ª–µ–Ω —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ${priority}`);
    this.queue.insert(name, priority);
  }

  runNextProcess() {
    if (this.queue.isEmpty()) {
      console.log("–ù–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.");
      return;
    }
    const { process, priority } = this.queue.extractMin();
    console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å "${process}" —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ${priority}`);
  }
}

// üî• –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:
const scheduler = new ProcessScheduler();

scheduler.addProcess("–ê–Ω—Ç–∏–≤–∏—Ä—É—Å", 2);
scheduler.addProcess("–í–∏–¥–µ–æ-—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥", 5);
scheduler.addProcess("–°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 1);
scheduler.addProcess("–ú—É–∑—ã–∫–∞", 4);

scheduler.runNextProcess(); // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è "–°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)
scheduler.runNextProcess(); // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è "–ê–Ω—Ç–∏–≤–∏—Ä—É—Å" (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
scheduler.runNextProcess(); // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è "–ú—É–∑—ã–∫–∞" (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4)
scheduler.runNextProcess(); // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è "–í–∏–¥–µ–æ-—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥" (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5)
scheduler.runNextProcess(); // –ù–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
```
---
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (Min Heap):
   - –ß–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞, —Ç–µ–º –≤—ã—à–µ –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞.
   - Min Heap –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
2. –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
   - addProcess(name, priority) ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤ –æ—á–µ—Ä–µ–¥—å.
   - runNextProcess() ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ.
3. –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –û–°:
   - –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.
   - –ó–∞—Ç–µ–º –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º—É–∑—ã–∫–∞, —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∏–¥–µ–æ).
---
üìå –ò—Ç–æ–≥
‚úî –¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.
‚úî –ü–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.
‚úî –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–ø—Ä–∞–≤–ª—è—é—Ç –ø–æ—Ä—è–¥–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. üöÄ
---
6Ô∏è‚É£ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≥–¥–µ –∑–∞–¥–∞—á–∏ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class TaskScheduler {
  constructor() {
    this.pq = new MinHeap();
  }

  addTask(taskName, priority) {
    this.pq.insert(taskName, priority);
  }

  runNextTask() {
    const nextTask = this.pq.extractMin();
    return nextTask ? `–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${nextTask.element}` : "–ù–µ—Ç –∑–∞–¥–∞—á";
  }
}

const server = new TaskScheduler();
server.addTask("–û–±–Ω–æ–≤–∏—Ç—å –ë–î", 2);
server.addTask("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫–∞–ø", 1);
server.addTask("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", 3);

console.log(server.runNextTask()); // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫–∞–ø
console.log(server.runNextTask()); // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: –û–±–Ω–æ–≤–∏—Ç—å –ë–î
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
- –°–µ—Ä–≤–µ—Ä –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –≤–∞–∂–Ω–æ—Å—Ç–∏.
---
7Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –≤ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫, –≥–¥–µ **VIP-–∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –ø–æ–º–æ—â—å –±—ã—Å—Ç—Ä–µ–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class SupportQueue {
  constructor() {
    this.pq = new MinHeap();
  }

  addRequest(clientName, priority) {
    this.pq.insert(clientName, priority);
  }

  processNextRequest() {
    const nextClient = this.pq.extractMin();
    return nextClient ? `–û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç: ${nextClient.element}` : "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤";
  }
}

const support = new SupportQueue();
support.addRequest("–û–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç", 3);
support.addRequest("VIP-–∫–ª–∏–µ–Ω—Ç", 1);
support.addRequest("–ü—Ä–µ–º–∏—É–º-–∫–ª–∏–µ–Ω—Ç", 2);

console.log(support.processNextRequest()); // –û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç: VIP-–∫–ª–∏–µ–Ω—Ç
console.log(support.processNextRequest()); // –û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç: –ü—Ä–µ–º–∏—É–º-–∫–ª–∏–µ–Ω—Ç
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- VIP-–∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–º–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è).
- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
---
8Ô∏è‚É£ –°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤, –≥–¥–µ –∫–ª–∏–µ–Ω—Ç—ã —Å **–ø–ª–∞—Ç–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏** –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class TicketQueue {
  constructor() {
    this.pq = new MinHeap();
  }

  bookTicket(clientName, membershipType) {
    const priority = membershipType === "VIP" ? 1 : membershipType === "Premium" ? 2 : 3;
    this.pq.insert(clientName, priority);
  }

  processBooking() {
    const client = this.pq.extractMin();
    return client ? `–ë–∏–ª–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω –¥–ª—è: ${client.element}` : "–ù–µ—Ç –∑–∞—è–≤–æ–∫";
  }
}

const tickets = new TicketQueue();
tickets.bookTicket("–ê–Ω–Ω–∞", "Standard");
tickets.bookTicket("–ò–≤–∞–Ω", "VIP");
tickets.bookTicket("–û–ª–µ–≥", "Premium");

console.log(tickets.processBooking()); // –ë–∏–ª–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω –¥–ª—è: –ò–≤–∞–Ω
console.log(tickets.processBooking()); // –ë–∏–ª–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω –¥–ª—è: –û–ª–µ–≥
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- VIP > Premium > Standard (–º–µ–Ω—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç).
- VIP-–∫–ª–∏–µ–Ω—Ç—ã –ø–µ—Ä–≤—ã–º–∏ –ø–æ–ª—É—á–∞—é—Ç –±–∏–ª–µ—Ç—ã.
---
9Ô∏è‚É£ –ê–ª–≥–æ—Ä–∏—Ç–º A* (–ü–æ–∏—Å–∫ –ø—É—Ç–∏ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º A* (A-star).
üéØ –†–µ—à–µ–Ω–∏–µ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç):
```js
function aStar(start, goal, graph) {
  const pq = new MinHeap();
  pq.insert(start, 0);
  const cameFrom = {};
  const costSoFar = { [start]: 0 };

  while (pq.heap.length) {
    let { element: current } = pq.extractMin();
    if (current === goal) break;

    for (let neighbor in graph[current]) {
      let newCost = costSoFar[current] + graph[current][neighbor];
      if (!(neighbor in costSoFar) || newCost < costSoFar[neighbor]) {
        costSoFar[neighbor] = newCost;
        let priority = newCost;
        pq.insert(neighbor, priority);
        cameFrom[neighbor] = current;
      }
    }
  }

  return cameFrom;
}

const graph = {
  A: { B: 1, C: 4 },
  B: { A: 1, C: 2, D: 5 },
  C: { A: 4, B: 2, D: 1 },
  D: { B: 5, C: 1 }
};

console.log(aStar("A", "D", graph));
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- A* –∏—â–µ—Ç –ø—É—Ç—å –∫ —Ü–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å.
- –ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –≤ –≥—Ä–∞—Ñ–µ.
---
üîü –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –¥–ª—è —Ä–æ–±–æ—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥—Å–∫–∏–º —Ä–æ–±–æ—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç **–±–æ–ª–µ–µ —Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Ä–∞–Ω—å—à–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class WarehouseRobot {
  constructor() {
    this.taskQueue = new MinHeap();
  }

  addTask(task, priority) {
    this.taskQueue.insert(task, priority);
  }

  processTask() {
    const nextTask = this.taskQueue.extractMin();
    return nextTask ? `–†–æ–±–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç: ${nextTask.element}` : "–ù–µ—Ç –∑–∞–¥–∞—á";
  }
}

const robot = new WarehouseRobot();
robot.addTask("–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —è—â–∏–∫ A", 2);
robot.addTask("–°—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", 1);
robot.addTask("–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", 3);

console.log(robot.processTask()); // –†–æ–±–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç: –°—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
console.log(robot.processTask()); // –†–æ–±–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —è—â–∏–∫ A
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ë–æ–ª–µ–µ —Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏.
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.
–ò—Ç–æ–≥
–û—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ‚Äî –º–æ—â–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
- –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –≤ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö.
- –î–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ (A* –∏ Dijkstra).
- –í —Å–ª—É–∂–±–∞—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ª–æ–≥–∏—Å—Ç–∏–∫–µ, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∏–ª–µ—Ç–æ–≤.
- –í –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ (AI), —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤.
‚ö° –ì–¥–µ –µ—â—ë –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?
- –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ñ—Ç–æ–º üöÄ
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ CPU-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ üíª
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ üìä
> –û—á–µ—Ä–µ–¥–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ–º–æ–≥–∞—é—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ —É—Å–∫–æ—Ä—è—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã.
---------------------
‚ãô ‚ùç –î–µ–∫:
---
–î–µ–∫ (Deque) –≤ JavaScript:
üîπ –ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–∫?
–î–µ–∫ (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å, deque ‚Äî double-ended queue) ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –≤ –∫–æ—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å –æ–±–æ–∏—Ö –∫–æ–Ω—Ü–æ–≤. –î–µ–∫ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ç–µ–∫–∞ (LIFO) –∏ –æ—á–µ—Ä–µ–¥–∏ (FIFO).
üõ† –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–∫–∞
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ (`unshift()`) –∏ –≤ –∫–æ–Ω–µ—Ü (`push()`).
- –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –Ω–∞—á–∞–ª–∞ (`shift()`) –∏ –∏–∑ –∫–æ–Ω—Ü–∞ (`pop()`).
- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤–æ–≥–æ (`front()`) –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (`back()`) —ç–ª–µ–º–µ–Ω—Ç–∞.
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É (`isEmpty()`).
---
üéØ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–∫–∞
JavaScript –Ω–µ –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ `Deque`, –Ω–æ –º—ã –º–æ–∂–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–≥–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Å—Å–∏–≤–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞.
üéØ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –º–∞—Å—Å–∏–≤–µ
```js
class Deque {
  constructor() {
    this.items = [];
  }

  pushBack(item) { this.items.push(item); }  // –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü
  pushFront(item) { this.items.unshift(item); } // –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ
  popBack() { return this.items.pop(); } // –£–¥–∞–ª–∏—Ç—å —Å –∫–æ–Ω—Ü–∞
  popFront() { return this.items.shift(); } // –£–¥–∞–ª–∏—Ç—å —Å –Ω–∞—á–∞–ª–∞
  front() { return this.items[0]; } // –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
  back() { return this.items[this.items.length - 1]; } // –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
  isEmpty() { return this.items.length === 0; } // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
  size() { return this.items.length; } // –†–∞–∑–º–µ—Ä –¥–µ–∫–∞
  display() { console.log(this.items); } // –í—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
}

const deque = new Deque();
deque.pushFront(1);
deque.pushBack(2);
deque.pushFront(3);
deque.display(); // [3, 1, 2]
```
---
1Ô∏è‚É£ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–∫–∞ —Å –ø–æ–º–æ—â—å—é –æ–±—ä–µ–∫—Ç–∞ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–∫—Ç–∞ (–±–µ–∑ `unshift()`, –∫–æ—Ç–æ—Ä—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π).
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Deque {
  constructor() {
    this.items = {};
    this.frontIndex = 0;
    this.backIndex = 0;
  }

  pushFront(item) {
    this.frontIndex--;
    this.items[this.frontIndex] = item;
  }

  pushBack(item) {
    this.items[this.backIndex] = item;
    this.backIndex++;
  }

  popFront() {
    if (this.isEmpty()) return undefined;
    const item = this.items[this.frontIndex];
    delete this.items[this.frontIndex];
    this.frontIndex++;
    return item;
  }

  popBack() {
    if (this.isEmpty()) return undefined;
    this.backIndex--;
    const item = this.items[this.backIndex];
    delete this.items[this.backIndex];
    return item;
  }

  isEmpty() { return this.frontIndex === this.backIndex; }
  size() { return this.backIndex - this.frontIndex; }
  front() { return this.items[this.frontIndex]; }
  back() { return this.items[this.backIndex - 1]; }
}

const deque = new Deque();
deque.pushFront(10);
deque.pushBack(20);
console.log(deque.popFront()); // 10
console.log(deque.popBack()); // 20
```
---
2Ô∏è‚É£ –ü–∞–ª–∏–Ω–¥—Ä–æ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–µ–∫–∞
‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º (—á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã).
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const isPalindrome = (str) => {
  const deque = new Deque();
  for (let char of str) deque.pushBack(char);

  while (deque.size() > 1) {
    if (deque.popFront() !== deque.popBack()) return false;
  }
  return true;
};

console.log(isPalindrome("racecar")); // true
console.log(isPalindrome("hello"));   // false
```
---
3Ô∏è‚É£ –ò–º–∏—Ç–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
‚åõ –ó–∞–¥–∞—á–∞: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–∫ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class PriorityQueue {
  constructor() {
    this.deque = new Deque();
  }

  enqueue(item, isHighPriority = false) {
    isHighPriority ? this.deque.pushFront(item) : this.deque.pushBack(item);
  }

  dequeue() { return this.deque.popFront(); }
}

const pq = new PriorityQueue();
pq.enqueue("–æ–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞");
pq.enqueue("—Å—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞", true);
console.log(pq.dequeue()); // "—Å—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞"
```
---
4Ô∏è‚É£ –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–µ–∫ –¥–ª—è –∑–∞–¥–∞—á —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class TaskManager {
  constructor() {
    this.deque = new Deque();
  }

  addTask(task) { this.deque.pushBack(task); }
  undoTask() { return this.deque.popBack(); }
}

const tasks = new TaskManager();
tasks.addTask("–ó–∞–¥–∞—á–∞ 1");
tasks.addTask("–ó–∞–¥–∞—á–∞ 2");
console.log(tasks.undoTask()); // "–ó–∞–¥–∞—á–∞ 2"
```
---
5Ô∏è‚É£ –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤
‚åõ –ó–∞–¥–∞—á–∞: –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–µ–∫–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const reverseString = (str) => {
  const deque = new Deque();
  for (let char of str) deque.pushFront(char);

  let reversed = "";
  while (!deque.isEmpty()) reversed += deque.popFront();
  return reversed;
};

console.log(reverseString("hello")); // "olleh"
```
---
6Ô∏è‚É£ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ –º–∞—Å—Å–∏–≤–∞
‚åõ –ó–∞–¥–∞—á–∞: –°–¥–≤–∏–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ –≤–ø—Ä–∞–≤–æ –Ω–∞ `k` –ø–æ–∑–∏—Ü–∏–π.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const rotateArray = (arr, k) => {
  const deque = new Deque();
  for (let num of arr) deque.pushBack(num);

  for (let i = 0; i < k; i++) deque.pushFront(deque.popBack());

  return [...deque.items];
};

console.log(rotateArray([1, 2, 3, 4, 5], 2)); // [4, 5, 1, 2, 3]
```
---
7Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –∫—ç—à–∞ (LRU Cache)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å LRU-–∫–µ—à.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class LRUCache {
  constructor(size) {
    this.deque = new Deque();
    this.size = size;
    this.cache = new Set();
  }

  accessPage(page) {
    if (this.cache.has(page)) {
      this.deque.popFront(page);
      this.cache.delete(page);
    } else if (this.deque.size() === this.size) {
      this.cache.delete(this.deque.popBack());
    }

    this.deque.pushFront(page);
    this.cache.add(page);
  }

  display() { console.log([...this.deque.items]); }
}

const cache = new LRUCache(3);
cache.accessPage(1);
cache.accessPage(2);
cache.accessPage(3);
cache.accessPage(4);
cache.display(); // [4, 3, 2]
```
---
8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–æ–±–æ–∫
```js
const isBalanced = (str) => {
  const deque = new Deque();
  for (let char of str) {
    if (char === '(') deque.pushBack(char);
    else if (char === ')') {
      if (deque.isEmpty()) return false;
      deque.popBack();
    }
  }
  return deque.isEmpty();
};

console.log(isBalanced("(())")); // true
console.log(isBalanced("(()")) ; // false
```
---
9Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è —Ö–æ–¥–∞ –∑–º–µ–π–∫–∏ (Snake Game) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–µ–∫–∞
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è `Deque`.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class SnakeGame {
  constructor() {
    this.snake = new Deque();
    this.snake.pushBack([0, 0]); // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–º–µ–π–∫–∏
    this.directions = { U: [-1, 0], D: [1, 0], L: [0, -1], R: [0, 1] };
  }

  move(direction) {
    let head = this.snake.back();
    let newHead = [head[0] + this.directions[direction][0], head[1] + this.directions[direction][1]];

    this.snake.pushBack(newHead);
    this.snake.popFront(); // –£–¥–∞–ª—è–µ–º —Ö–≤–æ—Å—Ç (–µ—Å–ª–∏ –Ω–µ —Å—ä–µ–ª–∏ –µ–¥—É)

    return newHead;
  }

  display() {
    console.log([...this.snake.items]);
  }
}

const game = new SnakeGame();
game.move("R"); // –î–≤–∏–≥–∞–µ–º –∑–º–µ–π–∫—É –≤–ø—Ä–∞–≤–æ
game.move("D"); // –î–≤–∏–≥–∞–µ–º –≤–Ω–∏–∑
game.display(); // [[0,1], [1,1]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `Deque` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–µ–ª–∞ –∑–º–µ–π–∫–∏.
- –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥–æ–ª–æ–≤—É (`pushBack()`), —É–¥–∞–ª—è–µ–º —Ö–≤–æ—Å—Ç (`popFront()`), –µ—Å–ª–∏ –∑–º–µ–π–∫–∞ –Ω–µ —Å—ä–µ–ª–∞ –µ–¥—É.
---
üîü –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π (Undo/Redo)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º Undo / Redo —Å –ø–æ–º–æ—â—å—é –¥–µ–∫–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class HistoryManager {
  constructor() {
    this.undoStack = new Deque();
    this.redoStack = new Deque();
  }

  performAction(action) {
    this.undoStack.pushBack(action);
    this.redoStack = new Deque(); // –û—á–∏—Å—Ç–∏—Ç—å Redo-—Å—Ç–µ–∫ –ø–æ—Å–ª–µ –Ω–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  }

  undo() {
    if (!this.undoStack.isEmpty()) {
      let lastAction = this.undoStack.popBack();
      this.redoStack.pushBack(lastAction);
      return `–û—Ç–º–µ–Ω–µ–Ω–æ: ${lastAction}`;
    }
    return "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å";
  }

  redo() {
    if (!this.redoStack.isEmpty()) {
      let redoAction = this.redoStack.popBack();
      this.undoStack.pushBack(redoAction);
      return `–ü–æ–≤—Ç–æ—Ä–µ–Ω–æ: ${redoAction}`;
    }
    return "–ù–µ—á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å";
  }

  displayHistory() {
    console.log("–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π:", [...this.undoStack.items]);
  }
}

const history = new HistoryManager();
history.performAction("–û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª");
history.performAction("–ù–∞–ø–∏—Å–∞–Ω –∫–æ–¥");
console.log(history.undo()); // "–û—Ç–º–µ–Ω–µ–Ω–æ: –ù–∞–ø–∏—Å–∞–Ω –∫–æ–¥"
console.log(history.redo()); // "–ü–æ–≤—Ç–æ—Ä–µ–Ω–æ: –ù–∞–ø–∏—Å–∞–Ω –∫–æ–¥"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ –¥–µ–∫–∞: `undoStack` (–¥–ª—è –æ—Ç–º–µ–Ω—ã) –∏ `redoStack` (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è).
- –ü—Ä–∏ –Ω–æ–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–∏ –æ—á–∏—â–∞–µ–º `redoStack`, —Ç.–∫. –ø–æ—Å–ª–µ –Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å—Ç–∞—Ä—ã–µ "–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è" —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã.
–î–µ–∫ ‚Äî –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–µ–π—Å—Ç–≤–∏–π, –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç—Ä–æ–∫, —Å–∏–º—É–ª—è—Ü–∏–µ–π –∏–≥—Ä –∏ –¥–∞–∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –ø–æ–∏—Å–∫–∞!
---------------------
‚ãô ‚ùç –ì—Ä–∞—Ñ—ã:
---
–ì—Ä–∞—Ñ—ã –≤ JavaScript:
–ß—Ç–æ —Ç–∞–∫–æ–µ –≥—Ä–∞—Ñ?
–ì—Ä–∞—Ñ ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:
- –í–µ—Ä—à–∏–Ω (nodes, vertices) ‚Äî –æ–±—ä–µ–∫—Ç—ã –∏–ª–∏ —É–∑–ª—ã.
- –†—ë–±–µ—Ä (edges) ‚Äî —Å–≤—è–∑–∏ –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏.
–í–∏–¥—ã –≥—Ä–∞—Ñ–æ–≤
üîπ –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
- –í –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ —Å–≤—è–∑–∏ –∏–º–µ—é—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–¥–Ω–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ—Ä–æ–≥–∏).
- –í –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ —Å–≤—è–∑–∏ –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–∑—å—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö).
üîπ –í–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∏ –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ
- –í–∑–≤–µ—à–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ—ã –∏–º–µ—é—Ç "–≤–µ—Å" —É —Ä—ë–±–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ –∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ).
- –ù–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ—ã –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∏ –±–µ–∑ –≤–µ—Å–æ–≤.
---
–ö–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ –≤ –ø–∞–º—è—Ç–∏?
üî∏ –ú–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–ª–æ—Ç–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤)
–ú–∞—Å—Å–∏–≤ `n √ó n`, –≥–¥–µ `1` –æ–∑–Ω–∞—á–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏, –∞ `0` ‚Äî –µ—ë –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ.
```js
const adjacencyMatrix = [
  [0, 1, 1], // –í–µ—Ä—à–∏–Ω–∞ 0 —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å 1 –∏ 2
  [1, 0, 1], // –í–µ—Ä—à–∏–Ω–∞ 1 —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å 0 –∏ 2
  [1, 1, 0]  // –í–µ—Ä—à–∏–Ω–∞ 2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å 0 –∏ 1
];
```
üî∏ –°–ø–∏—Å–æ–∫ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤)
–û–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á–∏ ‚Äî –≤–µ—Ä—à–∏–Ω—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –º–∞—Å—Å–∏–≤—ã —Å–º–µ–∂–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω.
```js
const adjacencyList = {
  0: [1, 2],
  1: [0, 2],
  2: [0, 1]
};
```
---
1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä–∞—Ñ–∞ —Å –º–µ—Ç–æ–¥–∞–º–∏ **–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—à–∏–Ω –∏ —Ä—ë–±–µ—Ä.
üéØ –†–µ—à–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:
–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç `adjacencyList` –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞.
```js
class Graph {
  constructor() {
    this.adjacencyList = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
  }

  addVertex(vertex) {
    if (!this.adjacencyList[vertex]) {
      this.adjacencyList[vertex] = [];
    }
  }

  addEdge(v1, v2) {
    this.adjacencyList[v1].push(v2);
    this.adjacencyList[v2].push(v1); // –î–ª—è –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
  }

  display() {
    console.log(this.adjacencyList);
  }
}

const graph = new Graph();
graph.addVertex(1);
graph.addVertex(2);
graph.addVertex(3);
graph.addEdge(1, 2);
graph.addEdge(2, 3);
graph.display();
// –í—ã–≤–æ–¥: { '1': [ 2 ], '2': [ 1, 3 ], '3': [ 2 ] }
```
---
2Ô∏è‚É£ –û–±—Ö–æ–¥ –≤ –≥–ª—É–±–∏–Ω—É (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å DFS –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞.
üéØ –†–µ—à–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:
DFS —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ—Å–µ—â–∞–µ—Ç –≤–µ—Ä—à–∏–Ω—ã, —É–≥–ª—É–±–ª—è—è—Å—å –∫–∞–∫ –º–æ–∂–Ω–æ –¥–∞–ª—å—à–µ.
```js
const dfs = (graph, start, visited = new Set()) => {
  if (!visited.has(start)) {
    console.log(start);
    visited.add(start);
    for (let neighbor of graph[start]) {
      dfs(graph, neighbor, visited);
    }
  }
};

const graph2 = { 0: [1, 2], 1: [0, 3], 2: [0], 3: [1] };
dfs(graph2, 0);
// –í—ã–≤–æ–¥: 0 1 3 2
```
---
3Ô∏è‚É£ –û–±—Ö–æ–¥ –≤ —à–∏—Ä–∏–Ω—É (BFS)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å BFS –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞.
üéØ –†–µ—à–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:
BFS –ø—Ä–æ—Ö–æ–¥–∏—Ç –≥—Ä–∞—Ñ –ø–æ —É—Ä–æ–≤–Ω—è–º, –∏—Å–ø–æ–ª—å–∑—É—è –æ—á–µ—Ä–µ–¥—å.
```js
const bfs = (graph, start) => {
  const queue = [start];
  const visited = new Set(queue);

  while (queue.length) {
    const node = queue.shift();
    console.log(node);
    for (let neighbor of graph[node]) {
      if (!visited.has(neighbor)) {
        visited.add(neighbor);
        queue.push(neighbor);
      }
    }
  }
};

bfs(graph2, 0);
// –í—ã–≤–æ–¥: 0 1 2 3
```
---
4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ—Ä—à–∏–Ω–∞–º–∏
‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ø—É—Ç—å –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏.
üéØ –†–µ—à–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:
–ò—Å–ø–æ–ª—å–∑—É–µ–º DFS.
```js
const hasPath = (graph, start, end, visited = new Set()) => {
  if (start === end) return true;
  if (visited.has(start)) return false;

  visited.add(start);
  for (let neighbor of graph[start]) {
    if (hasPath(graph, neighbor, end, visited)) return true;
  }
  return false;
};

console.log(hasPath(graph2, 0, 3)); // true
console.log(hasPath(graph2, 2, 3)); // false
```
---
5Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏
‚åõ –ó–∞–¥–∞—á–∞: –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π –≥—Ä–∞—Ñ–∞.
üéØ –†–µ—à–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:
–ó–∞–ø—É—Å–∫–∞–µ–º DFS –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
```js
const countComponents = (graph) => {
  const visited = new Set();
  let count = 0;

  const dfs = (node) => {
    visited.add(node);
    for (let neighbor of graph[node]) {
      if (!visited.has(neighbor)) dfs(neighbor);
    }
  };

  for (let node in graph) {
    if (!visited.has(Number(node))) {
      count++;
      dfs(Number(node));
    }
  }
  return count;
};

console.log(countComponents({ 0: [1], 1: [0], 2: [] })); // 2
```
---
6Ô∏è‚É£ –ü–æ–∏—Å–∫ —Ü–∏–∫–ª–∞
```js
const hasCycle = (graph, node, visited = new Set(), parent = -1) => {
  visited.add(node);
  for (let neighbor of graph[node]) {
    if (!visited.has(neighbor)) {
      if (hasCycle(graph, neighbor, visited, node)) return true;
    } else if (neighbor !== parent) {
      return true;
    }
  }
  return false;
};
```
---
7Ô∏è‚É£ –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å (BFS)
```js
const shortestPathBFS = (graph, start, end) => {
  const queue = [[start, 0]];
  const visited = new Set();

  while (queue.length) {
    const [node, dist] = queue.shift();
    if (node === end) return dist;

    visited.add(node);
    for (let neighbor of graph[node]) {
      if (!visited.has(neighbor)) {
        queue.push([neighbor, dist + 1]);
      }
    }
  }
  return -1;
};

console.log(shortestPathBFS(graph2, 0, 3)); // 2
```
---
8Ô∏è‚É£ –ê–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã
–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤–æ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ.
```js
// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –∏ –î–µ–π–∫—Å—Ç—Ä—ã
```
---
9Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä–∞—Ñ –¥–µ—Ä–µ–≤–æ–º
```js
const isTree = (graph) => {
  let edges = 0;
  for (let key in graph) edges += graph[key].length;
  edges /= 2;
  return countComponents(graph) === 1 && edges === Object.keys(graph).length - 1;
};
```
---
üîü –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–æ—Å—Ç–æ–≤ (DFS)
```js
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –¢–∞—Ä—å—è–Ω–∞
```
---------------------
‚ãô ‚ùç –ü—Ä–∏—Ä–æ–¥–∞ –≥—Ä–∞—Ñ–∞:
---
–ì—Ä–∞—Ñ ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–µ—Ä—à–∏–Ω (—É–∑–ª–æ–≤) –∏ —Ä—ë–±–µ—Ä (—Å–≤—è–∑–µ–π –º–µ–∂–¥—É —É–∑–ª–∞–º–∏). –ì—Ä–∞—Ñ—ã –±—ã–≤–∞—é—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∏ –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ, —Å–≤—è–∑–Ω—ã–µ –∏ –Ω–µ—Å–≤—è–∑–Ω—ã–µ.
1. ‚åõ –ó–∞–¥–∞—á–∞: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä–∞—Ñ —Å–≤—è–∑–Ω—ã–º
–ì—Ä–∞—Ñ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–≤—è–∑–Ω—ã–º, –µ—Å–ª–∏ –º–µ–∂–¥—É –ª—é–±–æ–π –ø–∞—Ä–æ–π –≤–µ—Ä—à–∏–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—É—Ç—å. –ü—Ä–æ–≤–µ—Ä–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä–∞—Ñ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏, —Å–≤—è–∑–Ω—ã–º.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ö–æ–¥ –≤ –≥–ª—É–±–∏–Ω—É (DFS) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–Ω–æ –ª–∏ –¥–æ—Å—Ç–∏—á—å –≤—Å–µ –≤–µ—Ä—à–∏–Ω—ã –∏–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π.
```javascript
const graph = {
  0: [1, 2],
  1: [0, 3],
  2: [0, 3],
  3: [1, 2]
};

const isConnected = (graph) => {
  const visited = new Set();
  const startNode = Object.keys(graph)[0];

  const dfs = (node) => {
    if (!visited.has(node)) {
      visited.add(node);
      for (let neighbor of graph[node]) {
        dfs(neighbor);
      }
    }
  };

  dfs(startNode);
  return visited.size === Object.keys(graph).length;
};

console.log(isConnected(graph)); // true
```
---
2. ‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä–∞—Ñ –¥–µ—Ä–µ–≤–æ–º
–ì—Ä–∞—Ñ —è–≤–ª—è–µ—Ç—Å—è –¥–µ—Ä–µ–≤–æ–º, –µ—Å–ª–∏ –æ–Ω —Å–≤—è–∑–µ–Ω –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏–∫–ª–æ–≤.
üéØ –†–µ—à–µ–Ω–∏–µ:
- –ì—Ä–∞—Ñ —è–≤–ª—è–µ—Ç—Å—è –¥–µ—Ä–µ–≤–æ–º, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä = –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–µ—Ä—à–∏–Ω - 1.
- –ì—Ä–∞—Ñ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏–∫–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º DFS –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏).
```javascript
const isTree = (graph) => {
  const visited = new Set();
  let edgeCount = 0;

  const dfs = (node, parent) => {
    if (visited.has(node)) return false;
    visited.add(node);

    for (let neighbor of graph[node]) {
      if (neighbor !== parent) {
        if (!dfs(neighbor, node)) return false;
        edgeCount++;
      }
    }
    return true;
  };

  const startNode = Object.keys(graph)[0];
  if (!dfs(startNode, null)) return false;

  return visited.size === Object.keys(graph).length && edgeCount === visited.size - 1;
};

const graph1 = { 0: [1, 2], 1: [0], 2: [0] }; // –î–µ—Ä–µ–≤–æ
const graph2 = { 0: [1, 2], 1: [0, 2], 2: [0, 1] }; // –° —Ü–∏–∫–ª–æ–º, –Ω–µ –¥–µ—Ä–µ–≤–æ

console.log(isTree(graph1)); // true
console.log(isTree(graph2)); // false
```
---
3. ‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä–∞—Ñ –¥–≤—É–¥–æ–ª—å–Ω—ã–º
–ì—Ä–∞—Ñ –¥–≤—É–¥–æ–ª—å–Ω—ã–π, –µ—Å–ª–∏ –µ–≥–æ –≤–µ—Ä—à–∏–Ω—ã –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –¥–≤–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞, —Ç–∞–∫–∏–µ —á—Ç–æ –≤—Å–µ —Ä—ë–±—Ä–∞ —Å–æ–µ–¥–∏–Ω—è—é—Ç –≤–µ—Ä—à–∏–Ω—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–Ω–æ–∂–µ—Å—Ç–≤.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ò—Å–ø–æ–ª—å–∑—É–µ–º BFS –∏ –∫—Ä–∞—Å–∏–º –≤–µ—Ä—à–∏–Ω—ã –≤ –¥–≤–∞ —Ü–≤–µ—Ç–∞.
```javascript
const isBipartite = (graph) => {
  const colors = {};

  for (let node in graph) {
    if (!(node in colors)) {
      colors[node] = 0;
      const queue = [node];

      while (queue.length) {
        let current = queue.shift();
        for (let neighbor of graph[current]) {
          if (!(neighbor in colors)) {
            colors[neighbor] = 1 - colors[current];
            queue.push(neighbor);
          } else if (colors[neighbor] === colors[current]) {
            return false;
          }
        }
      }
    }
  }
  return true;
};

const graph1 = { 0: [1, 3], 1: [0, 2], 2: [1, 3], 3: [0, 2] };
const graph2 = { 0: [1, 2], 1: [0, 2], 2: [0, 1] };

console.log(isBipartite(graph1)); // true
console.log(isBipartite(graph2)); // false
```
---
4. ‚åõ –ó–∞–¥–∞—á–∞: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–≤—è–∑–Ω–æ—Å—Ç–∏
–ï—Å–ª–∏ –≥—Ä–∞—Ñ –Ω–µ—Å–≤—è–∑–Ω—ã–π, –µ–≥–æ –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ó–∞–ø—É—Å–∫–∞–µ–º *DFS –∏–∑ –∫–∞–∂–¥–æ–π –Ω–µ–ø–æ—Å–µ—â—ë–Ω–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
```javascript
const countComponents = (graph) => {
  const visited = new Set();
  let count = 0;

  const dfs = (node) => {
    if (!visited.has(node)) {
      visited.add(node);
      for (let neighbor of graph[node]) {
        dfs(neighbor);
      }
    }
  };

  for (let node in graph) {
    if (!visited.has(node)) {
      count++;
      dfs(node);
    }
  }

  return count;
};

const graph1 = { 0: [1], 1: [0], 2: [3], 3: [2] }; // –î–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
const graph2 = { 0: [1, 2], 1: [0, 2], 2: [0, 1] }; // –û–¥–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

console.log(countComponents(graph1)); // 2
console.log(countComponents(graph2)); // 1
```
---
5. ‚åõ –ó–∞–¥–∞—á–∞: –ü–æ–∏—Å–∫ —Ü–∏–∫–ª–∞ –≤ –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ
–û–ø—Ä–µ–¥–µ–ª–∏–º, –µ—Å—Ç—å –ª–∏ –≤ –≥—Ä–∞—Ñ–µ —Ü–∏–∫–ª.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ò—Å–ø–æ–ª—å–∑—É–µ–º DFS —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è.
```javascript
const hasCycle = (graph) => {
  const visited = new Set();

  const dfs = (node, parent) => {
    visited.add(node);
    for (let neighbor of graph[node]) {
      if (!visited.has(neighbor)) {
        if (dfs(neighbor, node)) return true;
      } else if (neighbor !== parent) {
        return true;
      }
    }
    return false;
  };

  for (let node in graph) {
    if (!visited.has(node)) {
      if (dfs(node, null)) return true;
    }
  }
  return false;
};

const graph1 = { 0: [1], 1: [0, 2], 2: [1] }; // –ë–µ–∑ —Ü–∏–∫–ª–∞
const graph2 = { 0: [1, 2], 1: [0, 2], 2: [0, 1] }; // –° —Ü–∏–∫–ª–æ–º

console.log(hasCycle(graph1)); // false
console.log(hasCycle(graph2)); // true
```
---

6. ‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä–∞—Ñ –ø–æ–ª–Ω—ã–º
–ì—Ä–∞—Ñ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω—ã–º, –µ—Å–ª–∏ –∫–∞–∂–¥–∞—è –≤–µ—Ä—à–∏–Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å–æ –≤—Å–µ–º–∏ –¥—Ä—É–≥–∏–º–∏ –≤–µ—Ä—à–∏–Ω–∞–º–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
–í –ø–æ–ª–Ω–æ–º –≥—Ä–∞—Ñ–µ —Å `n` –≤–µ—Ä—à–∏–Ω–∞–º–∏ —É –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å `n-1` —Å–æ—Å–µ–¥–µ–π.
```javascript
const isCompleteGraph = (graph) => {
  const nodes = Object.keys(graph);
  const n = nodes.length;

  for (let node of nodes) {
    if (graph[node].length !== n - 1) {
      return false;
    }
  }
  return true;
};

const graph1 = { 0: [1, 2], 1: [0, 2], 2: [0, 1] }; // –ü–æ–ª–Ω—ã–π
const graph2 = { 0: [1], 1: [0, 2], 2: [1] }; // –ù–µ –ø–æ–ª–Ω—ã–π

console.log(isCompleteGraph(graph1)); // true
console.log(isCompleteGraph(graph2)); // false
```
---
7. ‚åõ –ó–∞–¥–∞—á–∞: –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ (BFS)
–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É (BFS), —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ –æ–Ω –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å (`queue`), —á—Ç–æ–±—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –≥—Ä–∞—Ñ—É —É—Ä–æ–≤–Ω—è–º–∏.
```javascript
const shortestPathBFS = (graph, start, target) => {
  const queue = [[start, 0]]; // (–≤–µ—Ä—à–∏–Ω–∞, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ)
  const visited = new Set();

  while (queue.length) {
    const [node, dist] = queue.shift();

    if (node === target) return dist;

    if (!visited.has(node)) {
      visited.add(node);
      for (let neighbor of graph[node]) {
        queue.push([neighbor, dist + 1]);
      }
    }
  }
  return -1; // –ï—Å–ª–∏ –ø—É—Ç–∏ –Ω–µ—Ç
};

const graph = { 0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2] };

console.log(shortestPathBFS(graph, 0, 3)); // 2
console.log(shortestPathBFS(graph, 0, 4)); // -1 (–Ω–µ—Ç –ø—É—Ç–∏)
```
---
8. ‚åõ –ó–∞–¥–∞—á–∞: –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ (–∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã)
–î–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å (min-heap).
```javascript
class PriorityQueue {
  constructor() {
    this.queue = [];
  }

  enqueue(element, priority) {
    this.queue.push({ element, priority });
    this.queue.sort((a, b) => a.priority - b.priority);
  }

  dequeue() {
    return this.queue.shift().element;
  }

  isEmpty() {
    return this.queue.length === 0;
  }
}

const dijkstra = (graph, start) => {
  const distances = {};
  const pq = new PriorityQueue();

  for (let node in graph) {
    distances[node] = Infinity;
  }
  distances[start] = 0;
  pq.enqueue(start, 0);

  while (!pq.isEmpty()) {
    let current = pq.dequeue();

    for (let neighbor in graph[current]) {
      let newDist = distances[current] + graph[current][neighbor];
      if (newDist < distances[neighbor]) {
        distances[neighbor] = newDist;
        pq.enqueue(neighbor, newDist);
      }
    }
  }

  return distances;
};

const graph = {
  A: { B: 1, C: 4 },
  B: { A: 1, C: 2, D: 5 },
  C: { A: 4, B: 2, D: 1 },
  D: { B: 5, C: 1 }
};

console.log(dijkstra(graph, "A")); // { A: 0, B: 1, C: 3, D: 4 }
```
---
9. ‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä–∞—Ñ –ø–ª–∞–Ω–∞—Ä–Ω—ã–º
–ì—Ä–∞—Ñ –ø–ª–∞–Ω–∞—Ä–Ω—ã–π, –µ—Å–ª–∏ –µ–≥–æ –º–æ–∂–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ä—ë–±–µ—Ä.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É –≠–π–ª–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∞:
\[
V - E + F = 2
\]
–≥–¥–µ `V` ‚Äî –≤–µ—Ä—à–∏–Ω—ã, `E` ‚Äî —Ä—ë–±—Ä–∞, `F` ‚Äî –≥—Ä–∞–Ω–∏. –î–ª—è –≥—Ä–∞—Ñ–æ–≤ –±–µ–∑ –≥—Ä–∞–Ω–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ.
- –í –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ –±–µ–∑ —Ü–∏–∫–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å `E ‚â§ 3V - 6`.
- –í –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ `E ‚â§ 2V - 4`.
```javascript
const isPlanarGraph = (graph) => {
  const V = Object.keys(graph).length;
  let E = 0;

  for (let node in graph) {
    E += graph[node].length;
  }
  E /= 2; // –ö–∞–∂–¥–æ–µ —Ä–µ–±—Ä–æ –ø–æ—Å—á–∏—Ç–∞–Ω–æ –¥–≤–∞–∂–¥—ã

  return E <= 3 * V - 6;
};

const graph1 = { 0: [1, 2], 1: [0, 2], 2: [0, 1] }; // –ü–æ–ª–Ω—ã–π –≥—Ä–∞—Ñ K3 (–ø–ª–∞–Ω–∞—Ä–Ω—ã–π)
const graph2 = { 0: [1, 2, 3], 1: [0, 2, 3], 2: [0, 1, 3], 3: [0, 1, 2] }; // –ü–æ–ª–Ω—ã–π –≥—Ä–∞—Ñ K4 (–ø–ª–∞–Ω–∞—Ä–Ω—ã–π)
const graph3 = { 0: [1, 2, 3, 4], 1: [0, 2, 3, 4], 2: [0, 1, 3, 4], 3: [0, 1, 2, 4], 4: [0, 1, 2, 3] }; // –ü–æ–ª–Ω—ã–π –≥—Ä–∞—Ñ K5 (–Ω–µ –ø–ª–∞–Ω–∞—Ä–Ω—ã–π)

console.log(isPlanarGraph(graph1)); // true
console.log(isPlanarGraph(graph2)); // true
console.log(isPlanarGraph(graph3)); // false
```
---
10. ‚åõ –ó–∞–¥–∞—á–∞: –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–æ—Å—Ç–æ–≤ –≤ –≥—Ä–∞—Ñ–µ
–ú–æ—Å—Ç ‚Äî —ç—Ç–æ —Ä–µ–±—Ä–æ, —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ö–æ–¥ –≤ –≥–ª—É–±–∏–Ω—É (DFS) –∏ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤ –≤–µ—Ä—à–∏–Ω—É.
```javascript
const findBridges = (graph) => {
  let time = 0;
  const discovery = {};
  const low = {};
  const bridges = [];

  const dfs = (node, parent) => {
    discovery[node] = low[node] = ++time;

    for (let neighbor of graph[node]) {
      if (neighbor === parent) continue;

      if (!(neighbor in discovery)) {
        dfs(neighbor, node);
        low[node] = Math.min(low[node], low[neighbor]);

        if (low[neighbor] > discovery[node]) {
          bridges.push([node, neighbor]);
        }
      } else {
        low[node] = Math.min(low[node], discovery[neighbor]);
      }
    }
  };

  for (let node in graph) {
    if (!(node in discovery)) dfs(node, null);
  }

  return bridges;
};

const graph = { 0: [1, 2], 1: [0, 2, 3], 2: [0, 1], 3: [1, 4], 4: [3] };

console.log(findBridges(graph)); // [[3, 4]]
```
---------------------
‚ãô ‚ùç –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –≤ –ø–∞–º—è—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:
---
–ì—Ä–∞—Ñ—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏, –≤–∫–ª—é—á–∞—è —Å–ø–∏—Å–∫–∏ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –∏ –º–∞—Ç—Ä–∏—Ü—ã —Å–º–µ–∂–Ω–æ—Å—Ç–∏. –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ —è –æ–±—ä—è—Å–Ω—é —Ä–µ—à–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—é –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞.
1. ‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Ç—Ä–∏—Ü—ã —Å–º–µ–∂–Ω–æ—Å—Ç–∏
–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ —Å 4 –≤–µ—Ä—à–∏–Ω–∞–º–∏, –≥–¥–µ –≤–µ—Ä—à–∏–Ω—ã —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: 0 - 1, 0 - 2, 1 - 3.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ú–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤, –≥–¥–µ —Å—Ç—Ä–æ–∫–∞ i –∏ —Å—Ç–æ–ª–±–µ—Ü j —Å–æ–¥–µ—Ä–∂–∞—Ç 1, –µ—Å–ª–∏ –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏ i –∏ j –µ—Å—Ç—å —Ä–µ–±—Ä–æ, –∏ 0, –µ—Å–ª–∏ –Ω–µ—Ç.
```javascript
const graph = [
  [0, 1, 1, 0], // –í–µ—Ä—à–∏–Ω–∞ 0 —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å –≤–µ—Ä—à–∏–Ω–∞–º–∏ 1 –∏ 2
  [1, 0, 0, 1], // –í–µ—Ä—à–∏–Ω–∞ 1 —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å –≤–µ—Ä—à–∏–Ω–∞–º–∏ 0 –∏ 3
  [1, 0, 0, 0], // –í–µ—Ä—à–∏–Ω–∞ 2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å –≤–µ—Ä—à–∏–Ω–∞–º–∏ 0
  [0, 1, 0, 0]  // –í–µ—Ä—à–∏–Ω–∞ 3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å –≤–µ—Ä—à–∏–Ω–∞–º–∏ 1
];

console.log(graph);
```
2. ‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ —Å –ø–æ–º–æ—â—å—é —Å–ø–∏—Å–∫–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏
–°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ —Å 3 –≤–µ—Ä—à–∏–Ω–∞–º–∏, –≥–¥–µ 0 -> 1, 1 -> 2.
üéØ –†–µ—à–µ–Ω–∏–µ:
–°–ø–∏—Å–æ–∫ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Å–º–µ–∂–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã.
```javascript
const graph = {
  0: [1], // –í–µ—Ä—à–∏–Ω–∞ 0 —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å –≤–µ—Ä—à–∏–Ω–æ–π 1
  1: [2], // –í–µ—Ä—à–∏–Ω–∞ 1 —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å –≤–µ—Ä—à–∏–Ω–æ–π 2
  2: []   // –í–µ—Ä—à–∏–Ω–∞ 2 –Ω–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å –¥—Ä—É–≥–∏–º–∏ –≤–µ—Ä—à–∏–Ω–∞–º–∏
};

console.log(graph);
```
3. ‚åõ –ó–∞–¥–∞—á–∞: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å–º–µ–∂–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω –¥–ª—è –≤–µ—Ä—à–∏–Ω—ã 0 –≤ —Å–ø–∏—Å–∫–µ —Å–º–µ–∂–Ω–æ—Å—Ç–∏
–î–ª—è –≥—Ä–∞—Ñ–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞–π–¥–∏—Ç–µ –≤—Å–µ –≤–µ—Ä—à–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–µ–∂–Ω—ã —Å –≤–µ—Ä—à–∏–Ω–æ–π 0.
üéØ –†–µ—à–µ–Ω–∏–µ:
–î–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–º–µ–∂–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–µ—Ä—à–∏–Ω—ã 0.
```javascript
const graph = {
  0: [1],
  1: [2],
  2: []
};

const getNeighbors = (graph, vertex) => graph[vertex] || [];

console.log(getNeighbors(graph, 0)); // [1]
```
4. ‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–±—Ä–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ—Ä—à–∏–Ω–∞–º–∏ –≤ –º–∞—Ç—Ä–∏—Ü–µ —Å–º–µ–∂–Ω–æ—Å—Ç–∏
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —Ä–µ–±—Ä–æ –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏ 0 –∏ 2 –≤ –≥—Ä–∞—Ñ–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –º–∞—Ç—Ä–∏—Ü–µ–π —Å–º–µ–∂–Ω–æ—Å—Ç–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–±—Ä–∞ —Å–≤–æ–¥–∏—Ç—Å—è –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —è—á–µ–π–∫–µ –º–∞—Ç—Ä–∏—Ü—ã.
```javascript
const graph = [
  [0, 1, 1, 0],
  [1, 0, 0, 1],
  [1, 0, 0, 0],
  [0, 1, 0, 0]
];

const hasEdge = (graph, vertex1, vertex2) => graph[vertex1][vertex2] === 1;

console.log(hasEdge(graph, 0, 2)); // true
console.log(hasEdge(graph, 1, 2)); // false
```
5. ‚åõ –ó–∞–¥–∞—á–∞: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±—Ä–∞ –≤ –≥—Ä–∞—Ñ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–∫–æ–º —Å–º–µ–∂–Ω–æ—Å—Ç–∏
–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–±—Ä–æ –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏ 1 –∏ 2 –≤ –≥—Ä–∞—Ñ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–∫–æ–º —Å–º–µ–∂–Ω–æ—Å—Ç–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–±—Ä–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—Ä—à–∏–Ω—É –≤ —Å–ø–∏—Å–æ–∫ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤–µ—Ä—à–∏–Ω—ã.
```javascript
const graph = {
  0: [1],
  1: [2],
  2: []
};

const addEdge = (graph, vertex1, vertex2) => {
  graph[vertex1].push(vertex2);
};

addEdge(graph, 1, 2); // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–±—Ä–æ 1 -> 2
console.log(graph);
```
6. ‚åõ –ó–∞–¥–∞—á–∞: –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–±—Ä–∞ –∏–∑ –≥—Ä–∞—Ñ–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–æ–º —Å–º–µ–∂–Ω–æ—Å—Ç–∏
–£–¥–∞–ª–∏—Ç–µ —Ä–µ–±—Ä–æ –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏ 0 –∏ 1 –≤ –≥—Ä–∞—Ñ–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–æ–º —Å–º–µ–∂–Ω–æ—Å—Ç–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–±—Ä–∞ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–µ—Ä—à–∏–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏.
```javascript
const graph = {
  0: [1],
  1: [2],
  2: []
};

const removeEdge = (graph, vertex1, vertex2) => {
  const index = graph[vertex1].indexOf(vertex2);
  if (index !== -1) {
    graph[vertex1].splice(index, 1);
  }
};

removeEdge(graph, 0, 1); // –£–¥–∞–ª—è–µ–º —Ä–µ–±—Ä–æ 0 -> 1
console.log(graph);
```
7. ‚åõ –ó–∞–¥–∞—á–∞: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–µ—Ä—à–∏–Ω –≥—Ä–∞—Ñ–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–º–µ—é—Ç –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ä—ë–±–µ—Ä (–≤ —Å–ø–∏—Å–∫–µ —Å–º–µ–∂–Ω–æ—Å—Ç–∏)
–î–ª—è –≥—Ä–∞—Ñ–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞–π–¥–∏—Ç–µ –≤–µ—Ä—à–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–º–µ—é—Ç –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ä—ë–±–µ—Ä.
üéØ –†–µ—à–µ–Ω–∏–µ:
–î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∞–∫–∏—Ö –≤–µ—Ä—à–∏–Ω –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –∏ –≤—ã—è–≤–∏—Ç—å —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—É—Å—Ç—ã.
```javascript
const graph = {
  0: [1],
  1: [2],
  2: []
};

const findVerticesWithNoOutgoingEdges = graph => {
  return Object.keys(graph).filter(vertex => graph[vertex].length === 0);
};

console.log(findVerticesWithNoOutgoingEdges(graph)); // [2]
```
8. ‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä–∞—Ñ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä–∞—Ñ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ç—Ä–∏—Ü–µ–π —Å–º–µ–∂–Ω–æ—Å—Ç–∏, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º. –ì—Ä–∞—Ñ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –µ—Å–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –≤–µ—Ä—à–∏–Ω (i, j) –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É—Å–ª–æ–≤–∏–µ: –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–±—Ä–æ –∏–∑ i –≤ j, —Ç–æ –Ω–µ—Ç —Ä–µ–±—Ä–∞ –∏–∑ j –≤ i.
üéØ –†–µ—à–µ–Ω–∏–µ:
–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –º–∞—Ç—Ä–∏—Ü–µ –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –µ—Å–ª–∏ `graph[i][j] === 1`, —Ç–æ `graph[j][i] === 0`.
```javascript
const graph = [
  [0, 1, 0],
  [0, 0, 1],
  [0, 0, 0]
];

const isDirected = graph => {
  for (let i = 0; i < graph.length; i++) {
    for (let j = 0; j < graph.length; j++) {
      if (graph[i][j] === 1 && graph[j][i] === 1) {
        return false; // –ì—Ä–∞—Ñ –Ω–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
      }
    }
  }
  return true;
};

console.log(isDirected(graph)); // true
```
9. ‚åõ –ó–∞–¥–∞—á–∞: –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—Ä–∏—Ü–µ–π —Å–º–µ–∂–Ω–æ—Å—Ç–∏
–°–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –≥—Ä–∞—Ñ–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—Ä–∏—Ü–µ–π —Å–º–µ–∂–Ω–æ—Å—Ç–∏ (–≤—Å–µ —Ä—ë–±—Ä–∞ –≥—Ä–∞—Ñ–∞ –º–µ–Ω—è—é—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ).
üéØ –†–µ—à–µ–Ω–∏–µ:
–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Å–≤–æ–¥–∏—Ç—Å—è –∫ –æ–±–º–µ–Ω—É —Å—Ç—Ä–æ–∫ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏.
```javascript
const graph = [
  [0, 1, 0],
  [0, 0, 1],
  [0, 0, 0]
];

const transposeGraph = graph => {
  const n = graph.length;
  const transposed = Array.from({ length: n }, () => Array(n).fill(0));

  for (let i = 0; i < n; i++) {
    for (let j = 0; j < n; j++) {
      transposed[j][i] = graph[i][j];
    }
  }
  return transposed;
};

console.log(transposeGraph(graph));
```
10. ‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ —Å –ø–æ–º–æ—â—å—é —Å–ø–∏—Å–∫–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏
–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ —Å 3 –≤–µ—Ä—à–∏–Ω–∞–º–∏, –≥–¥–µ –≤–µ—Å–∞ —Ä—ë–±–µ—Ä —Å–ª–µ–¥—É—é—â–∏–µ: 0 -> 1 (–≤–µ—Å 5), 1 -> 2 (–≤–µ—Å 3).
üéØ –†–µ—à–µ–Ω–∏–µ:
–î–ª—è –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –≤ —Å–ø–∏—Å–∫–µ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –≤–µ—Ä—à–∏–Ω–∞–º–∏ –∏ –≤–µ—Å–∞–º–∏.
```javascript
const graph = {
  0: [{ vertex: 1, weight: 5 }],
  1: [{ vertex: 2, weight: 3 }],
  2: []
};

console.log(graph);
```
–≠—Ç–∏ –∑–∞–¥–∞—á–∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–æ–≤ –≤ –ø–∞–º—è—Ç–∏ –∏ –¥–∞—é—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–æ–º, –∫–∞–∫ –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∞–º–∏ –≤ JavaScript.
---------------------
‚ãô ‚ùç –û–±—Ö–æ–¥—ã –≥—Ä–∞—Ñ–∞:
---
1. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –≤ –≥–ª—É–±–∏–Ω—É (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å –≥—Ä–∞—Ñ –≤ –≥–ª—É–±–∏–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function dfs(graph, start) {
    let visited = new Set();
    let result = [];

    function visit(node) {
        if (visited.has(node)) return;
        visited.add(node);
        result.push(node);

        for (let neighbor of graph[node]) {
            visit(neighbor);
        }
    }

    visit(start);
    return result;
}

const graph = {
    A: ["B", "C"],
    B: ["A", "D", "E"],
    C: ["A", "F"],
    D: ["B"],
    E: ["B", "F"],
    F: ["C", "E"]
};

console.log(dfs(graph, "A")); // ["A", "B", "D", "E", "F", "C"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏–º —á–µ—Ä–µ–∑ —Å–æ—Å–µ–¥–µ–π –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã, –¥–æ–±–∞–≤–ª—è—è –∏—Ö –≤ –º–∞—Å—Å–∏–≤ `result`, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –ø–æ—Å–µ—â–µ–Ω—ã.
- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫—É—Ä—Å–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E), –≥–¥–µ V ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω, –∞ E ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä.
---
2. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –≤ —à–∏—Ä–∏–Ω—É (BFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å –≥—Ä–∞—Ñ –≤ —à–∏—Ä–∏–Ω—É, –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function bfs(graph, start) {
    let visited = new Set();
    let queue = [start];
    let result = [];

    while (queue.length) {
        let node = queue.shift();
        if (!visited.has(node)) {
            visited.add(node);
            result.push(node);

            for (let neighbor of graph[node]) {
                if (!visited.has(neighbor)) {
                    queue.push(neighbor);
                }
            }
        }
    }

    return result;
}

console.log(bfs(graph, "A")); // ["A", "B", "C", "D", "E", "F"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ö–æ–¥–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –≥—Ä–∞—Ñ–∞.
- –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—à–∏–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –ø–æ—Å–µ—â–µ–Ω—ã.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E), –≥–¥–µ V ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω, –∞ E ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä.
---
3. –û–±—Ö–æ–¥ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –≤ –≥–ª—É–±–∏–Ω—É (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –≤ –≥–ª—É–±–∏–Ω—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∫—É—Ä—Å–∏—é.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function dfsDirected(graph, start) {
    let visited = new Set();
    let result = [];

    function visit(node) {
        if (visited.has(node)) return;
        visited.add(node);
        result.push(node);

        for (let neighbor of graph[node] || []) {
            visit(neighbor);
        }
    }

    visit(start);
    return result;
}

const directedGraph = {
    A: ["B", "C"],
    B: ["D"],
    C: ["E"],
    D: [],
    E: []
};

console.log(dfsDirected(directedGraph, "A")); // ["A", "B", "D", "C", "E"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –æ–±—Ö–æ–¥ —Å –ø–æ–º–æ—â—å—é —Ä–µ–∫—É—Ä—Å–∏–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ —Ä—ë–±—Ä–∞–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞.
- –ö–∞–∂–¥—É—é –≤–µ—Ä—à–∏–Ω—É –ø–æ—Å–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---
4. –û–±—Ö–æ–¥ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –≤ —à–∏—Ä–∏–Ω—É (BFS)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ–±—Ö–æ–¥ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –≤ —à–∏—Ä–∏–Ω—É.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function bfsDirected(graph, start) {
    let visited = new Set();
    let queue = [start];
    let result = [];

    while (queue.length) {
        let node = queue.shift();
        if (!visited.has(node)) {
            visited.add(node);
            result.push(node);

            for (let neighbor of graph[node] || []) {
                if (!visited.has(neighbor)) {
                    queue.push(neighbor);
                }
            }
        }
    }

    return result;
}

console.log(bfsDirected(directedGraph, "A")); // ["A", "B", "C", "D", "E"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±—ã—á–Ω–æ–º—É BFS, –Ω–æ —Å —É—á—ë—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ —Ä—ë–±–µ—Ä.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---
5. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Ü–∏–∫–ª (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –≤ –≥–ª—É–±–∏–Ω—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≥—Ä–∞—Ñ —Ü–∏–∫–ª.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function hasCycle(graph) {
    let visited = new Set();
    let recStack = new Set();

    function dfs(node) {
        if (recStack.has(node)) return true; // –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–∏–∫–ª
        if (visited.has(node)) return false;

        visited.add(node);
        recStack.add(node);

        for (let neighbor of graph[node] || []) {
            if (dfs(neighbor)) {
                return true;
            }
        }

        recStack.delete(node);
        return false;
    }

    for (let node in graph) {
        if (!visited.has(node)) {
            if (dfs(node)) {
                return true;
            }
        }
    }

    return false;
}

const cyclicGraph = {
    A: ["B"],
    B: ["C"],
    C: ["A"]
};

const acyclicGraph = {
    A: ["B"],
    B: ["C"],
    C: []
};

console.log(hasCycle(cyclicGraph)); // true
console.log(hasCycle(acyclicGraph)); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –î–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å—Ç–µ–∫. –ï—Å–ª–∏ –≤–µ—Ä—à–∏–Ω–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–µ–∫–µ —Ä–µ–∫—É—Ä—Å–∏–∏, –∑–Ω–∞—á–∏—Ç, —Ü–∏–∫–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---
6. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ —Å –ø–æ–º–µ—Ç–∫–æ–π —Ä—ë–±–µ—Ä (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞ –≤ –≥–ª—É–±–∏–Ω—É, –ø–æ–º–µ—á–∞—è —Ä—ë–±—Ä–∞ –∫–∞–∫ ¬´–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ¬ª –∏–ª–∏ ¬´–æ–±—Ä–∞—Ç–Ω—ã–µ¬ª.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function dfsEdgeTypes(graph, start) {
    let visited = new Set();
    let result = [];

    function dfs(node, parent) {
        visited.add(node);

        for (let neighbor of graph[node] || []) {
            if (!visited.has(neighbor)) {
                result.push(`${node} -> ${neighbor} (Tree Edge)`);
                dfs(neighbor, node);
            } else if (parent !== neighbor) {
                result.push(`${node} -> ${neighbor} (Back Edge)`);
            }
        }
    }

    dfs(start);
    return result;
}

const graph2 = {
    A: ["B", "C"],
    B: ["D"],
    C: ["E"],
    D: [],
    E: []
};

console.log(dfsEdgeTypes(graph2, "A"));
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã –æ—Ç–º–µ—á–∞–µ–º —Ä—ë–±—Ä–∞ –∫–∞–∫ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –±—ã–ª–∏ –ª–∏ –≤–µ—Ä—à–∏–Ω—ã —É–∂–µ –ø–æ—Å–µ—â–µ–Ω—ã.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---
7. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã (BFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞ –≤ —à–∏—Ä–∏–Ω—É —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function bfsWithDistances(graph, start) {
    let visited = new Set();
    let queue = [start];
    let distances = { [start]: 0 };

    while (queue.length) {
        let node = queue.shift();

        for (let neighbor of graph[node] || []) {
            if (!visited.has(neighbor)) {
                visited.add(neighbor);
                queue.push(neighbor);
                distances[neighbor] = distances[node] + 1;
            }
        }
    }

    return distances;
}

const graph3 = {
    A: ["B", "C"],
    B: ["A", "D"],
    C: ["A"],
    D: ["B"]
};

console.log(bfsWithDistances(graph3, "A")); // { A: 0, B: 1, C: 1, D: 2 }
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã –≤ –æ–±—ä–µ–∫—Ç–µ `distances` –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –ø–æ –º–µ—Ä–µ –æ–±—Ö–æ–¥–∞.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---
8. –û–±—Ö–æ–¥ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function findConnectedComponents(graph) {
    let visited = new Set();
    let components = [];

    function dfs(node, component) {
        visited.add(node);
        component.push(node);

        for (let neighbor of graph[node] || []) {
            if (!visited.has(neighbor)) {
                dfs(neighbor, component);
            }
        }
    }

    for (let node in graph) {
        if (!visited.has(node)) {
            let component = [];
            dfs(node, component);
            components.push(component);
        }
    }

    return components;
}

const graph4 = {
    A: ["B", "C"],
    B: ["A", "C"],
    C: ["A", "B"],
    D: ["E"],
    E: ["D"],
    F: []
};

console.log(findConnectedComponents(graph4)); // [["A", "B", "C"], ["D", "E"], ["F"]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤–µ—Ä—à–∏–Ω–∞–º –∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–µ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ö–æ–¥ DFS, —Å–æ–∑–¥–∞–≤–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–≤—è–∑–Ω–æ—Å—Ç–∏.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---
9. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ (DFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞ –≤ –≥–ª—É–±–∏–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function dfsWithTime(graph, start) {
    let visited = new Set();
    let result = [];
    let time = 0;

    function visit(node) {
        visited.add(node);
        time++;
        result.push(`Node ${node} entered at time ${time}`);

        for (let neighbor of graph[node] || []) {
            if (!visited.has(neighbor)) {
                visit(neighbor);
            }
        }

        time++;
        result.push(`Node ${node} exited at time ${time}`);
    }

    visit(start);
    return result;
}

const graph5 = {
    A: ["B", "C"],
    B: ["A"],
    C: ["A"]
};

console.log(dfsWithTime(graph5, "A"));
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã, —á—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ—Å—Ç–æ–≤ –∏ –∞—Ä–æ–∫).
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---
10. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –ø—É—Ç–∏ –¥–æ –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã (BFS)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞ –≤ —à–∏—Ä–∏–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—É—Ç—å –¥–æ –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function bfsWithPath(graph, start) {
    let visited = new Set();
    let queue = [start];
    let parent = { [start]: null };
    let result = [];

    while (queue.length) {
        let node = queue.shift();

        for (let neighbor of graph[node] || []) {
            if (!visited.has(neighbor)) {
                visited.add(neighbor);
                queue.push(neighbor);
                parent[neighbor] = node;
            }
        }
    }

    for (let node in parent) {
        let path = [];
        let current = node;
        while (current !== null) {
            path.unshift(current);
            current = parent[current];
        }
        result.push(path);
    }

    return result;
}

console.log(bfsWithPath(graph3, "A")); // [["A", "B", "D"], ["A", "C"]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—É—Ç—å –¥–æ –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—ä–µ–∫—Ç `parent`, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---------------------
‚ãô ‚ùç –ê–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ:
---
–ê–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ –ø–æ–¥–≥—Ä–∞—Ñ, –≤ –∫–æ—Ç–æ—Ä–æ–º –ª—é–±–∞—è –≤–µ—Ä—à–∏–Ω–∞ –¥–æ—Å—Ç–∏–∂–∏–º–∞ –∏–∑ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–µ—Ä—à–∏–Ω—ã.
1. –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é DFS (–≥–ª—É–±–∏–Ω–∞-—à–∏—Ä–∏–Ω–∞)
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ —Å–º–µ–∂–Ω–æ—Å—Ç–∏.
```javascript
function findConnectedComponentsDFS(graph) {
    let visited = new Set();
    let components = [];

    function dfs(node, component) {
        if (visited.has(node)) return;
        visited.add(node);
        component.push(node);

        for (let neighbor of graph[node] || []) {
            dfs(neighbor, component);
        }
    }

    for (let node in graph) {
        if (!visited.has(node)) {
            let component = [];
            dfs(node, component);
            components.push(component);
        }
    }

    return components;
}

const graph = {
    A: ["B"],
    B: ["A", "C"],
    C: ["B"],
    D: ["E"],
    E: ["D"],
    F: []
};

console.log(findConnectedComponentsDFS(graph)); // [["A", "B", "C"], ["D", "E"], ["F"]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ–º DFS –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞.
2. –ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–º –Ω–æ–≤—É—é –≤–µ—Ä—à–∏–Ω—É, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É.
3. –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π.
4. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---
2. –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ BFS (–ø–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É)
–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ DFS, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å.
```javascript
function findConnectedComponentsBFS(graph) {
    let visited = new Set();
    let components = [];

    function bfs(start) {
        let queue = [start];
        let component = [];

        while (queue.length) {
            let node = queue.shift();
            if (visited.has(node)) continue;

            visited.add(node);
            component.push(node);
            for (let neighbor of graph[node] || []) {
                if (!visited.has(neighbor)) {
                    queue.push(neighbor);
                }
            }
        }
        return component;
    }

    for (let node in graph) {
        if (!visited.has(node)) {
            components.push(bfs(node));
        }
    }

    return components;
}

console.log(findConnectedComponentsBFS(graph)); // [["A", "B", "C"], ["D", "E"], ["F"]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å –≤–º–µ—Å—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–∏.
2. –û–±—Ö–æ–¥–∏–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ.
3. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---
3. –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ –≥—Ä–∞—Ñ–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –º–∞—Ç—Ä–∏—Ü–µ–π —Å–º–µ–∂–Ω–æ—Å—Ç–∏
```javascript
function findComponentsMatrix(graphMatrix) {
    let n = graphMatrix.length;
    let visited = new Array(n).fill(false);
    let components = [];

    function dfs(node, component) {
        visited[node] = true;
        component.push(node);
        for (let neighbor = 0; neighbor < n; neighbor++) {
            if (graphMatrix[node][neighbor] === 1 && !visited[neighbor]) {
                dfs(neighbor, component);
            }
        }
    }

    for (let node = 0; node < n; node++) {
        if (!visited[node]) {
            let component = [];
            dfs(node, component);
            components.push(component);
        }
    }

    return components;
}

const matrixGraph = [
    [0, 1, 0, 0, 0],
    [1, 0, 1, 0, 0],
    [0, 1, 0, 0, 0],
    [0, 0, 0, 0, 1],
    [0, 0, 0, 1, 0]
];

console.log(findComponentsMatrix(matrixGraph)); // [[0, 1, 2], [3, 4]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞.
2. –ü—Ä–∏–º–µ–Ω—è–µ–º DFS –¥–ª—è –æ–±—Ö–æ–¥–∞.
3. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V¬≤) –∏–∑-–∑–∞ –º–∞—Ç—Ä–∏—Ü—ã.
---
4. –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Union-Find (DSU)
–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–æ–ª—å—à–∏—Ö –≥—Ä–∞—Ñ–∞—Ö.
```javascript
class DSU {
    constructor(n) {
        this.parent = Array(n).fill(0).map((_, i) => i);
    }

    find(x) {
        if (this.parent[x] !== x) {
            this.parent[x] = this.find(this.parent[x]);
        }
        return this.parent[x];
    }

    union(x, y) {
        let rootX = this.find(x);
        let rootY = this.find(y);
        if (rootX !== rootY) {
            this.parent[rootX] = rootY;
        }
    }
}

function connectedComponentsDSU(edges, n) {
    let dsu = new DSU(n);

    for (let [a, b] of edges) {
        dsu.union(a, b);
    }

    let components = new Map();
    for (let i = 0; i < n; i++) {
        let root = dsu.find(i);
        if (!components.has(root)) components.set(root, []);
        components.get(root).push(i);
    }

    return Array.from(components.values());
}

const edges = [[0, 1], [1, 2], [3, 4]];
console.log(connectedComponentsDSU(edges, 5)); // [[0, 1, 2], [3, 4]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∂–∞—Ç–∏–µ –ø—É—Ç–∏ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ —Ä–∞–Ω–≥—É.
2. DSU —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∞.
3. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(Œ±(V)) ‚âà O(1).
---
5. –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ (SCC) —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –ö–æ—Å–∞—Ä–∞—é
```javascript
function kosarajuSCC(graph) {
    let visited = new Set();
    let stack = [];

    function dfs1(node) {
        if (visited.has(node)) return;
        visited.add(node);
        for (let neighbor of graph[node] || []) dfs1(neighbor);
        stack.push(node);
    }

    function dfs2(node, component) {
        if (visited.has(node)) return;
        visited.add(node);
        component.push(node);
        for (let neighbor of reversedGraph[node] || []) dfs2(neighbor, component);
    }

    for (let node in graph) dfs1(node);

    let reversedGraph = {};
    for (let node in graph) {
        for (let neighbor of graph[node]) {
            if (!reversedGraph[neighbor]) reversedGraph[neighbor] = [];
            reversedGraph[neighbor].push(node);
        }
    }

    visited.clear();
    let components = [];
    while (stack.length) {
        let node = stack.pop();
        if (!visited.has(node)) {
            let component = [];
            dfs2(node, component);
            components.push(component);
        }
    }

    return components;
}

const directedGraph = {
    A: ["B"],
    B: ["C"],
    C: ["A", "D"],
    D: ["E"],
    E: ["F"],
    F: ["D"]
};

console.log(kosarajuSCC(directedGraph)); // [["A", "B", "C"], ["D", "E", "F"]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤–æ–π–Ω–æ–π DFS –∏ —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É.
2. –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤.
3. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---
6. –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DFS –Ω–∞ –º–Ω–æ–≥–æ—Å–≤—è–∑–Ω–æ–º –≥—Ä–∞—Ñ–µ
```javascript
function findComponentsMultiGraph(graph) {
    let visited = new Set();
    let components = [];

    function dfs(node, component) {
        visited.add(node);
        component.push(node);

        for (let neighbor of graph[node] || []) {
            if (!visited.has(neighbor)) {
                dfs(neighbor, component);
            }
        }
    }

    for (let node in graph) {
        if (!visited.has(node)) {
            let component = [];
            dfs(node, component);
            components.push(component);
        }
    }

    return components;
}

const multiGraph = {
    A: ["B", "C"],
    B: ["A", "C"],
    C: ["A", "B"],
    D: ["E"],
    E: ["D"],
    F: []
};

console.log(findComponentsMultiGraph(multiGraph)); // [["A", "B", "C"], ["D", "E"], ["F"]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã —Å–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞, –∏ –ø—Ä–∏ —ç—Ç–æ–º —É—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–∞—Ñ, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–≥—É—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏.
- –ò—Å–ø–æ–ª—å–∑—É–µ–º DFS –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–∏–º—ã—Ö –≤–µ—Ä—à–∏–Ω –∏ –∏—Ö –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---
7. –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ DFS
```javascript
function findComponentsIterativeDFS(graph) {
    let visited = new Set();
    let components = [];

    function dfs(node) {
        let stack = [node];
        let component = [];

        while (stack.length > 0) {
            let currentNode = stack.pop();
            if (!visited.has(currentNode)) {
                visited.add(currentNode);
                component.push(currentNode);

                for (let neighbor of graph[currentNode] || []) {
                    if (!visited.has(neighbor)) {
                        stack.push(neighbor);
                    }
                }
            }
        }
        return component;
    }

    for (let node in graph) {
        if (!visited.has(node)) {
            components.push(dfs(node));
        }
    }

    return components;
}

const graph2 = {
    A: ["B"],
    B: ["A", "C"],
    C: ["B"],
    D: ["E"],
    E: ["D"],
    F: []
};

console.log(findComponentsIterativeDFS(graph2)); // [["A", "B", "C"], ["D", "E"], ["F"]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –í–º–µ—Å—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–µ–∫ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ DFS.
- –≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å—Ç–µ–∫–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ –∏ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –≥—Ä–∞—Ñ–æ–≤.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---
8. –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BFS
```javascript
function findComponentsBFS(graph) {
    let visited = new Set();
    let components = [];

    function bfs(start) {
        let queue = [start];
        let component = [];

        while (queue.length > 0) {
            let node = queue.shift();
            if (!visited.has(node)) {
                visited.add(node);
                component.push(node);

                for (let neighbor of graph[node] || []) {
                    if (!visited.has(neighbor)) {
                        queue.push(neighbor);
                    }
                }
            }
        }
        return component;
    }

    for (let node in graph) {
        if (!visited.has(node)) {
            components.push(bfs(node));
        }
    }

    return components;
}

const graph3 = {
    A: ["B", "C"],
    B: ["A", "D"],
    C: ["A"],
    D: ["B"],
    E: ["F"],
    F: ["E"]
};

console.log(findComponentsBFS(graph3)); // [["A", "B", "C", "D"], ["E", "F"]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É (BFS) –¥–ª—è –æ–±—Ö–æ–¥–∞ –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –≤ –≥—Ä–∞—Ñ–µ.
- –ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–µ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---
9. –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DFS (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—à–∏–Ω–∞–º)
```javascript
function findSCC(graph) {
    let visited = new Set();
    let stack = [];
    let components = [];

    function dfs(node) {
        visited.add(node);
        for (let neighbor of graph[node] || []) {
            if (!visited.has(neighbor)) {
                dfs(neighbor);
            }
        }
        stack.push(node);
    }

    function reverseGraph(graph) {
        let reversed = {};
        for (let node in graph) {
            for (let neighbor of graph[node]) {
                if (!reversed[neighbor]) reversed[neighbor] = [];
                reversed[neighbor].push(node);
            }
        }
        return reversed;
    }

    for (let node in graph) {
        if (!visited.has(node)) {
            dfs(node);
        }
    }

    let reversedGraph = reverseGraph(graph);
    visited.clear();

    function dfsReverse(node, component) {
        visited.add(node);
        component.push(node);
        for (let neighbor of reversedGraph[node] || []) {
            if (!visited.has(neighbor)) {
                dfsReverse(neighbor, component);
            }
        }
    }

    while (stack.length) {
        let node = stack.pop();
        if (!visited.has(node)) {
            let component = [];
            dfsReverse(node, component);
            components.push(component);
        }
    }

    return components;
}

const directedGraph2 = {
    A: ["B"],
    B: ["C"],
    C: ["A"],
    D: ["E"],
    E: ["F"],
    F: ["D"]
};

console.log(findSCC(directedGraph2)); // [["A", "B", "C"], ["D", "E", "F"]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã –Ω–∞—Ö–æ–¥–∏–º —Å–∏–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–≤—è–∑–Ω–æ—Å—Ç–∏ (SCC) –≤ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ, –∏—Å–ø–æ–ª—å–∑—É—è –¥–≤–æ–π–Ω–æ–π DFS.
- –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –∏—â–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –≥—Ä–∞—Ñ–µ.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---
10. –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –¥–ª—è –≥—Ä–∞—Ñ–∞ —Å –≤–µ—Å–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DFS —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
```javascript
function findWeightedComponents(graph) {
    let visited = new Set();
    let components = [];

    function dfs(node, component) {
        visited.add(node);
        component.push(node);

        for (let neighbor of graph[node] || []) {
            if (!visited.has(neighbor)) {
                dfs(neighbor, component);
            }
        }
    }

    for (let node in graph) {
        if (!visited.has(node)) {
            let component = [];
            dfs(node, component);
            components.push(component);
        }
    }

    return components;
}

const weightedGraph = {
    A: [{ node: "B", weight: 5 }, { node: "C", weight: 10 }],
    B: [{ node: "A", weight: 5 }, { node: "C", weight: 3 }],
    C: [{ node: "A", weight: 10 }, { node: "B", weight: 3 }],
    D: [{ node: "E", weight: 1 }],
    E: [{ node: "D", weight: 1 }],
    F: []
};

console.log(findWeightedComponents(weightedGraph)); // [["A", "B", "C"], ["D", "E"], ["F"]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –î–ª—è –≥—Ä–∞—Ñ–æ–≤ —Å –≤–µ—Å–∞–º–∏ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π DFS, –ø–æ—Å–∫–æ–ª—å–∫—É –≤–µ—Å–∞ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏, –Ω–æ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏.
- –ú—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é –ø–æ–∏—Å–∫–∞ –≤ –≥–ª—É–±–∏–Ω—É (DFS), –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤–µ—Å–∞.
–°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E).
---------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ:
---
‚åõ –ó–∞–¥–∞—á–∞: –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ
–î–∞–Ω–æ: –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ(—Å–ø–∏—Å–æ–∫ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –º–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏).
–ù–∞–π—Ç–∏: –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ—Ä—à–∏–Ω–∞–º–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
---
1. –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –≤ —à–∏—Ä–∏–Ω—É (BFS)
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤.
```javascript
function bfsShortestPath(graph, start, end) {
    let queue = [[start]];
    let visited = new Set();

    while (queue.length > 0) {
        let path = queue.shift();
        let node = path[path.length - 1];

        if (node === end) return path;

        if (!visited.has(node)) {
            visited.add(node);
            for (let neighbor of graph[node] || []) {
                queue.push([...path, neighbor]);
            }
        }
    }

    return null;
}

const graph = {
    A: ["B", "C"],
    B: ["D", "E"],
    C: ["F"],
    D: [],
    E: ["F"],
    F: []
};

console.log(bfsShortestPath(graph, "A", "F")); // ["A", "C", "F"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å (`queue`).
2. –ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—à–∏–Ω—É.
3. –ï—Å–ª–∏ —ç—Ç–æ —Ü–µ–ª–µ–≤–∞—è –≤–µ—Ä—à–∏–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å.
4. –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –µ—ë —Å–æ—Å–µ–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥—å.
5. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E) (–≤–µ—Ä—à–∏–Ω—ã + —Ä—ë–±—Ä–∞).
---
2. –ê–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥—Ä–∞—Ñ–æ–≤ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏ —Ä—ë–±–µ—Ä.
```javascript
function dijkstra(graph, start, end) {
    let distances = {};
    let previous = {};
    let pq = new Set(Object.keys(graph));

    for (let node in graph) distances[node] = Infinity;
    distances[start] = 0;

    while (pq.size) {
        let node = [...pq].reduce((a, b) => (distances[a] < distances[b] ? a : b));
        pq.delete(node);

        if (node === end) {
            let path = [];
            while (node) {
                path.unshift(node);
                node = previous[node];
            }
            return path;
        }

        for (let [neighbor, weight] of Object.entries(graph[node])) {
            let alt = distances[node] + weight;
            if (alt < distances[neighbor]) {
                distances[neighbor] = alt;
                previous[neighbor] = node;
            }
        }
    }

    return null;
}

const graphWeighted = {
    A: { B: 1, C: 4 },
    B: { C: 2, D: 5 },
    C: { D: 1 },
    D: {}
};

console.log(dijkstra(graphWeighted, "A", "D")); // ["A", "B", "C", "D"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (`distances`).
2. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–µ—Ä—à–∏–Ω—ã, –≤—ã–±–∏—Ä–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é.
3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å–µ–¥–µ–π, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—É—Ç—å.
4. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V¬≤) (–∏–ª–∏ O((V + E) log V) —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é).
---
3. –ê–ª–≥–æ—Ä–∏—Ç–º –ë–µ–ª–ª–º–∞–Ω–∞-–§–æ—Ä–¥–∞
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥—Ä–∞—Ñ–æ–≤ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏ (–Ω–æ –±–µ–∑ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤).
```javascript
function bellmanFord(graph, start, end) {
    let distances = {};
    let previous = {};
    for (let node in graph) distances[node] = Infinity;
    distances[start] = 0;

    for (let i = 0; i < Object.keys(graph).length - 1; i++) {
        for (let node in graph) {
            for (let [neighbor, weight] of Object.entries(graph[node])) {
                let alt = distances[node] + weight;
                if (alt < distances[neighbor]) {
                    distances[neighbor] = alt;
                    previous[neighbor] = node;
                }
            }
        }
    }

    let path = [];
    let node = end;
    while (node) {
        path.unshift(node);
        node = previous[node];
    }

    return path.length ? path : null;
}

const graphNegWeights = {
    A: { B: 1, C: 4 },
    B: { C: -2, D: 5 },
    C: { D: 1 },
    D: {}
};

console.log(bellmanFord(graphNegWeights, "A", "D")); // ["A", "B", "C", "D"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∫–∞–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ.
2. –ü—Ä–æ—Ö–æ–¥–∏–º –≥—Ä–∞—Ñ V-1 —Ä–∞–∑, –æ–±–Ω–æ–≤–ª—è—è –ø—É—Ç–∏.
3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å.
4. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(VE).
---
4. –ê–ª–≥–æ—Ä–∏—Ç–º –§–ª–æ–π–¥–∞-–£–æ—Ä—à–µ–ª–ª–∞
–ù–∞—Ö–æ–¥–∏—Ç –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–∏ –≤–µ—Ä—à–∏–Ω.
```javascript
function floydWarshall(graph) {
    let nodes = Object.keys(graph);
    let dist = {};

    nodes.forEach(i => {
        dist[i] = {};
        nodes.forEach(j => {
            dist[i][j] = i === j ? 0 : graph[i]?.[j] ?? Infinity;
        });
    });

    nodes.forEach(k => {
        nodes.forEach(i => {
            nodes.forEach(j => {
                dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);
            });
        });
    });

    return dist;
}

const graphMatrix = {
    A: { B: 3, C: 8 },
    B: { D: 2 },
    C: { D: 1 },
    D: {}
};

console.log(floydWarshall(graphMatrix));
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å–º–µ–∂–Ω–æ—Å—Ç–∏.
2. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã.
3. –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
4 –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V¬≥).
---
5. –ñ–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º A
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–≤—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ).
```javascript
function aStar(graph, start, end, heuristic) {
    let openSet = new Set([start]);
    let cameFrom = {};
    let gScore = {};
    let fScore = {};

    for (let node in graph) {
        gScore[node] = Infinity;
        fScore[node] = Infinity;
    }

    gScore[start] = 0;
    fScore[start] = heuristic(start, end);

    while (openSet.size > 0) {
        let current = [...openSet].reduce((a, b) => (fScore[a] < fScore[b] ? a : b));

        if (current === end) {
            let path = [];
            while (current) {
                path.unshift(current);
                current = cameFrom[current];
            }
            return path;
        }

        openSet.delete(current);
        for (let [neighbor, cost] of Object.entries(graph[current])) {
            let tentativeGScore = gScore[current] + cost;
            if (tentativeGScore < gScore[neighbor]) {
                cameFrom[neighbor] = current;
                gScore[neighbor] = tentativeGScore;
                fScore[neighbor] = gScore[neighbor] + heuristic(neighbor, end);
                openSet.add(neighbor);
            }
        }
    }

    return null;
}

const heuristic = (a, b) => Math.abs(a.charCodeAt(0) - b.charCodeAt(0));

console.log(aStar(graphWeighted, "A", "D", heuristic)); // ["A", "B", "C", "D"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ (`gScore` –∏ `fScore`).
2. –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏.
3. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O((V + E) log V) —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é.
---
6. –ü–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É (DFS) —Å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏.
```javascript
function dfsShortestPath(graph, start, end) {
    let shortestPath = null;

    function dfs(node, path, visited) {
        if (visited.has(node)) return;
        path.push(node);
        visited.add(node);

        if (node === end) {
            if (!shortestPath || path.length < shortestPath.length) {
                shortestPath = [...path];
            }
        } else {
            for (let neighbor of graph[node] || []) {
                dfs(neighbor, path, visited);
            }
        }

        path.pop();
        visited.delete(node);
    }

    dfs(start, [], new Set());
    return shortestPath;
}

const graph = {
    A: ["B", "C"],
    B: ["D", "E"],
    C: ["F"],
    D: [],
    E: ["F"],
    F: []
};

console.log(dfsShortestPath(graph, "A", "F")); // ["A", "C", "F"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞ (DFS).
2. –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫—Ä–∞—Ç—á–∞–π—à–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å.
3. –†–∞–±–æ—Ç–∞–µ—Ç –ø–ª–æ—Ö–æ –¥–ª—è –≤–∑–≤–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω.
4. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V!) –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ.
---
7. –ê–ª–≥–æ—Ä–∏—Ç–º –ô–µ–Ω–∞ (–ø–æ–∏—Å–∫ K –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π)
–ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π.
```javascript
function yenKShortestPaths(graph, start, end, K) {
    let paths = [[start]];
    let shortestPaths = [];

    while (shortestPaths.length < K && paths.length) {
        let path = paths.shift();
        let lastNode = path[path.length - 1];

        if (lastNode === end) {
            shortestPaths.push(path);
        } else {
            for (let neighbor of graph[lastNode] || []) {
                paths.push([...path, neighbor]);
            }
        }

        paths.sort((a, b) => a.length - b.length);
    }

    return shortestPaths;
}

console.log(yenKShortestPaths(graph, "A", "F", 2)); // [["A", "C", "F"], ["A", "B", "E", "F"]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø—É—Ç–µ–π.
2. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º K –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π.
3. –ü–æ–ª–µ–∑–Ω–æ –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∏ —Å–µ—Ç—è—Ö.
4 –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(K * (V + E)).
---
8. –í–æ–ª–Ω–æ–≤–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –õ–∏ (–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –Ω–∞ —Å–µ—Ç–∫–µ)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞—Ö –∏–ª–∏ –Ω–∞ —Ä–µ—à–µ—Ç–∫–∞—Ö.
```javascript
function leeAlgorithm(grid, start, end) {
    let directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];
    let queue = [[start[0], start[1], 0]];
    let rows = grid.length, cols = grid[0].length;
    let visited = Array.from({ length: rows }, () => Array(cols).fill(false));

    while (queue.length) {
        let [x, y, dist] = queue.shift();

        if (x === end[0] && y === end[1]) return dist;

        for (let [dx, dy] of directions) {
            let nx = x + dx, ny = y + dy;
            if (nx >= 0 && ny >= 0 && nx < rows && ny < cols && grid[nx][ny] === 0 && !visited[nx][ny]) {
                visited[nx][ny] = true;
                queue.push([nx, ny, dist + 1]);
            }
        }
    }

    return -1;
}

let grid = [
    [0, 0, 1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
    [1, 1, 0, 0]
];

console.log(leeAlgorithm(grid, [0, 0], [2, 3])); // 4
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–µ—Ç–æ–∫ –∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–æ–≤.
2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É (BFS).
3. –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç **–∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å.
4. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(NM), –≥–¥–µ N –∏ M ‚Äî —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏.
---
9. –î–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (Bidirectional Search)
–£—Å–∫–æ—Ä—è–µ—Ç –ø–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –∑–∞ —Å—á—ë—Ç –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ç –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
```javascript
function bidirectionalSearch(graph, start, end) {
    let forwardQueue = [[start]];
    let backwardQueue = [[end]];
    let visitedForward = new Set([start]);
    let visitedBackward = new Set([end]);

    while (forwardQueue.length && backwardQueue.length) {
        let forwardPath = forwardQueue.shift();
        let backwardPath = backwardQueue.shift();
        let forwardNode = forwardPath[forwardPath.length - 1];
        let backwardNode = backwardPath[backwardPath.length - 1];

        if (visitedForward.has(backwardNode) || visitedBackward.has(forwardNode)) {
            return forwardPath.concat(backwardPath.reverse().slice(1));
        }

        for (let neighbor of graph[forwardNode] || []) {
            if (!visitedForward.has(neighbor)) {
                visitedForward.add(neighbor);
                forwardQueue.push([...forwardPath, neighbor]);
            }
        }

        for (let neighbor of graph[backwardNode] || []) {
            if (!visitedBackward.has(neighbor)) {
                visitedBackward.add(neighbor);
                backwardQueue.push([...backwardPath, neighbor]);
            }
        }
    }

    return null;
}

console.log(bidirectionalSearch(graph, "A", "F")); // ["A", "C", "F"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –î–≤–∞ –ø–æ–∏—Å–∫–∞ (BFS) ‚Äî –æ—Ç –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞.
2. –£—Å–∫–æ—Ä—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –±–æ–ª—å—à–∏—Ö –≥—Ä–∞—Ñ–∞—Ö.
3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–æ–∏—Å–∫–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è.
4. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(2^(V/2)) –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ, –Ω–æ –±—ã—Å—Ç—Ä–µ–µ BFS.
---
10. –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –º–µ—Ç–æ–¥–æ–º A* —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é
–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ A* —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é.
```javascript
function aStarPriorityQueue(graph, start, end, heuristic) {
    let openSet = new Map();
    let cameFrom = {};
    let gScore = {}, fScore = {};

    for (let node in graph) {
        gScore[node] = Infinity;
        fScore[node] = Infinity;
    }

    gScore[start] = 0;
    fScore[start] = heuristic(start, end);
    openSet.set(start, fScore[start]);

    while (openSet.size) {
        let current = [...openSet.entries()].reduce((a, b) => (a[1] < b[1] ? a : b))[0];

        if (current === end) {
            let path = [];
            while (current) {
                path.unshift(current);
                current = cameFrom[current];
            }
            return path;
        }

        openSet.delete(current);
        for (let [neighbor, cost] of Object.entries(graph[current])) {
            let tempGScore = gScore[current] + cost;
            if (tempGScore < gScore[neighbor]) {
                cameFrom[neighbor] = current;
                gScore[neighbor] = tempGScore;
                fScore[neighbor] = gScore[neighbor] + heuristic(neighbor, end);
                openSet.set(neighbor, fScore[neighbor]);
            }
        }
    }

    return null;
}

console.log(aStarPriorityQueue(graphWeighted, "A", "D", heuristic));
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
2. –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—É—Ç–∏ —Å —ç–≤—Ä–∏—Å—Ç–∏–∫–æ–π.
3. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O((V + E) log V) —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é.
---------------------------------------------------------------------------------------------
