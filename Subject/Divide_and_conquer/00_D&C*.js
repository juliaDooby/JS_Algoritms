--------------------------------------------------------------------------------------------- 
‚ãô ‚ùç –ê–ª–≥–æ—Ä–∏—Ç–º—ã ¬´–†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π¬ª:
---
–≠—Ç–æ –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–¥–∞—á–∞ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—à–∞—é—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ, –∞ –∑–∞—Ç–µ–º –∏—Ö —Ä–µ—à–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
0. –ó–∞–¥–∞—á–∞: –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (Quick Sort)
‚åõ –ó–∞–¥–∞—á–∞: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function quickSort(arr) {
    if (arr.length <= 1) return arr;
    let pivot = arr[arr.length - 1];
    let left = [], right = [];

    for (let i = 0; i < arr.length - 1; i++) {
        if (arr[i] < pivot) left.push(arr[i]);
        else right.push(arr[i]);
    }

    return [...quickSort(left), pivot, ...quickSort(right)];
}

console.log(quickSort([3, 6, 8, 10, 1, 2, 1])); // –í—ã–≤–æ–¥–∏—Ç [1, 1, 2, 3, 6, 8, 10]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (pivot), —Ä–∞–∑–¥–µ–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ –¥–≤–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞: –º–µ–Ω—å—à–µ –∏ –±–æ–ª—å—à–µ –æ–ø–æ—Ä–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞. –î–∞–ª–µ–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ—Ç –∂–µ –ø—Ä–æ—Ü–µ—Å—Å –∫ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞–º.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
‚ãô ‚ùç –ê–ª–≥–æ—Ä–∏—Ç–º—ã ¬´–†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π¬ª:
---
1. –ó–∞–¥–∞—á–∞: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º (Merge Sort)
‚åõ –ó–∞–¥–∞—á–∞: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ª–∏—è–Ω–∏–µ–º.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function mergeSort(arr) {
    if (arr.length <= 1) return arr;

    const middle = Math.floor(arr.length / 2);
    const left = mergeSort(arr.slice(0, middle));
    const right = mergeSort(arr.slice(middle));

    return merge(left, right);
}

function merge(left, right) {
    let result = [];
    let i = 0, j = 0;

    while (i < left.length && j < right.length) {
        if (left[i] < right[j]) result.push(left[i++]);
        else result.push(right[j++]);
    }

    return result.concat(left.slice(i), right.slice(j));
}

console.log(mergeSort([3, 6, 8, 10, 1, 2, 1])); // –í—ã–≤–æ–¥–∏—Ç [1, 1, 2, 3, 6, 8, 10]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–¥–µ–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ –¥–≤–µ –ø–æ–ª–æ–≤–∏–Ω—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ, –∞ –∑–∞—Ç–µ–º —Å–ª–∏–≤–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
‚ãô ‚ùç –ê–ª–≥–æ—Ä–∏—Ç–º—ã ¬´–†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π¬ª:
---
2. –ó–∞–¥–∞—á–∞: –ü–æ–∏—Å–∫ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ (–±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function binarySearch(arr, target) {
    let left = 0, right = arr.length - 1;

    while (left <= right) {
        let mid = Math.floor((left + right) / 2);

        if (arr[mid] === target) return mid;
        if (arr[mid] < target) left = mid + 1;
        else right = mid - 1;
    }

    return -1; // –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
}

console.log(binarySearch([1, 2, 3, 4, 5, 6, 7], 5)); // –í—ã–≤–æ–¥–∏—Ç 4
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–µ–ª–∏–º –º–∞—Å—Å–∏–≤ –ø–æ–ø–æ–ª–∞–º, –∏—â–µ–º –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ —Å—É–∂–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞, –ø–æ–∫–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
‚ãô ‚ùç –ê–ª–≥–æ—Ä–∏—Ç–º—ã ¬´–†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π¬ª:
---
3. –ó–∞–¥–∞—á–∞: –ü–æ–¥—Å—á–µ—Ç –∏–Ω–≤–µ—Ä—Å–∏–π
‚åõ –ó–∞–¥–∞—á–∞: –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Ä—Å–∏–π –≤ –º–∞—Å—Å–∏–≤–µ. –ò–Ω–≤–µ—Ä—Å–∏—è ‚Äî —ç—Ç–æ –ø–∞—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (i, j), –≥–¥–µ i < j –∏ arr[i] > arr[j].
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function countInversions(arr) {
    let [sortedArr, count] = mergeSortAndCount(arr);
    return count;
}

function mergeSortAndCount(arr) {
    if (arr.length <= 1) return [arr, 0];
    const middle = Math.floor(arr.length / 2);
    const [left, leftCount] = mergeSortAndCount(arr.slice(0, middle));
    const [right, rightCount] = mergeSortAndCount(arr.slice(middle));
    const [merged, splitCount] = mergeAndCount(left, right);

    return [merged, leftCount + rightCount + splitCount];
}

function mergeAndCount(left, right) {
    let result = [], i = 0, j = 0, count = 0;

    while (i < left.length && j < right.length) {
        if (left[i] <= right[j]) result.push(left[i++]);
        else {
            result.push(right[j++]);
            count += left.length - i;
        }
    }

    return [result.concat(left.slice(i), right.slice(j)), count];
}

console.log(countInversions([1, 20, 6, 4, 5])); // –í—ã–≤–æ–¥–∏—Ç 5
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ª–∏—è–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Ä—Å–∏–π –ø—Ä–∏ —Å–ª–∏—è–Ω–∏–∏ –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–º–∞—Å—Å–∏–≤–æ–≤.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
‚ãô ‚ùç –ê–ª–≥–æ—Ä–∏—Ç–º—ã ¬´–†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π¬ª:
---
4. –ó–∞–¥–∞—á–∞: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ —á–∞—Å—Ç–∏
‚åõ –ó–∞–¥–∞—á–∞: –†–∞–∑–¥–µ–ª–∏—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞ –¥–≤–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–µ–π –≤ –∏—Ö —Å—É–º–º–∞—Ö.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function minDifferencePartition(arr) {
    const totalSum = arr.reduce((sum, num) => sum + num, 0);
    const target = Math.floor(totalSum / 2);
    const dp = Array(arr.length + 1).fill(null).map(() => Array(target + 1).fill(false));
    dp[0][0] = true;

    for (let i = 1; i <= arr.length; i++) {
        for (let j = 0; j <= target; j++) {
            dp[i][j] = dp[i - 1][j];
            if (j >= arr[i - 1]) dp[i][j] = dp[i][j] || dp[i - 1][j - arr[i - 1]];
        }
    }

    for (let j = target; j >= 0; j--) {
        if (dp[arr.length][j]) {
            return totalSum - 2 * j;
        }
    }
}

console.log(minDifferencePartition([1, 2, 3, 9])); // –í—ã–≤–æ–¥–∏—Ç 3
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –≠—Ç–æ –∑–∞–¥–∞—á–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ –æ–Ω–∞ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø "—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π". –ú—ã –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ –±–ª–∏–∂–µ –∫ –ø–æ–ª–æ–≤–∏–Ω–µ –æ–±—â–µ–π —Å—É–º–º—ã.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
‚ãô ‚ùç –ê–ª–≥–æ—Ä–∏—Ç–º—ã ¬´–†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π¬ª:
---
5. –ó–∞–¥–∞—á–∞: –ü–æ–¥—Å—á—ë—Ç —á–∏—Å–µ–ª —Å –Ω—É–ª—è–º–∏ –≤ –∫–æ–Ω—Ü–µ
‚åõ –ó–∞–¥–∞—á–∞: –î–∞–Ω–æ —á–∏—Å–ª–æ. –ù–∞–π—Ç–∏, —Å–∫–æ–ª—å–∫–æ –Ω—É–ª–µ–π –≤ –∫–æ–Ω—Ü–µ –µ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function trailingZeroes(n) {
    let count = 0;
    while (n >= 5) {
        n = Math.floor(n / 5);
        count += n;
    }
    return count;
}

console.log(trailingZeroes(100)); // –í—ã–≤–æ–¥–∏—Ç 24
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ö–∞–∂–¥–æ–µ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 5 —É–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —á–∏—Å–µ–ª, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–ª—å –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
‚ãô ‚ùç –ê–ª–≥–æ—Ä–∏—Ç–º—ã ¬´–†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π¬ª:
---
6. –ó–∞–¥–∞—á–∞: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –æ–±—â–µ–≥–æ –¥–µ–ª–∏—Ç–µ–ª—è (–ù–û–î)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –Ω–∞–∏–±–æ–ª—å—à–∏–π –æ–±—â–∏–π –¥–µ–ª–∏—Ç–µ–ª—å (–ù–û–î) –¥–≤—É—Ö —á–∏—Å–µ–ª —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ï–≤–∫–ª–∏–¥–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function gcd(a, b) {
    if (b === 0) return a;
    return gcd(b, a % b);
}

console.log(gcd(56, 98)); // –í—ã–≤–æ–¥–∏—Ç 14
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ê–ª–≥–æ—Ä–∏—Ç–º –ï–≤–∫–ª–∏–¥–∞ –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–µ "—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π", –≥–¥–µ –º—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–µ–ª–∏–º –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ –Ω–∞ –º–µ–Ω—å—à–µ–µ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–µ —Å—Ç–∞–Ω–µ—Ç —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
‚ãô ‚ùç –ê–ª–≥–æ—Ä–∏—Ç–º—ã ¬´–†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π¬ª:
---
7. –ó–∞–¥–∞—á–∞: –ù–∞–∏–±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –Ω–∞–∏–±–æ–ª—å—à—É—é —Å—É–º–º—É –ø–æ–¥–º–∞—Å—Å–∏–≤–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function maxSubArraySum(arr, maxSum) {
    let sum = 0, start = 0, max = 0;

    for (let end = 0; end < arr.length; end++) {
        sum += arr[end];

        while (sum > maxSum) {
            sum -= arr[start++];
        }

        max = Math.max(max, sum);
    }

    return max;
}

console.log(maxSubArraySum([1, 2, 3, 4, 5], 10)); // –í—ã–≤–æ–¥–∏—Ç 10
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞ –∏ —Ä–µ–∫—É—Ä—Å–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
‚ãô ‚ùç –ê–ª–≥–æ—Ä–∏—Ç–º—ã ¬´–†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π¬ª:
---
8. –ó–∞–¥–∞—á–∞: –ù–∞–∏–º–µ–Ω—å—à–∏–π –æ–±—â–∏–π –∫—Ä–∞—Ç–Ω—ã–π (–ù–û–ö)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –æ–±—â–µ–µ –∫—Ä–∞—Ç–Ω–æ–µ –¥–≤—É—Ö —á–∏—Å–µ–ª.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function lcm(a, b) {
    return (a * b) / gcd(a, b);
}

function gcd(a, b) {
    if (b === 0) return a;
    return gcd(b, a % b);
}

console.log(lcm(12, 18)); // –í—ã–≤–æ–¥–∏—Ç 36
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ù–û–ö –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤—è–∑—å —Å –ù–û–î. –ú—ã —É–º–Ω–æ–∂–∞–µ–º –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –¥–µ–ª–∏–º –Ω–∞ –∏—Ö –ù–û–î.
--------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------- 
‚ãô ‚ùç –ê–ª–≥–æ—Ä–∏—Ç–º—ã ¬´–†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π¬ª:
---
9. –ó–∞–¥–∞—á–∞: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –ø–æ–¥–º–∞—Ç—Ä–∏—Ü—ã
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –ø–æ–¥–º–∞—Ç—Ä–∏—Ü—ã –≤ –¥–≤—É–º–µ—Ä–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function maxSumSubMatrix(matrix) {
    let maxSum = -Infinity;
    let n = matrix.length;
    let m = matrix[0].length;

    for (let top = 0; top < n; top++) {

 let temp = Array(m).fill(0);
        for (let bottom = top; bottom < n; bottom++) {
            for (let i = 0; i < m; i++) {
                temp[i] += matrix[bottom][i];
            }
            maxSum = Math.max(maxSum, maxSubArraySum(temp));
        }
    }

    return maxSum;
}

function maxSubArraySum(arr) {
    let max = -Infinity, sum = 0;
    for (let num of arr) {
        sum = Math.max(num, sum + num);
        max = Math.max(max, sum);
    }
    return max;
}

console.log(maxSumSubMatrix([[1, -2, 1], [1, -1, 3], [3, 1, -1]])); // –í—ã–≤–æ–¥–∏—Ç 5
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ê–ª–≥–æ—Ä–∏—Ç–º —Å–Ω–∞—á–∞–ª–∞ —Å—É–º–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ—Ç –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–æ–∑–º–æ–∂–Ω–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤ –¥–≤—É–º–µ—Ä–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.
–ê–ª–≥–æ—Ä–∏—Ç–º—ã "–†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π" —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–µ—à–∞—é—Ç –∑–∞–¥–∞—á–∏, —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–ª–µ–º—É –Ω–∞ –º–µ–Ω—å—à–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∏—Ö.
--------------------------------------------------------------------------------------------- 
