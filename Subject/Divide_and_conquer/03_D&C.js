--------------------------------------------------------------------------------------------- 
‚ãô ‚ùç –ê–ª–≥–æ—Ä–∏—Ç–º—ã ¬´–†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π¬ª:
---
3. –ó–∞–¥–∞—á–∞: –ü–æ–¥—Å—á–µ—Ç –∏–Ω–≤–µ—Ä—Å–∏–π
‚åõ –ó–∞–¥–∞—á–∞: –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Ä—Å–∏–π –≤ –º–∞—Å—Å–∏–≤–µ. –ò–Ω–≤–µ—Ä—Å–∏—è ‚Äî —ç—Ç–æ –ø–∞—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (i, j), –≥–¥–µ i < j –∏ arr[i] > arr[j].
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function countInversions(arr) {
    let [sortedArr, count] = mergeSortAndCount(arr);
    return count;
}

function mergeSortAndCount(arr) {
    if (arr.length <= 1) return [arr, 0];
    const middle = Math.floor(arr.length / 2);
    const [left, leftCount] = mergeSortAndCount(arr.slice(0, middle));
    const [right, rightCount] = mergeSortAndCount(arr.slice(middle));
    const [merged, splitCount] = mergeAndCount(left, right);

    return [merged, leftCount + rightCount + splitCount];
}

function mergeAndCount(left, right) {
    let result = [], i = 0, j = 0, count = 0;

    while (i < left.length && j < right.length) {
        if (left[i] <= right[j]) result.push(left[i++]);
        else {
            result.push(right[j++]);
            count += left.length - i;
        }
    }

    return [result.concat(left.slice(i), right.slice(j)), count];
}

console.log(countInversions([1, 20, 6, 4, 5])); // –í—ã–≤–æ–¥–∏—Ç 5
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ª–∏—è–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Ä—Å–∏–π –ø—Ä–∏ —Å–ª–∏—è–Ω–∏–∏ –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–º–∞—Å—Å–∏–≤–æ–≤.
--------------------------------------------------------------------------------------------- 
