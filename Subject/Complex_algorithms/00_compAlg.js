---------------------------------------------------------------------------------------------
üìå [–°–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã]:
---------------------
‚ãô ‚ùç –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–±–æ—Ä–∞:
---
0. –ó–∞–¥–∞—á–∞: –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –ø–æ–¥–º–∞—Å—Å–∏–≤–∞
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –ø–æ–¥–º–∞—Å—Å–∏–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π –≤ –º–∞—Å—Å–∏–≤–µ —á–∏—Å–µ–ª.
üéØ –†–µ—à–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º –ø–µ—Ä–µ–±–æ—Ä–æ–º:
```javascript
function maxSubarraySum(arr) {
    let maxSum = -Infinity; // –ù–∞—á–∞–ª—å–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞

    for (let i = 0; i < arr.length; i++) {
        for (let j = i; j < arr.length; j++) {
            let currentSum = 0;
            for (let k = i; k <= j; k++) {
                currentSum += arr[k];
            }
            maxSum = Math.max(maxSum, currentSum);
        }
    }
    return maxSum;
}

const arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4];
console.log(maxSubarraySum(arr)); // –í—ã–≤–æ–¥–∏—Ç 6 (–ø–æ–¥–º–∞—Å—Å–∏–≤ [4, -1, 2, 1])
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Ö–æ–¥–∏–º —á–µ—Ä–µ–∑ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–¥–º–∞—Å—Å–∏–≤—ã —Å –ø–æ–º–æ—â—å—é —Ç—Ä–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –∏ —Å—á–∏—Ç–∞–µ–º –∏—Ö —Å—É–º–º—ã.
–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –ö–∞–¥–∞–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ –∑–∞ O(n):
```javascript
function maxSubarraySumOptimized(arr) {
    let maxSum = arr[0];
    let currentSum = arr[0];

    for (let i = 1; i < arr.length; i++) {
        currentSum = Math.max(arr[i], currentSum + arr[i]);
        maxSum = Math.max(maxSum, currentSum);
    }
    return maxSum;
}

console.log(maxSubarraySumOptimized(arr)); // –í—ã–≤–æ–¥–∏—Ç 6
```
---------------------------------------------------------------------------------------------
