---------------------------------------------------------------------------------------------
üìå [–°–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã]:
---------------------
‚ãô ‚ùç –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–±–æ—Ä–∞:
---
6. –ó–∞–¥–∞—á–∞: –°—É–º–º–∞ —á–∏—Å–µ–ª –≤ —Å–æ—á–µ—Ç–∞–Ω–∏—è—Ö
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –≤—Å–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è —á–∏—Å–µ–ª –∏–∑ –º–∞—Å—Å–∏–≤–∞, —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º—É —á–∏—Å–ª—É.
üéØ –†–µ—à–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º –ø–µ—Ä–µ–±–æ—Ä–æ–º:
```javascript
function combinationSum(arr, target) {
    const result = [];

    function findCombination(start, currentSum, currentCombo) {
        if (currentSum === target) {
            result.push([...currentCombo]);
            return;
        }
        for (let i = start; i < arr.length; i++) {
            if (currentSum + arr[i] > target) continue;
            currentCombo.push(arr[i]);
            findCombination(i, currentSum + arr[i], currentCombo);
            currentCombo.pop();
        }
    }

    findCombination(0, 0, []);
    return result;
}

console.log(combinationSum([2, 3, 6, 7], 7)); // –í—ã–≤–æ–¥–∏—Ç [[7], [2, 2, 3]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è —á–∏—Å–µ–ª –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–µ, —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ —Ü–µ–ª–µ–≤–æ–º—É —á–∏—Å–ª—É.
---------------------------------------------------------------------------------------------
