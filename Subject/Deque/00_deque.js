---------------------------------------------------------------------------------------------
‚ãô ‚ùç –î–µ–∫:
---
–î–µ–∫ (Deque) –≤ JavaScript:
üîπ –ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–∫?
–î–µ–∫ (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å, deque ‚Äî double-ended queue) ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –≤ –∫–æ—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å –æ–±–æ–∏—Ö –∫–æ–Ω—Ü–æ–≤. –î–µ–∫ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ç–µ–∫–∞ (LIFO) –∏ –æ—á–µ—Ä–µ–¥–∏ (FIFO).
üõ† –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–∫–∞
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ (`unshift()`) –∏ –≤ –∫–æ–Ω–µ—Ü (`push()`).
- –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –Ω–∞—á–∞–ª–∞ (`shift()`) –∏ –∏–∑ –∫–æ–Ω—Ü–∞ (`pop()`).
- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤–æ–≥–æ (`front()`) –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (`back()`) —ç–ª–µ–º–µ–Ω—Ç–∞.
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É (`isEmpty()`).
---
üéØ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–∫–∞
JavaScript –Ω–µ –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ `Deque`, –Ω–æ –º—ã –º–æ–∂–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–≥–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Å—Å–∏–≤–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞.
üéØ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –º–∞—Å—Å–∏–≤–µ
```js
class Deque {
  constructor() {
    this.items = [];
  }

  pushBack(item) { this.items.push(item); }  // –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü
  pushFront(item) { this.items.unshift(item); } // –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ
  popBack() { return this.items.pop(); } // –£–¥–∞–ª–∏—Ç—å —Å –∫–æ–Ω—Ü–∞
  popFront() { return this.items.shift(); } // –£–¥–∞–ª–∏—Ç—å —Å –Ω–∞—á–∞–ª–∞
  front() { return this.items[0]; } // –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
  back() { return this.items[this.items.length - 1]; } // –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
  isEmpty() { return this.items.length === 0; } // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
  size() { return this.items.length; } // –†–∞–∑–º–µ—Ä –¥–µ–∫–∞
  display() { console.log(this.items); } // –í—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
}

const deque = new Deque();
deque.pushFront(1);
deque.pushBack(2);
deque.pushFront(3);
deque.display(); // [3, 1, 2]
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –î–µ–∫:
---
1Ô∏è‚É£ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–∫–∞ —Å –ø–æ–º–æ—â—å—é –æ–±—ä–µ–∫—Ç–∞ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–∫—Ç–∞ (–±–µ–∑ `unshift()`, –∫–æ—Ç–æ—Ä—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π).
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class Deque {
  constructor() {
    this.items = {};
    this.frontIndex = 0;
    this.backIndex = 0;
  }

  pushFront(item) {
    this.frontIndex--;
    this.items[this.frontIndex] = item;
  }

  pushBack(item) {
    this.items[this.backIndex] = item;
    this.backIndex++;
  }

  popFront() {
    if (this.isEmpty()) return undefined;
    const item = this.items[this.frontIndex];
    delete this.items[this.frontIndex];
    this.frontIndex++;
    return item;
  }

  popBack() {
    if (this.isEmpty()) return undefined;
    this.backIndex--;
    const item = this.items[this.backIndex];
    delete this.items[this.backIndex];
    return item;
  }

  isEmpty() { return this.frontIndex === this.backIndex; }
  size() { return this.backIndex - this.frontIndex; }
  front() { return this.items[this.frontIndex]; }
  back() { return this.items[this.backIndex - 1]; }
}

const deque = new Deque();
deque.pushFront(10);
deque.pushBack(20);
console.log(deque.popFront()); // 10
console.log(deque.popBack()); // 20
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –î–µ–∫:
---
2Ô∏è‚É£ –ü–∞–ª–∏–Ω–¥—Ä–æ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–µ–∫–∞
‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º (—á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã).
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const isPalindrome = (str) => {
  const deque = new Deque();
  for (let char of str) deque.pushBack(char);

  while (deque.size() > 1) {
    if (deque.popFront() !== deque.popBack()) return false;
  }
  return true;
};

console.log(isPalindrome("racecar")); // true
console.log(isPalindrome("hello"));   // false
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –î–µ–∫:
---
3Ô∏è‚É£ –ò–º–∏—Ç–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
‚åõ –ó–∞–¥–∞—á–∞: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–∫ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class PriorityQueue {
  constructor() {
    this.deque = new Deque();
  }

  enqueue(item, isHighPriority = false) {
    isHighPriority ? this.deque.pushFront(item) : this.deque.pushBack(item);
  }

  dequeue() { return this.deque.popFront(); }
}

const pq = new PriorityQueue();
pq.enqueue("–æ–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞");
pq.enqueue("—Å—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞", true);
console.log(pq.dequeue()); // "—Å—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞"
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –î–µ–∫:
---
4Ô∏è‚É£ –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–µ–∫ –¥–ª—è –∑–∞–¥–∞—á —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class TaskManager {
  constructor() {
    this.deque = new Deque();
  }

  addTask(task) { this.deque.pushBack(task); }
  undoTask() { return this.deque.popBack(); }
}

const tasks = new TaskManager();
tasks.addTask("–ó–∞–¥–∞—á–∞ 1");
tasks.addTask("–ó–∞–¥–∞—á–∞ 2");
console.log(tasks.undoTask()); // "–ó–∞–¥–∞—á–∞ 2"
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –î–µ–∫:
---
5Ô∏è‚É£ –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤
‚åõ –ó–∞–¥–∞—á–∞: –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–µ–∫–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const reverseString = (str) => {
  const deque = new Deque();
  for (let char of str) deque.pushFront(char);

  let reversed = "";
  while (!deque.isEmpty()) reversed += deque.popFront();
  return reversed;
};

console.log(reverseString("hello")); // "olleh"
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –î–µ–∫:
---
6Ô∏è‚É£ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ –º–∞—Å—Å–∏–≤–∞
‚åõ –ó–∞–¥–∞—á–∞: –°–¥–≤–∏–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ –≤–ø—Ä–∞–≤–æ –Ω–∞ `k` –ø–æ–∑–∏—Ü–∏–π.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
const rotateArray = (arr, k) => {
  const deque = new Deque();
  for (let num of arr) deque.pushBack(num);

  for (let i = 0; i < k; i++) deque.pushFront(deque.popBack());

  return [...deque.items];
};

console.log(rotateArray([1, 2, 3, 4, 5], 2)); // [4, 5, 1, 2, 3]
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –î–µ–∫:
---
7Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –∫—ç—à–∞ (LRU Cache)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å LRU-–∫–µ—à.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class LRUCache {
  constructor(size) {
    this.deque = new Deque();
    this.size = size;
    this.cache = new Set();
  }

  accessPage(page) {
    if (this.cache.has(page)) {
      this.deque.popFront(page);
      this.cache.delete(page);
    } else if (this.deque.size() === this.size) {
      this.cache.delete(this.deque.popBack());
    }

    this.deque.pushFront(page);
    this.cache.add(page);
  }

  display() { console.log([...this.deque.items]); }
}

const cache = new LRUCache(3);
cache.accessPage(1);
cache.accessPage(2);
cache.accessPage(3);
cache.accessPage(4);
cache.display(); // [4, 3, 2]
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –î–µ–∫:
---
8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–æ–±–æ–∫
```js
const isBalanced = (str) => {
  const deque = new Deque();
  for (let char of str) {
    if (char === '(') deque.pushBack(char);
    else if (char === ')') {
      if (deque.isEmpty()) return false;
      deque.popBack();
    }
  }
  return deque.isEmpty();
};

console.log(isBalanced("(())")); // true
console.log(isBalanced("(()")) ; // false
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –î–µ–∫:
---
9Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è —Ö–æ–¥–∞ –∑–º–µ–π–∫–∏ (Snake Game) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–µ–∫–∞
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è `Deque`.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class SnakeGame {
  constructor() {
    this.snake = new Deque();
    this.snake.pushBack([0, 0]); // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–º–µ–π–∫–∏
    this.directions = { U: [-1, 0], D: [1, 0], L: [0, -1], R: [0, 1] };
  }

  move(direction) {
    let head = this.snake.back();
    let newHead = [head[0] + this.directions[direction][0], head[1] + this.directions[direction][1]];

    this.snake.pushBack(newHead);
    this.snake.popFront(); // –£–¥–∞–ª—è–µ–º —Ö–≤–æ—Å—Ç (–µ—Å–ª–∏ –Ω–µ —Å—ä–µ–ª–∏ –µ–¥—É)

    return newHead;
  }

  display() {
    console.log([...this.snake.items]);
  }
}

const game = new SnakeGame();
game.move("R"); // –î–≤–∏–≥–∞–µ–º –∑–º–µ–π–∫—É –≤–ø—Ä–∞–≤–æ
game.move("D"); // –î–≤–∏–≥–∞–µ–º –≤–Ω–∏–∑
game.display(); // [[0,1], [1,1]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `Deque` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–µ–ª–∞ –∑–º–µ–π–∫–∏.
- –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥–æ–ª–æ–≤—É (`pushBack()`), —É–¥–∞–ª—è–µ–º —Ö–≤–æ—Å—Ç (`popFront()`), –µ—Å–ª–∏ –∑–º–µ–π–∫–∞ –Ω–µ —Å—ä–µ–ª–∞ –µ–¥—É.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –î–µ–∫:
---
üîü –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π (Undo/Redo)
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º Undo / Redo —Å –ø–æ–º–æ—â—å—é –¥–µ–∫–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
class HistoryManager {
  constructor() {
    this.undoStack = new Deque();
    this.redoStack = new Deque();
  }

  performAction(action) {
    this.undoStack.pushBack(action);
    this.redoStack = new Deque(); // –û—á–∏—Å—Ç–∏—Ç—å Redo-—Å—Ç–µ–∫ –ø–æ—Å–ª–µ –Ω–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  }

  undo() {
    if (!this.undoStack.isEmpty()) {
      let lastAction = this.undoStack.popBack();
      this.redoStack.pushBack(lastAction);
      return `–û—Ç–º–µ–Ω–µ–Ω–æ: ${lastAction}`;
    }
    return "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å";
  }

  redo() {
    if (!this.redoStack.isEmpty()) {
      let redoAction = this.redoStack.popBack();
      this.undoStack.pushBack(redoAction);
      return `–ü–æ–≤—Ç–æ—Ä–µ–Ω–æ: ${redoAction}`;
    }
    return "–ù–µ—á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å";
  }

  displayHistory() {
    console.log("–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π:", [...this.undoStack.items]);
  }
}

const history = new HistoryManager();
history.performAction("–û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª");
history.performAction("–ù–∞–ø–∏—Å–∞–Ω –∫–æ–¥");
console.log(history.undo()); // "–û—Ç–º–µ–Ω–µ–Ω–æ: –ù–∞–ø–∏—Å–∞–Ω –∫–æ–¥"
console.log(history.redo()); // "–ü–æ–≤—Ç–æ—Ä–µ–Ω–æ: –ù–∞–ø–∏—Å–∞–Ω –∫–æ–¥"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ –¥–µ–∫–∞: `undoStack` (–¥–ª—è –æ—Ç–º–µ–Ω—ã) –∏ `redoStack` (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è).
- –ü—Ä–∏ –Ω–æ–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–∏ –æ—á–∏—â–∞–µ–º `redoStack`, —Ç.–∫. –ø–æ—Å–ª–µ –Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å—Ç–∞—Ä—ã–µ "–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è" —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã.
–î–µ–∫ ‚Äî –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–µ–π—Å—Ç–≤–∏–π, –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç—Ä–æ–∫, —Å–∏–º—É–ª—è—Ü–∏–µ–π –∏–≥—Ä –∏ –¥–∞–∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –ø–æ–∏—Å–∫–∞!
---------------------------------------------------------------------------------------------
