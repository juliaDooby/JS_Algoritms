--------------------------------------------------------------------------------------------- 
‚ãô ‚ùç –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:
---
4. –ó–∞–¥–∞—á–∞: –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ (–ü–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π)
‚åõ –ó–∞–¥–∞—á–∞: –î–∞–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª. –ù—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ –Ω–∞ –¥–≤–∞ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ç–∞–∫, —á—Ç–æ–±—ã —Å—É–º–º–∞ —á–∏—Å–µ–ª –≤ –∫–∞–∂–¥–æ–º –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–µ –±—ã–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function canPartition(nums) {
    let sum = nums.reduce((a, b) => a + b, 0);
    if (sum % 2 !== 0) return false;

    let target = sum / 2;
    let dp = Array(target + 1).fill(false);
    dp[0] = true;

    for (let num of nums) {
        for (let j = target; j >= num; j--) {
            dp[j] = dp[j] || dp[j - num];
        }
    }

    return dp[target];
}

console.log(canPartition([1, 5, 11, 5])); // –í—ã–≤–æ–¥–∏—Ç true
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ú—ã –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–Ω–∞ –ø–æ–ª–æ–≤–∏–Ω–µ –æ–±—â–µ–π —Å—É–º–º—ã. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ.
--------------------------------------------------------------------------------------------- 
