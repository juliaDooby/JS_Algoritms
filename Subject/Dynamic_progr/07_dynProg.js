--------------------------------------------------------------------------------------------- 
⋙ ❍ Динамическое программирование:
---
7. Задача: Наибольшая общая подпоследовательность
⌛ Задача: Даны две строки, нужно найти их наибольшую общую подпоследовательность.
🎯 Решение:
```javascript
function longestCommonSubsequence(text1, text2) {
    let dp = Array(text1.length + 1).fill(null).map(() => Array(text2.length + 1).fill(0));

    for (let i = 1; i <= text1.length; i++) {
        for (let j = 1; j <= text2.length; j++) {
            if (text1[i - 1] === text2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    return dp[text1.length][text2.length];
}

console.log(longestCommonSubsequence("abcde", "ace")); // Выводит 3
```
Объяснение: Используем таблицу для нахождения длины наибольшей общей подпоследовательности. На каждом шаге обновляем таблицу на основе предыдущих значений.
--------------------------------------------------------------------------------------------- 
