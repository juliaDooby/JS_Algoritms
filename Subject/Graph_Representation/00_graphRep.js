---------------------------------------------------------------------------------------------
⋙ ❍ Представление графа в памяти компьютера:
---
Графы могут быть представлены в памяти несколькими способами, включая списки смежности и матрицы смежности. Для каждой задачи я объясню решение и представлю пример кода.
1. ⌛ Задача: Представление графа с использованием матрицы смежности
Представьте неориентированный граф с 4 вершинами, где вершины соединены следующим образом: 0 - 1, 0 - 2, 1 - 3.
🎯 Решение:
Матрица смежности — это двумерный массив, где строка i и столбец j содержат 1, если между вершинами i и j есть ребро, и 0, если нет.
```javascript
const graph = [
  [0, 1, 1, 0], // Вершина 0 соединена с вершинами 1 и 2
  [1, 0, 0, 1], // Вершина 1 соединена с вершинами 0 и 3
  [1, 0, 0, 0], // Вершина 2 соединена с вершинами 0
  [0, 1, 0, 0]  // Вершина 3 соединена с вершинами 1
];

console.log(graph);
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Представление графа в памяти компьютера:
---
2. ⌛ Задача: Представление направленного графа с помощью списка смежности
Создайте направленный граф с 3 вершинами, где 0 -> 1, 1 -> 2.
🎯 Решение:
Список смежности — это массив, где каждый элемент — это массив смежных вершин для данной вершины.
```javascript
const graph = {
  0: [1], // Вершина 0 соединена с вершиной 1
  1: [2], // Вершина 1 соединена с вершиной 2
  2: []   // Вершина 2 не соединена с другими вершинами
};

console.log(graph);
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Представление графа в памяти компьютера:
---
3. ⌛ Задача: Поиск всех смежных вершин для вершины 0 в списке смежности
Для графа из предыдущего примера найдите все вершины, которые смежны с вершиной 0.
🎯 Решение:
Для поиска всех смежных вершин нужно просто извлечь список смежности для вершины 0.
```javascript
const graph = {
  0: [1],
  1: [2],
  2: []
};

const getNeighbors = (graph, vertex) => graph[vertex] || [];

console.log(getNeighbors(graph, 0)); // [1]
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Представление графа в памяти компьютера:
---
4. ⌛ Задача: Проверка наличия ребра между двумя вершинами в матрице смежности
Проверьте, есть ли ребро между вершинами 0 и 2 в графе, представленном матрицей смежности.
🎯 Решение:
Проверка на наличие ребра сводится к проверке значения в соответствующей ячейке матрицы.
```javascript
const graph = [
  [0, 1, 1, 0],
  [1, 0, 0, 1],
  [1, 0, 0, 0],
  [0, 1, 0, 0]
];

const hasEdge = (graph, vertex1, vertex2) => graph[vertex1][vertex2] === 1;

console.log(hasEdge(graph, 0, 2)); // true
console.log(hasEdge(graph, 1, 2)); // false
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Представление графа в памяти компьютера:
---
5. ⌛ Задача: Добавление ребра в граф, представленный списком смежности
Добавьте ребро между вершинами 1 и 2 в граф, представленный списком смежности.
🎯 Решение:
Для добавления ребра нужно добавить вершину в список смежности соответствующей вершины.
```javascript
const graph = {
  0: [1],
  1: [2],
  2: []
};

const addEdge = (graph, vertex1, vertex2) => {
  graph[vertex1].push(vertex2);
};

addEdge(graph, 1, 2); // Добавляем ребро 1 -> 2
console.log(graph);
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Представление графа в памяти компьютера:
---
6. ⌛ Задача: Удаление ребра из графа, представленного списком смежности
Удалите ребро между вершинами 0 и 1 в графе, представленном списком смежности.
🎯 Решение:
Для удаления ребра нужно удалить соответствующую вершину из списка смежности.
```javascript
const graph = {
  0: [1],
  1: [2],
  2: []
};

const removeEdge = (graph, vertex1, vertex2) => {
  const index = graph[vertex1].indexOf(vertex2);
  if (index !== -1) {
    graph[vertex1].splice(index, 1);
  }
};

removeEdge(graph, 0, 1); // Удаляем ребро 0 -> 1
console.log(graph);
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Представление графа в памяти компьютера:
---
7. ⌛ Задача: Поиск всех вершин графа, которые не имеют исходящих рёбер (в списке смежности)
Для графа из предыдущего примера найдите вершины, которые не имеют исходящих рёбер.
🎯 Решение:
Для поиска таких вершин нужно проверить все списки смежности и выявить те, которые пусты.
```javascript
const graph = {
  0: [1],
  1: [2],
  2: []
};

const findVerticesWithNoOutgoingEdges = graph => {
  return Object.keys(graph).filter(vertex => graph[vertex].length === 0);
};

console.log(findVerticesWithNoOutgoingEdges(graph)); // [2]
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Представление графа в памяти компьютера:
---
8. ⌛ Задача: Проверка, является ли граф ориентированным
Проверьте, является ли граф, представленный матрицей смежности, ориентированным. Граф ориентированный, если для каждой пары вершин (i, j) выполняется условие: если есть ребро из i в j, то нет ребра из j в i.
🎯 Решение:
Для проверки нужно пройтись по матрице и убедиться, что если `graph[i][j] === 1`, то `graph[j][i] === 0`.
```javascript
const graph = [
  [0, 1, 0],
  [0, 0, 1],
  [0, 0, 0]
];

const isDirected = graph => {
  for (let i = 0; i < graph.length; i++) {
    for (let j = 0; j < graph.length; j++) {
      if (graph[i][j] === 1 && graph[j][i] === 1) {
        return false; // Граф не ориентированный
      }
    }
  }
  return true;
};

console.log(isDirected(graph)); // true
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Представление графа в памяти компьютера:
---
9. ⌛ Задача: Транспонирование графа, представленного матрицей смежности
Создайте транспонированную матрицу для графа, представленного матрицей смежности (все рёбра графа меняются на противоположные).
🎯 Решение:
Транспонирование матрицы сводится к обмену строк с колонками.
```javascript
const graph = [
  [0, 1, 0],
  [0, 0, 1],
  [0, 0, 0]
];

const transposeGraph = graph => {
  const n = graph.length;
  const transposed = Array.from({ length: n }, () => Array(n).fill(0));

  for (let i = 0; i < n; i++) {
    for (let j = 0; j < n; j++) {
      transposed[j][i] = graph[i][j];
    }
  }
  return transposed;
};

console.log(transposeGraph(graph));
```
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Представление графа в памяти компьютера:
---
10. ⌛ Задача: Представление взвешенного графа с помощью списка смежности
Представьте взвешенный направленный граф с 3 вершинами, где веса рёбер следующие: 0 -> 1 (вес 5), 1 -> 2 (вес 3).
🎯 Решение:
Для взвешенного графа в списке смежности можно хранить массив объектов с вершинами и весами.
```javascript
const graph = {
  0: [{ vertex: 1, weight: 5 }],
  1: [{ vertex: 2, weight: 3 }],
  2: []
};

console.log(graph);
```
Эти задачи покрывают основные способы представления графов в памяти и дают представление о том, как манипулировать графами в JavaScript.
---------------------------------------------------------------------------------------------
