
---------------------------------------------------------------------------------------------
üìå [–ü—Ä–æ—Å—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã]:
---------------------
‚ãô ‚ùç 2 —É–∫–∞–∑–∞—Ç–µ–ª—è –±–µ–≥–∞—é—Ç –ø–æ —Å–≤—è–∑. —Å–ø–∏—Å–∫—É:
---
–ó–∞–¥–∞—á–∏ —Å –¥–≤—É–º—è —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ (two pointers) –≤ —Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–æ–≤–æ–ª—å–Ω–æ —á–∞—Å—Ç–æ. –î–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –∏–ª–∏ –∏–¥—Ç–∏ –Ω–∞–≤—Å—Ç—Ä–µ—á—É –¥—Ä—É–≥ –¥—Ä—É–≥—É.
0. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è —Ü–∏–∫–ª–∞ –≤ —Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ (Floyd‚Äôs Cycle Detection)
‚åõ –ó–∞–¥–∞—á–∞: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–∏–∫–ª.
üéØ –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è: `slow` (–º–µ–¥–ª–µ–Ω–Ω—ã–π) –∏ `fast` (–±—ã—Å—Ç—Ä—ã–π).
```javascript
function hasCycle(head) {
    let slow = head;
    let fast = head;

    while (fast !== null && fast.next !== null) {
        slow = slow.next;
        fast = fast.next.next;

        if (slow === fast) {
            return true;
        }
    }

    return false;
}
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `slow` –¥–≤–∏–≥–∞–µ—Ç—Å—è –ø–æ 1 —É–∑–ª—É –∑–∞ —à–∞–≥.
- `fast` –¥–≤–∏–≥–∞–µ—Ç—Å—è –ø–æ 2 —É–∑–ª–∞ –∑–∞ —à–∞–≥.
- –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–∏–∫–ª, `fast` –¥–æ–≥–æ–Ω–∏—Ç `slow`, –∏ –º—ã –≤–µ—Ä–Ω–µ–º `true`.
- –ï—Å–ª–∏ `fast` –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –∫–æ–Ω—Ü–∞ (`null`), —Ü–∏–∫–ª–∞ –Ω–µ—Ç.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç 2 —É–∫–∞–∑–∞—Ç–µ–ª—è –±–µ–≥–∞—é—Ç –ø–æ —Å–≤—è–∑. —Å–ø–∏—Å–∫—É:
---
1. –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–µ–¥–∏–Ω—ã —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ —Å–µ—Ä–µ–¥–∏–Ω—É —Å–ø–∏—Å–∫–∞.
üéØ –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π —É–∫–∞–∑–∞—Ç–µ–ª–∏.
```javascript
function findMiddle(head) {
    let slow = head;
    let fast = head;

    while (fast !== null && fast.next !== null) {
        slow = slow.next;
        fast = fast.next.next;
    }

    return slow; // slow –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω—É —Å–ø–∏—Å–∫–∞
}
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `slow` –¥–≤–∏–≥–∞–µ—Ç—Å—è –ø–æ 1 —à–∞–≥—É.
- `fast` –¥–≤–∏–≥–∞–µ—Ç—Å—è –ø–æ 2 —à–∞–≥–∞–º.
- –ö–æ–≥–¥–∞ `fast` –¥–æ–π–¥–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞, `slow` –±—É–¥–µ—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç 2 —É–∫–∞–∑–∞—Ç–µ–ª—è –±–µ–≥–∞—é—Ç –ø–æ —Å–≤—è–∑. —Å–ø–∏—Å–∫—É:
---
2. –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –Ω–∞—á–∞–ª–∞ —Ü–∏–∫–ª–∞
‚åõ –ó–∞–¥–∞—á–∞: –ï—Å–ª–∏ —Ü–∏–∫–ª –µ—Å—Ç—å, –Ω–∞–π—Ç–∏ —É–∑–µ–ª, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.
üéØ –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –§–ª–æ–π–¥–∞, –Ω–æ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ—â–µ –æ–¥–∏–Ω —É–∫–∞–∑–∞—Ç–µ–ª—å.
```javascript
function detectCycle(head) {
    let slow = head;
    let fast = head;

    while (fast !== null && fast.next !== null) {
        slow = slow.next;
        fast = fast.next.next;

        if (slow === fast) {
            let pointer = head;
            while (pointer !== slow) {
                pointer = pointer.next;
                slow = slow.next;
            }
            return pointer;
        }
    }

    return null;
}
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–∏–∫–ª (–∫–∞–∫ –≤ `hasCycle`).
2. –ï—Å–ª–∏ —Ü–∏–∫–ª –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å —Å `head` –∏ –¥–≤–∏–≥–∞–µ–º –æ–±–∞ (–Ω–æ–≤—ã–π –∏ `slow`) –ø–æ 1 —à–∞–≥—É.
3. –û–Ω–∏ –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç 2 —É–∫–∞–∑–∞—Ç–µ–ª—è –±–µ–≥–∞—é—Ç –ø–æ —Å–≤—è–∑. —Å–ø–∏—Å–∫—É:
---
3. –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ø–∏—Å–æ–∫ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º
‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö.
üéØ –†–µ—à–µ–Ω–∏–µ: –ù–∞–π—Ç–∏ —Å–µ—Ä–µ–¥–∏–Ω—É, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É, –∑–∞—Ç–µ–º —Å—Ä–∞–≤–Ω–∏—Ç—å.
```javascript
function isPalindrome(head) {
    if (!head || !head.next) return true;

    let slow = head, fast = head;

    while (fast && fast.next) {
        slow = slow.next;
        fast = fast.next.next;
    }

    let secondHalf = reverseList(slow);
    let firstHalf = head;

    while (secondHalf) {
        if (firstHalf.val !== secondHalf.val) return false;
        firstHalf = firstHalf.next;
        secondHalf = secondHalf.next;
    }

    return true;
}

function reverseList(head) {
    let prev = null;
    while (head) {
        let next = head.next;
        head.next = prev;
        prev = head;
        head = next;
    }
    return prev;
}
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É —Å–ø–∏—Å–∫–∞.
2. –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É —Å–ø–∏—Å–∫–∞.
3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—ã.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç 2 —É–∫–∞–∑–∞—Ç–µ–ª—è –±–µ–≥–∞—é—Ç –ø–æ —Å–≤—è–∑. —Å–ø–∏—Å–∫—É:
---
4. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
‚åõ –ó–∞–¥–∞—á–∞: –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π.
üéØ –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è, –¥–≤–∏–≥–∞—è—Å—å –ø–æ –æ–±–æ–∏–º —Å–ø–∏—Å–∫–∞–º.
```javascript
function mergeTwoLists(l1, l2) {
    let dummy = new ListNode(-1);
    let current = dummy;

    while (l1 !== null && l2 !== null) {
        if (l1.val < l2.val) {
            current.next = l1;
            l1 = l1.next;
        } else {
            current.next = l2;
            l2 = l2.next;
        }
        current = current.next;
    }

    current.next = l1 !== null ? l1 : l2;

    return dummy.next;
}
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —É–∑–µ–ª (`dummy`), —á—Ç–æ–±—ã –ª–µ–≥–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å `next`.
2. –î–≤–∏–≥–∞–µ–º –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è `l1` –∏ `l2`, –¥–æ–±–∞–≤–ª—è—è –º–µ–Ω—å—à–∏–π —É–∑–µ–ª –≤ `current`.
3. –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å, –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç 2 —É–∫–∞–∑–∞—Ç–µ–ª—è –±–µ–≥–∞—é—Ç –ø–æ —Å–≤—è–∑. —Å–ø–∏—Å–∫—É:
---
5. –£–¥–∞–ª–µ–Ω–∏–µ n-–≥–æ —É–∑–ª–∞ —Å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞
‚åõ –ó–∞–¥–∞—á–∞: –£–¥–∞–ª–∏—Ç—å `n`-–π —É–∑–µ–ª —Å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥.
üéØ –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è, –≤—Ç–æ—Ä–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ–∑–∂–µ –ø–µ—Ä–≤–æ–≥–æ.
```javascript
function removeNthFromEnd(head, n) {
    let dummy = new ListNode(0);
    dummy.next = head;
    let first = dummy;
    let second = dummy;

    for (let i = 0; i <= n; i++) {
        first = first.next;
    }

    while (first !== null) {
        first = first.next;
        second = second.next;
    }

    second.next = second.next.next;

    return dummy.next;
}
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. `first` –∏ `second` —Å—Ç–∞—Ä—Ç—É—é—Ç —Å —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ —É–∑–ª–∞.
2. `first` –¥–≤–∏–≥–∞–µ—Ç—Å—è –Ω–∞ `n + 1` —à–∞–≥–æ–≤ –≤–ø–µ—Ä–µ–¥.
3. –î–≤–∏–≥–∞–µ–º `first` –∏ `second`, –ø–æ–∫–∞ `first` –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –∫–æ–Ω—Ü–∞.
4. `second.next = second.next.next` —É–¥–∞–ª—è–µ—Ç `n`-–π —É–∑–µ–ª —Å –∫–æ–Ω—Ü–∞.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç 2 —É–∫–∞–∑–∞—Ç–µ–ª—è –±–µ–≥–∞—é—Ç –ø–æ —Å–≤—è–∑. —Å–ø–∏—Å–∫—É:
---
6. –°–ª–∏—è–Ω–∏–µ K –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ (–º–µ—Ç–æ–¥ —Å–ª–∏—è–Ω–∏—è 2-—Ö —Å–ø–∏—Å–∫–æ–≤)
‚åõ –ó–∞–¥–∞—á–∞: –û–±—ä–µ–¥–∏–Ω–∏—Ç—å `K` –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π.
üéØ –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ø–∞—Ä–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ —Å `mergeTwoLists`.
```javascript
function mergeKLists(lists) {
    if (lists.length === 0) return null;

    while (lists.length > 1) {
        let mergedLists = [];

        for (let i = 0; i < lists.length; i += 2) {
            let l1 = lists[i];
            let l2 = i + 1 < lists.length ? lists[i + 1] : null;
            mergedLists.push(mergeTwoLists(l1, l2));
        }

        lists = mergedLists;
    }

    return lists[0];
}

function mergeTwoLists(l1, l2) {
    let dummy = new ListNode(-1);
    let current = dummy;

    while (l1 !== null && l2 !== null) {
        if (l1.val < l2.val) {
            current.next = l1;
            l1 = l1.next;
        } else {
            current.next = l2;
            l2 = l2.next;
        }
        current = current.next;
    }

    current.next = l1 !== null ? l1 : l2;

    return dummy.next;
}
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ü–æ–ø–∞—Ä–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏, –ø–æ–∫–∞ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ–¥–∏–Ω.
- –ò—Å–ø–æ–ª—å–∑—É–µ–º `mergeTwoLists` –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å O(NlogK), –≥–¥–µ `N` ‚Äî –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤, `K` ‚Äî —á–∏—Å–ª–æ —Å–ø–∏—Å–∫–æ–≤.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç 2 —É–∫–∞–∑–∞—Ç–µ–ª—è –±–µ–≥–∞—é—Ç –ø–æ —Å–≤—è–∑. —Å–ø–∏—Å–∫—É:
---
7. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ X
‚åõ –ó–∞–¥–∞—á–∞: –†–∞–∑–¥–µ–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã < `X` —à–ª–∏ –ø–µ—Ä–µ–¥ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ ‚â• `X`, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫.
üéØ –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è –∏ –¥–≤–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞.
```javascript
function partition(head, x) {
    let beforeHead = new ListNode(0);
    let afterHead = new ListNode(0);
    let before = beforeHead, after = afterHead;

    while (head !== null) {
        if (head.val < x) {
            before.next = head;
            before = before.next;
        } else {
            after.next = head;
            after = after.next;
        }
        head = head.next;
    }

    after.next = null; // –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–≤—è–∑—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —É–∑–ª–∞–º–∏
    before.next = afterHead.next; // –°–æ–µ–¥–∏–Ω—è–µ–º –¥–≤–∞ —Å–ø–∏—Å–∫–∞

    return beforeHead.next;
}
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `before` —Ö—Ä–∞–Ω–∏—Ç —É–∑–ª—ã < `X`, `after` ‚Äî —É–∑–ª—ã ‚â• `X`.
- –ó–∞—Ç–µ–º —Å–æ–µ–¥–∏–Ω—è–µ–º `before.next = afterHead.next`.
- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —É–∑–ª—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç 2 —É–∫–∞–∑–∞—Ç–µ–ª—è –±–µ–≥–∞—é—Ç –ø–æ —Å–≤—è–∑. —Å–ø–∏—Å–∫—É:
---
8. –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ —Ç–æ—á–∫—É, –≥–¥–µ –¥–≤–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è (–∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å `null`).
üéØ –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç —Å–≤–æ–∏ —Å–ø–∏—Å–∫–∏, –∑–∞—Ç–µ–º –º–µ–Ω—è—é—Ç—Å—è –º–µ—Å—Ç–∞–º–∏.
```javascript
function getIntersectionNode(headA, headB) {
    if (!headA || !headB) return null;

    let a = headA;
    let b = headB;

    while (a !== b) {
        a = a === null ? headB : a.next;
        b = b === null ? headA : b.next;
    }

    return a; // –ª–∏–±–æ —Ç–æ—á–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è, –ª–∏–±–æ null
}
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ï—Å–ª–∏ —Å–ø–∏—Å–∫–∏ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã, —É–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–æ–π–¥—É—Ç –¥–æ –∫–æ–Ω—Ü–∞ –∏ –ø–æ–º–µ–Ω—è—é—Ç—Å—è –º–µ—Å—Ç–∞–º–∏.
- –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –æ–Ω–∏ –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è –≤ —Ç–æ—á–∫–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è (–∏–ª–∏ –≤ `null`, –µ—Å–ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –Ω–µ—Ç).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç 2 —É–∫–∞–∑–∞—Ç–µ–ª—è –±–µ–≥–∞—é—Ç –ø–æ —Å–≤—è–∑. —Å–ø–∏—Å–∫—É:
---
9. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤)
‚åõ –ó–∞–¥–∞—á–∞: –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, —É–±—Ä–∞—Ç—å –≤—Å–µ –µ–≥–æ –∫–æ–ø–∏–∏).
üéØ –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è: `prev` (–ø—Ä–µ–¥—ã–¥—É—â–∏–π) –∏ `current` (—Ç–µ–∫—É—â–∏–π).
```javascript
function deleteDuplicates(head) {
    let dummy = new ListNode(0);
    dummy.next = head;
    let prev = dummy;

    while (head !== null) {
        if (head.next !== null && head.val === head.next.val) {
            while (head.next !== null && head.val === head.next.val) {
                head = head.next;
            }
            prev.next = head.next;
        } else {
            prev = prev.next;
        }
        head = head.next;
    }

    return dummy.next;
}
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ï—Å–ª–∏ `head` –∏ `head.next` –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã.
- `prev.next = head.next` —É–¥–∞–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —É–∑–ª—ã.
- –†–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(N), —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ø–∏—Å–∫—É –æ–¥–∏–Ω —Ä–∞–∑.
–í—ã–≤–æ–¥:
–í—Å–µ —ç—Ç–∏ —Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–µ—Ö–Ω–∏–∫—É –¥–≤—É—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π, –Ω–æ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏—è—Ö:
1. –î–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç—è—Ö (`findMiddle`, `hasCycle`).
2. –û–¥–∏–Ω —É–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ç—Å—Ç–∞–µ—Ç –æ—Ç –¥—Ä—É–≥–æ–≥–æ (`removeNthFromEnd`).
3. –î–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è, –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ –ø–æ —Ä–∞–∑–Ω—ã–º —Å–ø–∏—Å–∫–∞–º (`getIntersectionNode`).
4. –î–≤–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞ (`partition`).
5. –î–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (`deleteDuplicates`).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ:
---
–ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ ‚Äî –æ–¥–Ω–∞ –∏–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏. –í–æ—Ç 5 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ JavaScript —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏.
10. –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ `indexOf` (–ø—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ø–æ—Å–æ–±)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ `needle` –≤ —Å—Ç—Ä–æ–∫–µ `haystack`, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—É—Ç—å `-1`.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function findSubstring(haystack, needle) {
    return haystack.indexOf(needle);
}

console.log(findSubstring("hello world", "world")); // 6
console.log(findSubstring("hello world", "abc"));   // -1
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `indexOf(needle)` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è `needle`.
- –ï—Å–ª–∏ `needle` –Ω–µ—Ç –≤ `haystack`, –≤–µ—Ä–Ω–µ—Ç—Å—è `-1`.
- –†–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(N * M) –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ, –≥–¥–µ `N` ‚Äî –¥–ª–∏–Ω–∞ `haystack`, `M` ‚Äî –¥–ª–∏–Ω–∞ `needle`.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ:
---
11. –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ `includes` (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è)
‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ `needle` –≤ `haystack`.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function containsSubstring(haystack, needle) {
    return haystack.includes(needle);
}

console.log(containsSubstring("hello world", "world")); // true
console.log(containsSubstring("hello world", "abc"));   // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `includes(needle)` –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `true` –∏–ª–∏ `false`.
- –≠—Ç–æ —É–¥–æ–±–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ, –∞ –Ω–µ –∏—Å–∫–∞—Ç—å –∏–Ω–¥–µ–∫—Å.
- –†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –∑–∞ O(N * M).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ:
---
12. –ê–ª–≥–æ—Ä–∏—Ç–º –¥–≤—É—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π (Brute Force)
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è `needle` –≤ `haystack` –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function bruteForceSearch(haystack, needle) {
    let n = haystack.length;
    let m = needle.length;

    for (let i = 0; i <= n - m; i++) {
        let j = 0;
        while (j < m && haystack[i + j] === needle[j]) {
            j++;
        }
        if (j === m) return i;
    }

    return -1;
}

console.log(bruteForceSearch("hello world", "world")); // 6
console.log(bruteForceSearch("hello world", "abc"));   // -1
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ `haystack` –æ—Ç `i = 0` –¥–æ `i = N - M`.
2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ `i` –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ `needle` —Å `haystack[i ... i+M]`.
3. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `i`.
4. –†–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(N * M) –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ:
---
13. –ê–ª–≥–æ—Ä–∏—Ç–º –ö–Ω—É—Ç–∞-–ú–æ—Ä—Ä–∏—Å–∞-–ü—Ä–∞—Ç—Ç–∞ (KMP)
‚åõ –ó–∞–¥–∞—á–∞: –£–ª—É—á—à–∏—Ç—å –ø–æ–∏—Å–∫, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ `needle` –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function kmpSearch(haystack, needle) {
    if (needle.length === 0) return 0;

    let lps = computeLPS(needle);
    let i = 0, j = 0;

    while (i < haystack.length) {
        if (haystack[i] === needle[j]) {
            i++;
            j++;
            if (j === needle.length) return i - j;
        } else {
            if (j !== 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }

    return -1;
}

function computeLPS(pattern) {
    let lps = Array(pattern.length).fill(0);
    let len = 0;
    let i = 1;

    while (i < pattern.length) {
        if (pattern[i] === pattern[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            if (len !== 0) {
                len = lps[len - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }

    return lps;
}

console.log(kmpSearch("hello world", "world")); // 6
console.log(kmpSearch("hello world", "abc"));   // -1
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å—Ç—Ä–æ–∏–º LPS-–º–∞—Å—Å–∏–≤ (`computeLPS`), –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.
2. –î–≤–∏–≥–∞–µ–º –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è (`i` –ø–æ `haystack`, `j` –ø–æ `needle`).
3. –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª—ã —Å–æ–≤–ø–∞–ª–∏, –¥–≤–∏–≥–∞–µ–º –æ–±–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è –≤–ø–µ—Ä–µ–¥.
4. –ï—Å–ª–∏ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º `lps` –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–¥–≤–∏–≥–∞ `j`.
5. –†–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(N + M).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ:
---
14. –ê–ª–≥–æ—Ä–∏—Ç–º –†–∞–±–∏–Ω–∞-–ö–∞—Ä–ø–∞ (–ø–æ–∏—Å–∫ —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
‚åõ –ó–∞–¥–∞—á–∞: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function rabinKarp(haystack, needle) {
    let n = haystack.length;
    let m = needle.length;
    if (m > n) return -1;

    let base = 26;
    let mod = 1e9 + 7;

    function hash(s) {
        let h = 0;
        for (let char of s) {
            h = (h * base + char.charCodeAt(0)) % mod;
        }
        return h;
    }

    let needleHash = hash(needle);
    let hayHash = hash(haystack.substring(0, m));

    if (needleHash === hayHash && haystack.substring(0, m) === needle) return 0;

    let power = 1;
    for (let i = 0; i < m - 1; i++) {
        power = (power * base) % mod;
    }

    for (let i = 1; i <= n - m; i++) {
        hayHash = (hayHash - haystack.charCodeAt(i - 1) * power % mod + mod) % mod;
        hayHash = (hayHash * base + haystack.charCodeAt(i + m - 1)) % mod;

        if (hayHash === needleHash && haystack.substring(i, i + m) === needle) {
            return i;
        }
    }

    return -1;
}

console.log(rabinKarp("hello world", "world")); // 6
console.log(rabinKarp("hello world", "abc"));   // -1
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à `needle`.
2. –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –ø–µ—Ä–≤–æ–π –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ `haystack`.
3. –ò—Å–ø–æ–ª—å–∑—É–µ–º rolling hash: –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ö–µ—à–∏ –∑–∞ O(1), —É–¥–∞–ª—è—è —Å—Ç–∞—Ä—ã–π —Å–∏–º–≤–æ–ª –∏ –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–π.
4. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à–∏, –∞ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ.
5. –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ O(N + M), –Ω–æ –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ O(N * M) –ø—Ä–∏ –∫–æ–ª–ª–∏–∑–∏—è—Ö.
---
–í—ã–≤–æ–¥:
- `indexOf` / `includes` ‚Äî –ø—Ä–æ—Å—Ç–µ–π—à–∏–µ –∏ –±—ã—Å—Ç—Ä—ã–µ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Å—Ç—Ä–æ–∫.
- `Brute Force` ‚Äî –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã–π.
- `KMP` ‚Äî —É–ª—É—á—à–∞–µ—Ç –ø–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é LPS-–º–∞—Å—Å–∏–≤–∞, O(N + M).
- `Rabin-Karp` ‚Äî –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–¥—Å—Ç—Ä–æ–∫, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–∞—Ö.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ:
---
15. –ú–µ—Ç–æ–¥ `search()` —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ `needle` –≤ —Å—Ç—Ä–æ–∫–µ `haystack`, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function regexSearch(haystack, needle) {
    let match = haystack.search(new RegExp(needle));
    return match !== -1 ? match : -1;
}

console.log(regexSearch("hello world", "world")); // 6
console.log(regexSearch("hello world", "abc"));   // -1
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `search()` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å `needle`.
- –†–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ, –Ω–æ –Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å `.*`, `\d+` –∏ —Ç.–¥.).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ:
---
16. –ú–µ—Ç–æ–¥ `match()` —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ `needle` –≤ —Å—Ç—Ä–æ–∫–µ `haystack`.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function findAllOccurrences(haystack, needle) {
    let matches = haystack.match(new RegExp(needle, "g"));
    return matches ? matches.length : 0;
}

console.log(findAllOccurrences("banana", "an")); // 2
console.log(findAllOccurrences("hello world", "abc")); // 0
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `match()` —Å —Ñ–ª–∞–≥–æ–º `"g"` –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è.
- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–ª–∏ `null`, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç.
- –£–¥–æ–±–Ω–æ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–π.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ:
---
17. –ú–µ—Ç–æ–¥ `slice()` + —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è `needle` –≤ `haystack`, –∏—Å–ø–æ–ª—å–∑—É—è `slice()`.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function sliceSearch(haystack, needle) {
    let n = haystack.length;
    let m = needle.length;

    for (let i = 0; i <= n - m; i++) {
        if (haystack.slice(i, i + m) === needle) {
            return i;
        }
    }

    return -1;
}

console.log(sliceSearch("hello world", "world")); // 6
console.log(sliceSearch("hello world", "abc"));   // -1
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –í–º–µ—Å—Ç–æ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º `slice(i, i + m)`.
- –†–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(N * M) –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ:
---
18. –ú–µ—Ç–æ–¥ `split()` + –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è
‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ `needle` –≤ `haystack`, –∏—Å–ø–æ–ª—å–∑—É—è `split()`.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function containsUsingSplit(haystack, needle) {
    return haystack.split(needle).length > 1;
}

console.log(containsUsingSplit("hello world", "world")); // true
console.log(containsUsingSplit("hello world", "abc"));   // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `split(needle)` —Ä–∞–∑—Ä–µ–∂–µ—Ç `haystack` –ø–æ `needle`.
- –ï—Å–ª–∏ `needle` –Ω–∞–π–¥–µ–Ω, –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –±—É–¥–µ—Ç > 1.
- –≠—Ç–æ –Ω–µ —Å–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±, –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ:
---
19. –ú–µ—Ç–æ–¥ `map()` + `join()` (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è)
‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ `needle` –≤ `haystack`, –∏—Å–ø–æ–ª—å–∑—É—è `map()` –∏ `join()`.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function checkSubstringMapJoin(haystack, needle) {
    return haystack.split("").map((char, i) => haystack.slice(i, i + needle.length)).join(" ").includes(needle);
}

console.log(checkSubstringMapJoin("hello world", "world")); // true
console.log(checkSubstringMapJoin("hello world", "abc"));   // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `split("")` –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤.
- `map()` —Å–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–¥—Å—Ç—Ä–æ–∫ –¥–ª–∏–Ω—ã `needle.length`.
- `join(" ")` —Å–æ–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ —Å—Ç—Ä–æ–∫—É.
- `includes(needle)` –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏—Å–∫–æ–º–æ–π –ø–æ–¥—Å—Ç—Ä–æ–∫–∏.
---
–í—ã–≤–æ–¥:
1. `search()` –∏ `match()` —É–¥–æ–±–Ω—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
2. `slice()` –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–æ–π—Ç–∏—Å—å –±–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞.
3. `split()` –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω, –Ω–æ –Ω–µ —Å–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π.
4. `map() + join()` ‚Äî –∑–∞–±–∞–≤–Ω—ã–π, –Ω–æ –Ω–µ—Ç–∏–ø–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–±.
---------------------------------------------------------------------------------------------
