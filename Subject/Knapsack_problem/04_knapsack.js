---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ –æ —Ä—é–∫–∑–∞–∫–µ:
---
4Ô∏è‚É£ –í–∑–∞–∏–º–æ—Å–≤—è–∑—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π
‚åõ–ó–∞–¥–∞—á–∞: –£ –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã, –Ω–æ –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–º–µ–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–∑—è—Ç—å –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç, –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –¥—Ä—É–≥–æ–π. –ö–∞–∫ —Ä–µ—à–∏—Ç—å —Ç–∞–∫—É—é –∑–∞–¥–∞—á—É?
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function dependencyKnapsack(items, capacity, dependencies) {
  const dp = Array(capacity + 1).fill(0);

  items.forEach(item => {
    const depItem = dependencies[item.name];
    if (depItem) {
      for (let w = capacity; w >= item.weight + depItem.weight; w--) {
        dp[w] = Math.max(dp[w], dp[w - item.weight - depItem.weight] + item.value + depItem.value);
      }
    } else {
      for (let w = capacity; w >= item.weight; w--) {
        dp[w] = Math.max(dp[w], dp[w - item.weight] + item.value);
      }
    }
  });

  return dp[capacity];
}

const items = [
  { name: "A", value: 60, weight: 10 },
  { name: "B", value: 100, weight: 20 },
  { name: "C", value: 120, weight: 30 }
];

const dependencies = {
  "A": { value: 20, weight: 5 },
  "B": { value: 50, weight: 15 }
};

console.log(dependencyKnapsack(items, 50, dependencies)); // 230
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –µ—Å—Ç—å –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å. –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –æ–±–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
---------------------------------------------------------------------------------------------
