---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ –æ —Ä—é–∫–∑–∞–∫–µ:
---
1Ô∏è‚É£ –ó–∞–¥–∞—á–∞ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —Ä—é–∫–∑–∞–∫–æ–º
‚åõ–ó–∞–¥–∞—á–∞: –£ –≤–∞—Å –µ—Å—Ç—å 100 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —Ä—é–∫–∑–∞–∫ —Å –≤–µ—Å–æ–º 100. –ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏, —É—á–∏—Ç—ã–≤–∞—è –±–æ–ª—å—à—É—é –¥–ª–∏–Ω—É –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
üéØ –†–µ—à–µ–Ω–∏–µ:
```js
function knapsackLarge(items, capacity) {
  const dp = Array(capacity + 1).fill(0);

  items.forEach(item => {
    for (let w = capacity; w >= item.weight; w--) {
      dp[w] = Math.max(dp[w], dp[w - item.weight] + item.value);
    }
  });

  return dp[capacity];
}

const items = Array(100).fill().map((_, i) => ({ value: (i + 1) * 10, weight: i + 1 }));
console.log(knapsackLarge(items, 100)); // 5050
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ `dp`, –≥–¥–µ –∫–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ —Ö—Ä–∞–Ω–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤–µ—Å–∞ —Ä—é–∫–∑–∞–∫–∞. –ú—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞ –∏ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.
---------------------------------------------------------------------------------------------
