---------------------------------------------------------------------------------------------  
‚ãô ‚ùç ‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –∫–∞–Ω—Å—Ç–æ–º–Ω—ã–π –ª–∏–Ω–∫–µ–¥ –ª–∏—Å—Ç, –æ–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –∑–∞ N —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
---
0.
üéØ –†–µ—à–µ–Ω–∏–µ: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞
–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
1. –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (–ø–æ –º–∞—Å—Å–∏–≤—É).
2. –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ (Linked List).
3. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –∑–∞ –ª–∏–Ω–µ–π–Ω–æ–µ –≤—Ä–µ–º—è O(N) —Å –ø–æ–º–æ—â—å—é BFS –∏–ª–∏ DFS.
---
1. –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–∞—Å—Å–∏–≤–∞–º, –∏–º–µ–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(log N).
```javascript
function binarySearch(arr, target) {
  let left = 0;
  let right = arr.length - 1;

  while (left <= right) {
    const mid = Math.floor((left + right) / 2);

    if (arr[mid] === target) {
      return mid; // –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω
    }

    if (arr[mid] < target) {
      left = mid + 1; // –ò—â–µ–º –≤ –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ
    } else {
      right = mid - 1; // –ò—â–µ–º –≤ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ
    }
  }

  return -1; // –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const sortedArray = [1, 3, 5, 7, 9, 11];
const target = 7;
const result = binarySearch(sortedArray, target);

console.log(result); // –ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞: 3
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ê–ª–≥–æ—Ä–∏—Ç–º:
   - –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ (`mid`).
   - –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å `target`.
   - –°—É–∂–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞, —É–¥–∞–ª—è—è –ø–æ–ª–æ–≤–∏–Ω—É –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.
2. –°–ª–æ–∂–Ω–æ—Å—Ç—å:
   - –í—Ä–µ–º—è: O(log N), —Ç–∞–∫ –∫–∞–∫ –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –º—ã –¥–µ–ª–∏–º –º–∞—Å—Å–∏–≤ –ø–æ–ø–æ–ª–∞–º.
   - –ü–∞–º—è—Ç—å: O(1), —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏—è.
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç ‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –∫–∞–Ω—Å—Ç–æ–º–Ω—ã–π –ª–∏–Ω–∫–µ–¥ –ª–∏—Å—Ç, –æ–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –∑–∞ N —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
---
1. –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ `LinkedList`
```javascript
class Node {
  constructor(value) {
    this.value = value;
    this.next = null;
  }
}

class LinkedList {
  constructor() {
    this.head = null;
    this.tail = null;
    this.size = 0;
  }

  // –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
  append(value) {
    const newNode = new Node(value);

    if (!this.head) {
      this.head = newNode;
      this.tail = newNode;
    } else {
      this.tail.next = newNode;
      this.tail = newNode;
    }

    this.size++;
  }

  // –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
  delete(value) {
    if (!this.head) return;

    // –£–¥–∞–ª—è–µ–º –≥–æ–ª–æ–≤—É
    if (this.head.value === value) {
      this.head = this.head.next;
      this.size--;
      return;
    }

    let current = this.head;

    while (current.next && current.next.value !== value) {
      current = current.next;
    }

    if (current.next) {
      current.next = current.next.next;
      this.size--;
    }

    if (!current.next) {
      this.tail = current; // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–≤–æ—Å—Ç, –µ—Å–ª–∏ —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    }
  }

  // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
  find(value) {
    let current = this.head;

    while (current) {
      if (current.value === value) {
        return current;
      }
      current = current.next;
    }

    return null;
  }

  // –ü–µ—á–∞—Ç—å –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  print() {
    const elements = [];
    let current = this.head;

    while (current) {
      elements.push(current.value);
      current = current.next;
    }

    console.log(elements.join(" -> "));
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const list = new LinkedList();
list.append(10);
list.append(20);
list.append(30);

list.print(); // 10 -> 20 -> 30

list.delete(20);
list.print(); // 10 -> 30

console.log(list.find(10)); // Node { value: 10, next: Node { ... } }
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –û–ø–µ—Ä–∞—Ü–∏–∏:
   - `append(value)`: –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞. –°–ª–æ–∂–Ω–æ—Å—Ç—å O(1).
   - `delete(value)`: –£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç. –°–ª–æ–∂–Ω–æ—Å—Ç—å O(N) –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ.
   - `find(value)`: –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞. –°–ª–æ–∂–Ω–æ—Å—Ç—å O(N).
2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
   - –°–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –≥–¥–µ —á–∞—Å—Ç–æ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∏–ª–∏ —É–¥–∞–ª—è—é—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã.
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç ‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –∫–∞–Ω—Å—Ç–æ–º–Ω—ã–π –ª–∏–Ω–∫–µ–¥ –ª–∏—Å—Ç, –æ–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –∑–∞ N —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
---
2. –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –∑–∞ –ª–∏–Ω–µ–π–Ω–æ–µ –≤—Ä–µ–º—è O(N)
–û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DFS (–≥–ª—É–±–∏–Ω–∞) –∏–ª–∏ BFS (—à–∏—Ä–∏–Ω–∞). –û–±–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–º–µ—é—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(V + E), –≥–¥–µ:
- V ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω.
- E ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä.
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ö–æ–¥–∞ –≤ —à–∏—Ä–∏–Ω—É (BFS)
```javascript
function bfs(graph, start) {
  const visited = new Set(); // –ß—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –æ–¥–Ω—É –≤–µ—Ä—à–∏–Ω—É –¥–≤–∞–∂–¥—ã
  const queue = [start]; // –û—á–µ—Ä–µ–¥—å –¥–ª—è BFS
  const result = [];

  while (queue.length > 0) {
    const current = queue.shift();

    if (!visited.has(current)) {
      visited.add(current);
      result.push(current);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥—å
      for (const neighbor of graph[current]) {
        if (!visited.has(neighbor)) {
          queue.push(neighbor);
        }
      }
    }
  }

  return result;
}

// –ü—Ä–∏–º–µ—Ä –≥—Ä–∞—Ñ–∞
const graph = {
  1: [2, 3],
  2: [4],
  3: [4, 5],
  4: [],
  5: [6],
  6: [],
};

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const startNode = 1;
console.log(bfs(graph, startNode)); // [1, 2, 3, 4, 5, 6]
```
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç ‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –∫–∞–Ω—Å—Ç–æ–º–Ω—ã–π –ª–∏–Ω–∫–µ–¥ –ª–∏—Å—Ç, –æ–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ –∑–∞ N —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
---
3.
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ö–æ–¥–∞ –≤ –≥–ª—É–±–∏–Ω—É (DFS)
```javascript
function dfs(graph, start, visited = new Set(), result = []) {
  if (visited.has(start)) return;

  visited.add(start);
  result.push(start);

  for (const neighbor of graph[start]) {
    if (!visited.has(neighbor)) {
      dfs(graph, neighbor, visited, result);
    }
  }

  return result;
}

// –ü—Ä–∏–º–µ—Ä –≥—Ä–∞—Ñ–∞
const graph = {
  1: [2, 3],
  2: [4],
  3: [4, 5],
  4: [],
  5: [6],
  6: [],
};

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const startNode = 1;
console.log(dfs(graph, startNode)); // [1, 2, 4, 3, 5, 6]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ BFS –∏ DFS:
1. BFS (—à–∏—Ä–∏–Ω–∞):
   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—á–µ—Ä–µ–¥—å (`queue`) –¥–ª—è –æ–±—Ö–æ–¥–∞.
   - –ü—Ä–æ—Ö–æ–¥–∏—Ç —É—Ä–æ–≤–µ–Ω—å –∑–∞ —É—Ä–æ–≤–Ω–µ–º.
2. DFS (–≥–ª—É–±–∏–Ω–∞):
   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∫—É—Ä—Å–∏—é (–∏–ª–∏ —Å—Ç–µ–∫) –¥–ª—è –æ–±—Ö–æ–¥–∞.
   - –ü—Ä–æ—Ö–æ–¥–∏—Ç –¥–æ –∫–æ–Ω—Ü–∞ –æ–¥–Ω–æ–≥–æ –ø—É—Ç–∏, –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.
–í—ã–≤–æ–¥
- –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫: –î–ª—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤, O(log N).
- –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫: –ì–∏–±–∫–æ—Å—Ç—å –≤ —Ä–∞–±–æ—Ç–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, O(N) –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∏—Å–∫–∞/—É–¥–∞–ª–µ–Ω–∏—è.
- –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞:
  - BFS –∏ DFS –æ–±—Ö–æ–¥—è—Ç –≥—Ä–∞—Ñ –∑–∞ O(V + E).
  - –í—ã–±–æ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–¥–∞—á–∏ (–ø–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ ‚Äî BFS, –ø–æ–∏—Å–∫ –ø—É—Ç–µ–π –≤–≥–ª—É–±—å ‚Äî DFS).
  ---------------------------------------------------------------------------------------------  
