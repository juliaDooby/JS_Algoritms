---------------------------------------------------------------------------------------------  
‚ãô ‚ùç ‚åõ –ó–∞–¥–∞—á–∞: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –§–∏–±–æ–Ω–∞—á—á–∏:
---
1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏
–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤—ã—á–∏—Å–ª—è–µ—Ç –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ –ø—É—Ç—ë–º –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–≤—É—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —á–∏—Å–µ–ª.
üéØ –†–µ—à–µ–Ω–∏–µ:
–ö–æ–¥:
```javascript
function fibonacciRecursive(n) {
  if (n <= 1) return n;
  return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function generateFibonacciRecursive(n) {
  const sequence = [];
  for (let i = 0; i < n; i++) {
    sequence.push(fibonacciRecursive(i));
  }
  return sequence;
}

console.log(generateFibonacciRecursive(10)); // [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –§—É–Ω–∫—Ü–∏—è `fibonacciRecursive` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞.
- –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª.
–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:
- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏–º–µ–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(2^n).
- –û–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –º–µ–¥–ª–µ–Ω–Ω—ã–º.
---------------------------------------------------------------------------------------------  
