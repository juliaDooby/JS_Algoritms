---------------------------------------------------------------------------------------------
⋙ ❍ Задача поиска кратчайшего пути в графе:
---
⌛ Задача: Поиск кратчайшего пути в графе
Дано: Ориентированный или неориентированный граф(список смежности или матрица смежности).
Найти: Кратчайший путь между двумя вершинами.
---------------
⋙ ❍ Задача поиска кратчайшего пути в графе:
---
0. Алгоритм поиска в ширину (BFS)
Подходит для невзвешенных графов.
```javascript
function bfsShortestPath(graph, start, end) {
    let queue = [[start]];
    let visited = new Set();

    while (queue.length > 0) {
        let path = queue.shift();
        let node = path[path.length - 1];

        if (node === end) return path;

        if (!visited.has(node)) {
            visited.add(node);
            for (let neighbor of graph[node] || []) {
                queue.push([...path, neighbor]);
            }
        }
    }

    return null;
}

const graph = {
    A: ["B", "C"],
    B: ["D", "E"],
    C: ["F"],
    D: [],
    E: ["F"],
    F: []
};

console.log(bfsShortestPath(graph, "A", "F")); // ["A", "C", "F"]
```
Объяснение:
1. Используем очередь (`queue`).
2. На каждом шаге проверяем вершину.
3. Если это целевая вершина, возвращаем путь.
4. Иначе добавляем все её соседей в очередь.
5. Сложность: O(V + E) (вершины + рёбра).
---------------------------------------------------------------------------------------------
