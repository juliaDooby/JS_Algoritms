---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ:
---
‚åõ –ó–∞–¥–∞—á–∞: –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ
–î–∞–Ω–æ: –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ(—Å–ø–∏—Å–æ–∫ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –º–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏).
–ù–∞–π—Ç–∏: –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ—Ä—à–∏–Ω–∞–º–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ:
---
1. –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –≤ —à–∏—Ä–∏–Ω—É (BFS)
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤.
```javascript
function bfsShortestPath(graph, start, end) {
    let queue = [[start]];
    let visited = new Set();

    while (queue.length > 0) {
        let path = queue.shift();
        let node = path[path.length - 1];

        if (node === end) return path;

        if (!visited.has(node)) {
            visited.add(node);
            for (let neighbor of graph[node] || []) {
                queue.push([...path, neighbor]);
            }
        }
    }

    return null;
}

const graph = {
    A: ["B", "C"],
    B: ["D", "E"],
    C: ["F"],
    D: [],
    E: ["F"],
    F: []
};

console.log(bfsShortestPath(graph, "A", "F")); // ["A", "C", "F"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å (`queue`).
2. –ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—à–∏–Ω—É.
3. –ï—Å–ª–∏ —ç—Ç–æ —Ü–µ–ª–µ–≤–∞—è –≤–µ—Ä—à–∏–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å.
4. –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –µ—ë —Å–æ—Å–µ–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥—å.
5. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V + E) (–≤–µ—Ä—à–∏–Ω—ã + —Ä—ë–±—Ä–∞).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ:
---
2. –ê–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥—Ä–∞—Ñ–æ–≤ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏ —Ä—ë–±–µ—Ä.
```javascript
function dijkstra(graph, start, end) {
    let distances = {};
    let previous = {};
    let pq = new Set(Object.keys(graph));

    for (let node in graph) distances[node] = Infinity;
    distances[start] = 0;

    while (pq.size) {
        let node = [...pq].reduce((a, b) => (distances[a] < distances[b] ? a : b));
        pq.delete(node);

        if (node === end) {
            let path = [];
            while (node) {
                path.unshift(node);
                node = previous[node];
            }
            return path;
        }

        for (let [neighbor, weight] of Object.entries(graph[node])) {
            let alt = distances[node] + weight;
            if (alt < distances[neighbor]) {
                distances[neighbor] = alt;
                previous[neighbor] = node;
            }
        }
    }

    return null;
}

const graphWeighted = {
    A: { B: 1, C: 4 },
    B: { C: 2, D: 5 },
    C: { D: 1 },
    D: {}
};

console.log(dijkstra(graphWeighted, "A", "D")); // ["A", "B", "C", "D"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (`distances`).
2. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–µ—Ä—à–∏–Ω—ã, –≤—ã–±–∏—Ä–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é.
3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å–µ–¥–µ–π, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—É—Ç—å.
4. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V¬≤) (–∏–ª–∏ O((V + E) log V) —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ:
---
3. –ê–ª–≥–æ—Ä–∏—Ç–º –ë–µ–ª–ª–º–∞–Ω–∞-–§–æ—Ä–¥–∞
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥—Ä–∞—Ñ–æ–≤ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏ (–Ω–æ –±–µ–∑ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤).
```javascript
function bellmanFord(graph, start, end) {
    let distances = {};
    let previous = {};
    for (let node in graph) distances[node] = Infinity;
    distances[start] = 0;

    for (let i = 0; i < Object.keys(graph).length - 1; i++) {
        for (let node in graph) {
            for (let [neighbor, weight] of Object.entries(graph[node])) {
                let alt = distances[node] + weight;
                if (alt < distances[neighbor]) {
                    distances[neighbor] = alt;
                    previous[neighbor] = node;
                }
            }
        }
    }

    let path = [];
    let node = end;
    while (node) {
        path.unshift(node);
        node = previous[node];
    }

    return path.length ? path : null;
}

const graphNegWeights = {
    A: { B: 1, C: 4 },
    B: { C: -2, D: 5 },
    C: { D: 1 },
    D: {}
};

console.log(bellmanFord(graphNegWeights, "A", "D")); // ["A", "B", "C", "D"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∫–∞–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ.
2. –ü—Ä–æ—Ö–æ–¥–∏–º –≥—Ä–∞—Ñ V-1 —Ä–∞–∑, –æ–±–Ω–æ–≤–ª—è—è –ø—É—Ç–∏.
3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å.
4. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(VE).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ:
---
4. –ê–ª–≥–æ—Ä–∏—Ç–º –§–ª–æ–π–¥–∞-–£–æ—Ä—à–µ–ª–ª–∞
–ù–∞—Ö–æ–¥–∏—Ç –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–∏ –≤–µ—Ä—à–∏–Ω.
```javascript
function floydWarshall(graph) {
    let nodes = Object.keys(graph);
    let dist = {};

    nodes.forEach(i => {
        dist[i] = {};
        nodes.forEach(j => {
            dist[i][j] = i === j ? 0 : graph[i]?.[j] ?? Infinity;
        });
    });

    nodes.forEach(k => {
        nodes.forEach(i => {
            nodes.forEach(j => {
                dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);
            });
        });
    });

    return dist;
}

const graphMatrix = {
    A: { B: 3, C: 8 },
    B: { D: 2 },
    C: { D: 1 },
    D: {}
};

console.log(floydWarshall(graphMatrix));
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å–º–µ–∂–Ω–æ—Å—Ç–∏.
2. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã.
3. –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
4 –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V¬≥).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ:
---
5. –ñ–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º A
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–≤—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ).
```javascript
function aStar(graph, start, end, heuristic) {
    let openSet = new Set([start]);
    let cameFrom = {};
    let gScore = {};
    let fScore = {};

    for (let node in graph) {
        gScore[node] = Infinity;
        fScore[node] = Infinity;
    }

    gScore[start] = 0;
    fScore[start] = heuristic(start, end);

    while (openSet.size > 0) {
        let current = [...openSet].reduce((a, b) => (fScore[a] < fScore[b] ? a : b));

        if (current === end) {
            let path = [];
            while (current) {
                path.unshift(current);
                current = cameFrom[current];
            }
            return path;
        }

        openSet.delete(current);
        for (let [neighbor, cost] of Object.entries(graph[current])) {
            let tentativeGScore = gScore[current] + cost;
            if (tentativeGScore < gScore[neighbor]) {
                cameFrom[neighbor] = current;
                gScore[neighbor] = tentativeGScore;
                fScore[neighbor] = gScore[neighbor] + heuristic(neighbor, end);
                openSet.add(neighbor);
            }
        }
    }

    return null;
}

const heuristic = (a, b) => Math.abs(a.charCodeAt(0) - b.charCodeAt(0));

console.log(aStar(graphWeighted, "A", "D", heuristic)); // ["A", "B", "C", "D"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ (`gScore` –∏ `fScore`).
2. –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏.
3. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O((V + E) log V) —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ:
---
6. –ü–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É (DFS) —Å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏.
```javascript
function dfsShortestPath(graph, start, end) {
    let shortestPath = null;

    function dfs(node, path, visited) {
        if (visited.has(node)) return;
        path.push(node);
        visited.add(node);

        if (node === end) {
            if (!shortestPath || path.length < shortestPath.length) {
                shortestPath = [...path];
            }
        } else {
            for (let neighbor of graph[node] || []) {
                dfs(neighbor, path, visited);
            }
        }

        path.pop();
        visited.delete(node);
    }

    dfs(start, [], new Set());
    return shortestPath;
}

const graph = {
    A: ["B", "C"],
    B: ["D", "E"],
    C: ["F"],
    D: [],
    E: ["F"],
    F: []
};

console.log(dfsShortestPath(graph, "A", "F")); // ["A", "C", "F"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞ (DFS).
2. –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫—Ä–∞—Ç—á–∞–π—à–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å.
3. –†–∞–±–æ—Ç–∞–µ—Ç –ø–ª–æ—Ö–æ –¥–ª—è –≤–∑–≤–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω.
4. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(V!) –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ:
---
7. –ê–ª–≥–æ—Ä–∏—Ç–º –ô–µ–Ω–∞ (–ø–æ–∏—Å–∫ K –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π)
–ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π.
```javascript
function yenKShortestPaths(graph, start, end, K) {
    let paths = [[start]];
    let shortestPaths = [];

    while (shortestPaths.length < K && paths.length) {
        let path = paths.shift();
        let lastNode = path[path.length - 1];

        if (lastNode === end) {
            shortestPaths.push(path);
        } else {
            for (let neighbor of graph[lastNode] || []) {
                paths.push([...path, neighbor]);
            }
        }

        paths.sort((a, b) => a.length - b.length);
    }

    return shortestPaths;
}

console.log(yenKShortestPaths(graph, "A", "F", 2)); // [["A", "C", "F"], ["A", "B", "E", "F"]]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø—É—Ç–µ–π.
2. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º K –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π.
3. –ü–æ–ª–µ–∑–Ω–æ –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∏ —Å–µ—Ç—è—Ö.
4 –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(K * (V + E)).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ:
---
8. –í–æ–ª–Ω–æ–≤–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –õ–∏ (–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –Ω–∞ —Å–µ—Ç–∫–µ)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞—Ö –∏–ª–∏ –Ω–∞ —Ä–µ—à–µ—Ç–∫–∞—Ö.
```javascript
function leeAlgorithm(grid, start, end) {
    let directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];
    let queue = [[start[0], start[1], 0]];
    let rows = grid.length, cols = grid[0].length;
    let visited = Array.from({ length: rows }, () => Array(cols).fill(false));

    while (queue.length) {
        let [x, y, dist] = queue.shift();

        if (x === end[0] && y === end[1]) return dist;

        for (let [dx, dy] of directions) {
            let nx = x + dx, ny = y + dy;
            if (nx >= 0 && ny >= 0 && nx < rows && ny < cols && grid[nx][ny] === 0 && !visited[nx][ny]) {
                visited[nx][ny] = true;
                queue.push([nx, ny, dist + 1]);
            }
        }
    }

    return -1;
}

let grid = [
    [0, 0, 1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
    [1, 1, 0, 0]
];

console.log(leeAlgorithm(grid, [0, 0], [2, 3])); // 4
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–µ—Ç–æ–∫ –∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–æ–≤.
2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É (BFS).
3. –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç **–∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å.
4. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(NM), –≥–¥–µ N –∏ M ‚Äî —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ:
---
9. –î–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (Bidirectional Search)
–£—Å–∫–æ—Ä—è–µ—Ç –ø–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –∑–∞ —Å—á—ë—Ç –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ç –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
```javascript
function bidirectionalSearch(graph, start, end) {
    let forwardQueue = [[start]];
    let backwardQueue = [[end]];
    let visitedForward = new Set([start]);
    let visitedBackward = new Set([end]);

    while (forwardQueue.length && backwardQueue.length) {
        let forwardPath = forwardQueue.shift();
        let backwardPath = backwardQueue.shift();
        let forwardNode = forwardPath[forwardPath.length - 1];
        let backwardNode = backwardPath[backwardPath.length - 1];

        if (visitedForward.has(backwardNode) || visitedBackward.has(forwardNode)) {
            return forwardPath.concat(backwardPath.reverse().slice(1));
        }

        for (let neighbor of graph[forwardNode] || []) {
            if (!visitedForward.has(neighbor)) {
                visitedForward.add(neighbor);
                forwardQueue.push([...forwardPath, neighbor]);
            }
        }

        for (let neighbor of graph[backwardNode] || []) {
            if (!visitedBackward.has(neighbor)) {
                visitedBackward.add(neighbor);
                backwardQueue.push([...backwardPath, neighbor]);
            }
        }
    }

    return null;
}

console.log(bidirectionalSearch(graph, "A", "F")); // ["A", "C", "F"]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –î–≤–∞ –ø–æ–∏—Å–∫–∞ (BFS) ‚Äî –æ—Ç –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞.
2. –£—Å–∫–æ—Ä—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –±–æ–ª—å—à–∏—Ö –≥—Ä–∞—Ñ–∞—Ö.
3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–æ–∏—Å–∫–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è.
4. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(2^(V/2)) –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ, –Ω–æ –±—ã—Å—Ç—Ä–µ–µ BFS.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
‚ãô ‚ùç –ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ:
---
10. –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –º–µ—Ç–æ–¥–æ–º A* —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é
–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ A* —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é.
```javascript
function aStarPriorityQueue(graph, start, end, heuristic) {
    let openSet = new Map();
    let cameFrom = {};
    let gScore = {}, fScore = {};

    for (let node in graph) {
        gScore[node] = Infinity;
        fScore[node] = Infinity;
    }

    gScore[start] = 0;
    fScore[start] = heuristic(start, end);
    openSet.set(start, fScore[start]);

    while (openSet.size) {
        let current = [...openSet.entries()].reduce((a, b) => (a[1] < b[1] ? a : b))[0];

        if (current === end) {
            let path = [];
            while (current) {
                path.unshift(current);
                current = cameFrom[current];
            }
            return path;
        }

        openSet.delete(current);
        for (let [neighbor, cost] of Object.entries(graph[current])) {
            let tempGScore = gScore[current] + cost;
            if (tempGScore < gScore[neighbor]) {
                cameFrom[neighbor] = current;
                gScore[neighbor] = tempGScore;
                fScore[neighbor] = gScore[neighbor] + heuristic(neighbor, end);
                openSet.set(neighbor, fScore[neighbor]);
            }
        }
    }

    return null;
}

console.log(aStarPriorityQueue(graphWeighted, "A", "D", heuristic));
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
2. –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—É—Ç–∏ —Å —ç–≤—Ä–∏—Å—Ç–∏–∫–æ–π.
3. –°–ª–æ–∂–Ω–æ—Å—Ç—å: O((V + E) log V) —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é.
---------------------------------------------------------------------------------------------
