---------------------------------------------------------------------------------------------  
‚ãô ‚ùç ‚åõ –ó–∞–¥–∞—á–∞: –ò–Ω–¥–µ–∫—Å—ã –±–¥ –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö:
---
–ò–Ω–¥–µ–∫—Å—ã –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ò–Ω–¥–µ–∫—Å—ã –ø–æ–º–æ–≥–∞—é—Ç —É—Å–∫–æ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–µ —Å–∫–∞–Ω–∏—Ä—É—è –≤—Å—é —Ç–∞–±–ª–∏—Ü—É, –∞ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è –∏–ª–∏ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—ã.
–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ JavaScript, –º–æ–∂–Ω–æ –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–≤–∞—è –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü.
0. –ò–Ω–¥–µ–∫—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞ (BST)
–ë–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ–∏—Å–∫–∞ ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –≥–¥–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ –ª–µ–≤—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª –∏–º–µ–µ—Ç –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∞ –ø—Ä–∞–≤—ã–π ‚Äî –±–æ–ª—å—à–µ–µ.
üéØ –†–µ—à–µ–Ω–∏–µ: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞
```javascript
class TreeNode {
  constructor(key, value) {
    this.key = key;
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

class BinarySearchTree {
  constructor() {
    this.root = null;
  }

  insert(key, value) {
    const newNode = new TreeNode(key, value);
    if (!this.root) {
      this.root = newNode;
      return;
    }

    let current = this.root;
    while (true) {
      if (key < current.key) {
        if (!current.left) {
          current.left = newNode;
          return;
        }
        current = current.left;
      } else if (key > current.key) {
        if (!current.right) {
          current.right = newNode;
          return;
        }
        current = current.right;
      } else {
        current.value = value; // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return;
      }
    }
  }

  search(key) {
    let current = this.root;
    while (current) {
      if (key === current.key) return current.value;
      if (key < current.key) current = current.left;
      else current = current.right;
    }
    return null; // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
  }

  delete(key) {
    this.root = this._deleteRecursively(this.root, key);
  }

  _deleteRecursively(node, key) {
    if (!node) return node;

    if (key < node.key) {
      node.left = this._deleteRecursively(node.left, key);
    } else if (key > node.key) {
      node.right = this._deleteRecursively(node.right, key);
    } else {
      // –ï—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω
      if (!node.left) return node.right;
      if (!node.right) return node.left;

      node.key = this._findMin(node.right).key; // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –ø—Ä–∞–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ
      node.right = this._deleteRecursively(node.right, node.key);
    }
    return node;
  }

  _findMin(node) {
    while (node.left) node = node.left;
    return node;
  }
}

const bst = new BinarySearchTree();
bst.insert(50, "value 50");
bst.insert(30, "value 30");
bst.insert(70, "value 70");
bst.insert(20, "value 20");
bst.insert(40, "value 40");

console.log(bst.search(30)); // "value 30"
bst.delete(30);
console.log(bst.search(30)); // null
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã —Å–æ–∑–¥–∞–µ–º –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ–∏—Å–∫–∞ (BST), –≥–¥–µ:
  - –ö–∞–∂–¥—ã–π —É–∑–µ–ª –∏–º–µ–µ—Ç –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ.
  - –î–ª—è –ø–æ–∏—Å–∫–∞ –∏ –≤—Å—Ç–∞–≤–∫–∏ –º—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–∏ –∏ –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞.
  - –ú–µ—Ç–æ–¥ `delete` –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª—è—Ç—å —É–∑–ª—ã —Å —É—á—ë—Ç–æ–º —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–µ—Ç–µ–π, –æ–¥–∏–Ω —Ä–µ–±–µ–Ω–æ–∫ –∏ –¥–≤–∞ —Ä–µ–±–µ–Ω–∫–∞.
---------------------------------------------------------------------------------------------  
